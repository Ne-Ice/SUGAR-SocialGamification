{
  "swagger": "2.0",
  "info": {
    "version": "v1",
    "title": "API V1"
  },
  "basePath": "/",
  "paths": {
    "/api/Account/login": {
      "post": {
        "tags": [ "Account" ],
        "summary": "Logs in an account based on the name and password combination.\r\n            Returns a JsonWebToken used for authorization in any further calls to the API.\r\n            \r\n            Example Usage: POST api/account/login",
        "operationId": "ApiAccountLoginPost",
        "consumes": [ "application/json", "text/json", "application/json-patch+json" ],
        "produces": [],
        "parameters": [
          {
            "name": "accountRequest",
            "in": "body",
            "description": "{PlayGen.SUGAR.Contracts.AccountRequest} object that contains the account details provided.",
            "required": false,
            "schema": { "$ref": "#/definitions/AccountRequest" }
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/Account/register": {
      "post": {
        "tags": [ "Account" ],
        "summary": "Register a new account and creates an associated user.\r\n            Requires the {PlayGen.SUGAR.Contracts.AccountRequest.Name} to be unique.\r\n            Returns a JsonWebToken used for authorization in any further calls to the API.\r\n            \r\n            Example Usage: POST api/account/register",
        "operationId": "ApiAccountRegisterPost",
        "consumes": [ "application/json", "text/json", "application/json-patch+json" ],
        "produces": [],
        "parameters": [
          {
            "name": "accountRequest",
            "in": "body",
            "description": "{PlayGen.SUGAR.Contracts.AccountRequest} object that contains the details of the new Account.",
            "required": false,
            "schema": { "$ref": "#/definitions/AccountRequest" }
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/Account/{id}": {
      "delete": {
        "tags": [ "Account" ],
        "summary": "Delete Account with the ID provided.\r\n            \r\n            Example Usage: DELETE api/account/1",
        "operationId": "ApiAccountByIdDelete",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Account ID.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/Achievements/find/{token}/{gameId}": {
      "get": {
        "tags": [ "Achievements" ],
        "summary": "Find an Achievement that matches <param name=\"token\" /> and <param name=\"gameId\" />.\r\n            \r\n            Example Usage: GET api/achievements/find/ACHIEVEMENT_TOKEN/1",
        "operationId": "ApiAchievementsFindByTokenByGameIdGet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "description": "Token of Achievement",
            "required": true,
            "type": "string"
          },
          {
            "name": "gameId",
            "in": "path",
            "description": "ID of the Game the Achievement is for",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/Achievements/find/{token}/global": {
      "get": {
        "tags": [ "Achievements" ],
        "summary": "Find an Achievement that matches <param name=\"token\" /> and <param name=\"gameId\" />.\r\n            \r\n            Example Usage: GET api/achievements/find/ACHIEVEMENT_TOKEN/1",
        "operationId": "ApiAchievementsFindByTokenGlobalGet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "description": "Token of Achievement",
            "required": true,
            "type": "string"
          },
          {
            "name": "gameId",
            "in": "path",
            "description": "ID of the Game the Achievement is for",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/Achievements/global/list": {
      "get": {
        "tags": [ "Achievements" ],
        "summary": "Find a list of Achievements that match <param name=\"gameId\" />.\r\n            If global is provided instead of a gameId, get all global achievements, ie. achievements that are not associated with a specific game.\r\n            \r\n            Example Usage: GET api/achievements/game/1/list",
        "operationId": "ApiAchievementsGlobalListGet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "Game ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/Achievements/game/{gameId}/list": {
      "get": {
        "tags": [ "Achievements" ],
        "summary": "Find a list of Achievements that match <param name=\"gameId\" />.\r\n            If global is provided instead of a gameId, get all global achievements, ie. achievements that are not associated with a specific game.\r\n            \r\n            Example Usage: GET api/achievements/game/1/list",
        "operationId": "ApiAchievementsGameByGameIdListGet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "Game ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/Achievements/game/{gameId}/evaluate": {
      "get": {
        "tags": [ "Achievements" ],
        "summary": "Find the current progress for all achievements for a <param name=\"gameId\" /> for <param name=\"actorId\" />.\r\n            \r\n            Example Usage: GET api/achievements/game/1/evaluate/1",
        "operationId": "ApiAchievementsGameByGameIdEvaluateGet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "ID of Game",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "actorId",
            "in": "path",
            "description": "ID of Group/User",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/Achievements/global/evaluate": {
      "get": {
        "tags": [ "Achievements" ],
        "summary": "Find the current progress for all achievements for a <param name=\"gameId\" /> for <param name=\"actorId\" />.\r\n            \r\n            Example Usage: GET api/achievements/game/1/evaluate/1",
        "operationId": "ApiAchievementsGlobalEvaluateGet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "ID of Game",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "actorId",
            "in": "path",
            "description": "ID of Group/User",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/Achievements/game/{gameId}/evaluate/{actorId}": {
      "get": {
        "tags": [ "Achievements" ],
        "summary": "Find the current progress for all achievements for a <param name=\"gameId\" /> for <param name=\"actorId\" />.\r\n            \r\n            Example Usage: GET api/achievements/game/1/evaluate/1",
        "operationId": "ApiAchievementsGameByGameIdEvaluateByActorIdGet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "ID of Game",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "actorId",
            "in": "path",
            "description": "ID of Group/User",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/Achievements/global/evaluate/{actorId}": {
      "get": {
        "tags": [ "Achievements" ],
        "summary": "Find the current progress for all achievements for a <param name=\"gameId\" /> for <param name=\"actorId\" />.\r\n            \r\n            Example Usage: GET api/achievements/game/1/evaluate/1",
        "operationId": "ApiAchievementsGlobalEvaluateByActorIdGet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "ID of Game",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "actorId",
            "in": "path",
            "description": "ID of Group/User",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/Achievements/{token}/{gameId}/evaluate": {
      "get": {
        "tags": [ "Achievements" ],
        "summary": "Find the current progress for an Achievement for <param name=\"actorId\" />.\r\n            \r\n            Example Usage: GET api/achievements/ACHIEVEMENT_TOKEN/1/evaluate/1",
        "operationId": "ApiAchievementsByTokenByGameIdEvaluateGet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "description": "Token of Achievement",
            "required": true,
            "type": "string"
          },
          {
            "name": "gameId",
            "in": "path",
            "description": "ID of the Game the Achievement is for",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "actorId",
            "in": "path",
            "description": "ID of Group/User",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/Achievements/{token}/global/evaluate": {
      "get": {
        "tags": [ "Achievements" ],
        "summary": "Find the current progress for an Achievement for <param name=\"actorId\" />.\r\n            \r\n            Example Usage: GET api/achievements/ACHIEVEMENT_TOKEN/1/evaluate/1",
        "operationId": "ApiAchievementsByTokenGlobalEvaluateGet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "description": "Token of Achievement",
            "required": true,
            "type": "string"
          },
          {
            "name": "gameId",
            "in": "path",
            "description": "ID of the Game the Achievement is for",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "actorId",
            "in": "path",
            "description": "ID of Group/User",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/Achievements/{token}/{gameId}/evaluate/{actorId}": {
      "get": {
        "tags": [ "Achievements" ],
        "summary": "Find the current progress for an Achievement for <param name=\"actorId\" />.\r\n            \r\n            Example Usage: GET api/achievements/ACHIEVEMENT_TOKEN/1/evaluate/1",
        "operationId": "ApiAchievementsByTokenByGameIdEvaluateByActorIdGet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "description": "Token of Achievement",
            "required": true,
            "type": "string"
          },
          {
            "name": "gameId",
            "in": "path",
            "description": "ID of the Game the Achievement is for",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "actorId",
            "in": "path",
            "description": "ID of Group/User",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/Achievements/{token}/global/evaluate/{actorId}": {
      "get": {
        "tags": [ "Achievements" ],
        "summary": "Find the current progress for an Achievement for <param name=\"actorId\" />.\r\n            \r\n            Example Usage: GET api/achievements/ACHIEVEMENT_TOKEN/1/evaluate/1",
        "operationId": "ApiAchievementsByTokenGlobalEvaluateByActorIdGet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "description": "Token of Achievement",
            "required": true,
            "type": "string"
          },
          {
            "name": "gameId",
            "in": "path",
            "description": "ID of the Game the Achievement is for",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "actorId",
            "in": "path",
            "description": "ID of Group/User",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/Achievements/create": {
      "post": {
        "tags": [ "Achievements" ],
        "summary": "Create a new Achievement.\r\n            Requires {PlayGen.SUGAR.Contracts.EvaluationCreateRequest.Name} to be unique to that {PlayGen.SUGAR.Contracts.EvaluationCreateRequest.GameId}.\r\n            \r\n            Example Usage: POST api/achievements/create",
        "operationId": "ApiAchievementsCreatePost",
        "consumes": [ "application/json", "text/json", "application/json-patch+json" ],
        "produces": [],
        "parameters": [
          {
            "name": "newAchievement",
            "in": "body",
            "description": "{PlayGen.SUGAR.Contracts.EvaluationCreateRequest} object that holds the details of the new Achievement.",
            "required": false,
            "schema": { "$ref": "#/definitions/EvaluationCreateRequest" }
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/Achievements/update": {
      "put": {
        "tags": [ "Achievements" ],
        "summary": "Update an existing Achievement.\r\n            \r\n            Example Usage: PUT api/achievements/update",
        "operationId": "ApiAchievementsUpdatePut",
        "consumes": [ "application/json", "text/json", "application/json-patch+json" ],
        "produces": [],
        "parameters": [
          {
            "name": "achievement",
            "in": "body",
            "description": "{PlayGen.SUGAR.Contracts.EvaluationCreateRequest} object that holds the details of the Achievement.",
            "required": false,
            "schema": { "$ref": "#/definitions/EvaluationCreateRequest" }
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/Achievements/{token}/global": {
      "delete": {
        "tags": [ "Achievements" ],
        "summary": "Delete Achievement with the <param name=\"token\" /> and <param name=\"gameId\" /> provided.\r\n            \r\n            Example Usage: DELETE api/achievements/ACHIEVEMENT_TOKEN/1",
        "operationId": "ApiAchievementsByTokenGlobalDelete",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "description": "Token of Achievement",
            "required": true,
            "type": "string"
          },
          {
            "name": "gameId",
            "in": "path",
            "description": "ID of the Game the Achievement is for",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/Achievements/{token}/{gameId}": {
      "delete": {
        "tags": [ "Achievements" ],
        "summary": "Delete Achievement with the <param name=\"token\" /> and <param name=\"gameId\" /> provided.\r\n            \r\n            Example Usage: DELETE api/achievements/ACHIEVEMENT_TOKEN/1",
        "operationId": "ApiAchievementsByTokenByGameIdDelete",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "description": "Token of Achievement",
            "required": true,
            "type": "string"
          },
          {
            "name": "gameId",
            "in": "path",
            "description": "ID of the Game the Achievement is for",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/Game/list": {
      "get": {
        "tags": [ "Game" ],
        "summary": "Get a list of all Games.\r\n            \r\n            Example Usage: GET api/game/list",
        "operationId": "ApiGameListGet",
        "consumes": [],
        "produces": [],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/Game/find/{name}": {
      "get": {
        "tags": [ "Game" ],
        "summary": "Get a list of Games that match <param name=\"name\" /> provided.\r\n            \r\n            Example Usage: GET api/game/find/game1",
        "operationId": "ApiGameFindByNameGet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Game name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/Game/findbyid/{id}": {
      "get": {
        "tags": [ "Game" ],
        "summary": "Get Game that matches <param name=\"id\" /> provided.\r\n            \r\n            Example Usage: GET api/game/findbyid/1",
        "operationId": "ApiGameFindbyidByIdGet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Game id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/Game": {
      "post": {
        "tags": [ "Game" ],
        "summary": "Create a new Game.\r\n            Requires the {PlayGen.SUGAR.Contracts.GameRequest.Name} to be unique.\r\n            \r\n            Example Usage: POST api/game",
        "operationId": "ApiGamePost",
        "consumes": [ "application/json", "text/json", "application/json-patch+json" ],
        "produces": [],
        "parameters": [
          {
            "name": "newGame",
            "in": "body",
            "description": "{PlayGen.SUGAR.Contracts.GameRequest} object that contains the details of the new Game.",
            "required": false,
            "schema": { "$ref": "#/definitions/GameRequest" }
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/Game/update/{id}": {
      "put": {
        "tags": [ "Game" ],
        "summary": "Update an existing Game.\r\n            \r\n            Example Usage: PUT api/game/update/1",
        "operationId": "ApiGameUpdateByIdPut",
        "consumes": [ "application/json", "text/json", "application/json-patch+json" ],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the existing Game.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "game",
            "in": "body",
            "description": "{PlayGen.SUGAR.Contracts.GameRequest} object that holds the details of the Game.",
            "required": false,
            "schema": { "$ref": "#/definitions/GameRequest" }
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/Game/{id}": {
      "delete": {
        "tags": [ "Game" ],
        "summary": "Delete Game with the ID provided.\r\n            \r\n            Example Usage: DELETE api/game/1",
        "operationId": "ApiGameByIdDelete",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Game ID.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/GameData": {
      "get": {
        "tags": [ "GameData" ],
        "summary": "Find a list of all GameData that match the <param name=\"actorId\" />, <param name=\"gameId\" /> and <param name=\"key\" /> provided.\r\n            \r\n            Example Usage: GET api/gamedata?actorId=1&amp;gameId=1&amp;key=key1&amp;key=key2",
        "operationId": "ApiGameDataGet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "actorId",
            "in": "modelbinding",
            "description": "ID of a User/Group.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "gameId",
            "in": "modelbinding",
            "description": "ID of a Game.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "key",
            "in": "modelbinding",
            "description": "Array of Key names.",
            "required": false,
            "type": "array",
            "items": { "type": "string" },
            "collectionFormat": "multi"
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      },
      "post": {
        "tags": [ "GameData" ],
        "summary": "Create a new GameData record.\r\n            \r\n            Example Usage: POST api/gamedata",
        "operationId": "ApiGameDataPost",
        "consumes": [ "application/json", "text/json", "application/json-patch+json" ],
        "produces": [],
        "parameters": [
          {
            "name": "newData",
            "in": "body",
            "description": "{PlayGen.SUGAR.Contracts.GameDataRequest} object that holds the details of the new GameData.",
            "required": false,
            "schema": { "$ref": "#/definitions/GameDataRequest" }
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/Group/list": {
      "get": {
        "tags": [ "Group" ],
        "summary": "Get a list of all Groups.\r\n            \r\n            Example Usage: GET api/group/list",
        "operationId": "ApiGroupListGet",
        "consumes": [],
        "produces": [],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/Group/find/{name}": {
      "get": {
        "tags": [ "Group" ],
        "summary": "Get a list of Groups that match <param name=\"name\" /> provided.\r\n            \r\n            Example Usage: GET api/group/find/group1",
        "operationId": "ApiGroupFindByNameGet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Group name.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/Group/findbyid/{id}": {
      "get": {
        "tags": [ "Group" ],
        "summary": "Get Group that matches <param name=\"id\" /> provided.\r\n            \r\n            Example Usage: GET api/group/findbyid/1",
        "operationId": "ApiGroupFindbyidByIdGet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Group id.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/Group": {
      "post": {
        "tags": [ "Group" ],
        "summary": "Create a new Group.\r\n            Requires the {PlayGen.SUGAR.Contracts.ActorRequest.Name} to be unique for Groups.\r\n            \r\n            Example Usage: POST api/group",
        "operationId": "ApiGroupPost",
        "consumes": [ "application/json", "text/json", "application/json-patch+json" ],
        "produces": [],
        "parameters": [
          {
            "name": "actor",
            "in": "body",
            "description": "{PlayGen.SUGAR.Contracts.ActorRequest} object that holds the details of the new Group.",
            "required": false,
            "schema": { "$ref": "#/definitions/ActorRequest" }
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/Group/update/{id}": {
      "put": {
        "tags": [ "Group" ],
        "summary": "Update an existing Group.\r\n            \r\n            Example Usage: PUT api/group/update/1",
        "operationId": "ApiGroupUpdateByIdPut",
        "consumes": [ "application/json", "text/json", "application/json-patch+json" ],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the existing Group.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "group",
            "in": "body",
            "description": "{PlayGen.SUGAR.Contracts.ActorRequest} object that holds the details of the Group.",
            "required": false,
            "schema": { "$ref": "#/definitions/ActorRequest" }
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/Group/{id}": {
      "delete": {
        "tags": [ "Group" ],
        "summary": "Delete group with the <param name=\"id\" /> provided.\r\n            \r\n            Example Usage: DELETE api/group/1",
        "operationId": "ApiGroupByIdDelete",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Group ID.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/GroupMember/requests/{groupId}": {
      "get": {
        "tags": [ "GroupMember" ],
        "summary": "Get a list of all Users that have relationship requests for this <param name=\"groupId\" />.\r\n            \r\n            Example Usage: GET api/groupmember/requests/1",
        "operationId": "ApiGroupMemberRequestsByGroupIdGet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "ID of the group.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/GroupMember/sentrequests/{userId}": {
      "get": {
        "tags": [ "GroupMember" ],
        "summary": "Get a list of all Groups that have been sent relationship requests for this <param name=\"userId\" />.\r\n            \r\n            Example Usage: GET api/groupmember/sentrequests/1",
        "operationId": "ApiGroupMemberSentrequestsByUserIdGet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the user.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/GroupMember/members/{groupId}": {
      "get": {
        "tags": [ "GroupMember" ],
        "summary": "Get a list of all Users that have relationships with this <param name=\"groupId\" />.\r\n            \r\n            Example Usage: GET api/groupmember/members/1",
        "operationId": "ApiGroupMemberMembersByGroupIdGet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "ID of the group.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/GroupMember/usergroups/{userId}": {
      "get": {
        "tags": [ "GroupMember" ],
        "summary": "Get a list of all Groups that have relationships with this <param name=\"userId\" />.\r\n            \r\n            Example Usage: GET api/groupmember/usergroups/1",
        "operationId": "ApiGroupMemberUsergroupsByUserIdGet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the User.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/GroupMember": {
      "put": {
        "tags": [ "GroupMember" ],
        "summary": "Update an existing relationship between <param name=\"relationship.UserId.UserId\" /> and <param name=\"relationship.GroupId.GroupId\" />.\r\n            Requires the relationship to already exist between the User and Group.\r\n            \r\n            Example Usage: PUT api/groupmember",
        "operationId": "ApiGroupMemberPut",
        "consumes": [ "application/json", "text/json", "application/json-patch+json" ],
        "produces": [],
        "parameters": [
          {
            "name": "relationship",
            "in": "body",
            "description": "{PlayGen.SUGAR.Contracts.RelationshipStatusUpdate} object that holds the details of the relationship.",
            "required": false,
            "schema": { "$ref": "#/definitions/RelationshipStatusUpdate" }
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      },
      "post": {
        "tags": [ "GroupMember" ],
        "summary": "Create a new relationship request between the User and Group.\r\n            Requires a relationship between the User and Group to not already exist.\r\n            \r\n            Example Usage: POST api/groupmember",
        "operationId": "ApiGroupMemberPost",
        "consumes": [ "application/json", "text/json", "application/json-patch+json" ],
        "produces": [],
        "parameters": [
          {
            "name": "relationship",
            "in": "body",
            "description": "{PlayGen.SUGAR.Contracts.RelationshipRequest} object that holds the details of the new relationship request.",
            "required": false,
            "schema": { "$ref": "#/definitions/RelationshipRequest" }
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/GroupMember/request": {
      "put": {
        "tags": [ "GroupMember" ],
        "summary": "Update an existing relationship request between <param name=\"relationship.UserId.UserId\" /> and <param name=\"relationship.GroupId.GroupId\" />.\r\n            Requires the relationship request to already exist between the User and Group.\r\n            \r\n            Example Usage: PUT api/groupmember/request",
        "operationId": "ApiGroupMemberRequestPut",
        "consumes": [ "application/json", "text/json", "application/json-patch+json" ],
        "produces": [],
        "parameters": [
          {
            "name": "relationship",
            "in": "body",
            "description": "{PlayGen.SUGAR.Contracts.RelationshipStatusUpdate} object that holds the details of the relationship.",
            "required": false,
            "schema": { "$ref": "#/definitions/RelationshipStatusUpdate" }
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/Leaderboards/global/list": {
      "get": {
        "tags": [ "Leaderboards" ],
        "summary": "Find a list of leaderboards that match <param name=\"gameId\" />.\r\n            If global is provided instead of a gameId, get all global leaderboards, ie. leaderboards that are not associated with a specific game.\r\n            \r\n            Example Usage: GET api/leaderboards/game/1/list",
        "operationId": "ApiLeaderboardsGlobalListGet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "Game ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/Leaderboards/game/{gameId}/list": {
      "get": {
        "tags": [ "Leaderboards" ],
        "summary": "Find a list of leaderboards that match <param name=\"gameId\" />.\r\n            If global is provided instead of a gameId, get all global leaderboards, ie. leaderboards that are not associated with a specific game.\r\n            \r\n            Example Usage: GET api/leaderboards/game/1/list",
        "operationId": "ApiLeaderboardsGameByGameIdListGet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "Game ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/Leaderboards/{token}/{gameId}": {
      "get": {
        "tags": [ "Leaderboards" ],
        "summary": "Find a single leaderboard matching the token and gameId.\r\n            \r\n            Example Usage: GET api/leaderboards/LEADERBOARD_TOKEN/1",
        "operationId": "ApiLeaderboardsByTokenByGameIdGet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "description": "Token",
            "required": true,
            "type": "string"
          },
          {
            "name": "gameId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      },
      "delete": {
        "tags": [ "Leaderboards" ],
        "summary": "Delete Leaderboard with the <param name=\"token\" /> and <param name=\"gameId\" /> provided.\r\n            \r\n            Example Usage: DELETE api/leaderboards/LEADERBOARD_TOKEN/1",
        "operationId": "ApiLeaderboardsByTokenByGameIdDelete",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "description": "Token of Leaderboard",
            "required": true,
            "type": "string"
          },
          {
            "name": "gameId",
            "in": "path",
            "description": "ID of the Game the Leaderboard is for",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/Leaderboards/create": {
      "post": {
        "tags": [ "Leaderboards" ],
        "summary": "Create a new Leaderboard.\r\n            Requires {PlayGen.SUGAR.Contracts.LeaderboardRequest.Name} and {PlayGen.SUGAR.Contracts.LeaderboardRequest.Token} to be unique to that {PlayGen.SUGAR.Contracts.LeaderboardRequest.GameId}.\r\n            \r\n            Example Usage: POST api/leaderboards/create",
        "operationId": "ApiLeaderboardsCreatePost",
        "consumes": [ "application/json", "text/json", "application/json-patch+json" ],
        "produces": [],
        "parameters": [
          {
            "name": "newLeaderboard",
            "in": "body",
            "description": "{PlayGen.SUGAR.Contracts.LeaderboardRequest} object that holds the details of the new Leaderboard.",
            "required": false,
            "schema": { "$ref": "#/definitions/LeaderboardRequest" }
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/Leaderboards/standings": {
      "post": {
        "tags": [ "Leaderboards" ],
        "summary": "Get the standings for a Leaderboard using a {PlayGen.SUGAR.Contracts.LeaderboardStandingsRequest}.\r\n            \r\n            Example Usage: POST api/leaderboards/standings",
        "operationId": "ApiLeaderboardsStandingsPost",
        "consumes": [ "application/json", "text/json", "application/json-patch+json" ],
        "produces": [],
        "parameters": [
          {
            "name": "leaderboardDetails",
            "in": "body",
            "description": "{PlayGen.SUGAR.Contracts.LeaderboardStandingsRequest} object that holds the details that are wanted from the Leaderboard.",
            "required": false,
            "schema": { "$ref": "#/definitions/LeaderboardStandingsRequest" }
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/Leaderboards/update": {
      "put": {
        "tags": [ "Leaderboards" ],
        "summary": "Update an existing Leaderboard.\r\n            \r\n            Example Usage: PUT api/leaderboards/update",
        "operationId": "ApiLeaderboardsUpdatePut",
        "consumes": [ "application/json", "text/json", "application/json-patch+json" ],
        "produces": [],
        "parameters": [
          {
            "name": "leaderboard",
            "in": "body",
            "description": "{PlayGen.SUGAR.Contracts.LeaderboardRequest} object that holds the details of the Leaderboard.",
            "required": false,
            "schema": { "$ref": "#/definitions/LeaderboardRequest" }
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/Leaderboards/{token}/global": {
      "delete": {
        "tags": [ "Leaderboards" ],
        "summary": "Delete Leaderboard with the <param name=\"token\" /> and <param name=\"gameId\" /> provided.\r\n            \r\n            Example Usage: DELETE api/leaderboards/LEADERBOARD_TOKEN/1",
        "operationId": "ApiLeaderboardsByTokenGlobalDelete",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "description": "Token of Leaderboard",
            "required": true,
            "type": "string"
          },
          {
            "name": "gameId",
            "in": "path",
            "description": "ID of the Game the Leaderboard is for",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/Resource": {
      "get": {
        "tags": [ "Resource" ],
        "summary": "Find a list of all Resources filtered by the <param name=\"actorId\" />, <param name=\"gameId\" /> and <param name=\"key\" /> provided.\r\n            \r\n            Example Usage: GET api/resource?actorId=1&amp;gameId=1&amp;key=key1&amp;key=key2",
        "operationId": "ApiResourceGet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "gameId",
            "in": "modelbinding",
            "description": "ID of a Game.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "actorId",
            "in": "modelbinding",
            "description": "ID of a User/Group.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "keys",
            "in": "modelbinding",
            "description": "Optional array of Key names to filter results by.",
            "required": false,
            "type": "array",
            "items": { "type": "string" },
            "collectionFormat": "multi"
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      },
      "post": {
        "tags": [ "Resource" ],
        "summary": "Creates or updates a Resource record.\r\n            \r\n            Example Usage: POST api/resource",
        "operationId": "ApiResourcePost",
        "consumes": [ "application/json", "text/json", "application/json-patch+json" ],
        "produces": [],
        "parameters": [
          {
            "name": "resourceRequest",
            "in": "body",
            "description": "{PlayGen.SUGAR.Contracts.ResourceAddRequest} object that holds the details of the ResourceData.",
            "required": false,
            "schema": { "$ref": "#/definitions/ResourceAddRequest" }
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/Resource/transfer": {
      "post": {
        "tags": [ "Resource" ],
        "summary": "Transfers a quantity of a specific resource.\r\n            \r\n            Example Usage: Post api/resource/transfer",
        "operationId": "ApiResourceTransferPost",
        "consumes": [ "application/json", "text/json", "application/json-patch+json" ],
        "produces": [],
        "parameters": [
          {
            "name": "transferRequest",
            "in": "body",
            "description": "{PlayGen.SUGAR.Contracts.ResourceTransferRequest} object that holds the details of the resoruce transfer.",
            "required": false,
            "schema": { "$ref": "#/definitions/ResourceTransferRequest" }
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/Skills/find/{token}/{gameId}": {
      "get": {
        "tags": [ "Skills" ],
        "summary": "Find a Skill that matches <param name=\"token\" /> and <param name=\"gameId\" />.\r\n            \r\n            Example Usage: GET api/skills/find/SKILL_TOKEN/1",
        "operationId": "ApiSkillsFindByTokenByGameIdGet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "description": "Token of Skill",
            "required": true,
            "type": "string"
          },
          {
            "name": "gameId",
            "in": "path",
            "description": "ID of the Game the Skill is for",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/Skills/find/{token}/global": {
      "get": {
        "tags": [ "Skills" ],
        "summary": "Find a Skill that matches <param name=\"token\" /> and <param name=\"gameId\" />.\r\n            \r\n            Example Usage: GET api/skills/find/SKILL_TOKEN/1",
        "operationId": "ApiSkillsFindByTokenGlobalGet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "description": "Token of Skill",
            "required": true,
            "type": "string"
          },
          {
            "name": "gameId",
            "in": "path",
            "description": "ID of the Game the Skill is for",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/Skills/global/list": {
      "get": {
        "tags": [ "Skills" ],
        "summary": "Find a list of Skills that match <param name=\"gameId\" />.\r\n            If global is provided instead of a gameId, get all global skills, ie. skills that are not associated with a specific game.\r\n            \r\n            Example Usage: GET api/skills/game/1/list",
        "operationId": "ApiSkillsGlobalListGet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "Game ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/Skills/game/{gameId}/list": {
      "get": {
        "tags": [ "Skills" ],
        "summary": "Find a list of Skills that match <param name=\"gameId\" />.\r\n            If global is provided instead of a gameId, get all global skills, ie. skills that are not associated with a specific game.\r\n            \r\n            Example Usage: GET api/skills/game/1/list",
        "operationId": "ApiSkillsGameByGameIdListGet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "Game ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/Skills/game/{gameId}/evaluate": {
      "get": {
        "tags": [ "Skills" ],
        "summary": "Find the current progress for all skills for a <param name=\"gameId\" /> for <param name=\"actorId\" />.\r\n            \r\n            Example Usage: GET api/skills/game/1/evaluate/1",
        "operationId": "ApiSkillsGameByGameIdEvaluateGet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "ID of Game",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "actorId",
            "in": "path",
            "description": "ID of Group/User",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/Skills/global/evaluate": {
      "get": {
        "tags": [ "Skills" ],
        "summary": "Find the current progress for all skills for a <param name=\"gameId\" /> for <param name=\"actorId\" />.\r\n            \r\n            Example Usage: GET api/skills/game/1/evaluate/1",
        "operationId": "ApiSkillsGlobalEvaluateGet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "ID of Game",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "actorId",
            "in": "path",
            "description": "ID of Group/User",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/Skills/game/{gameId}/evaluate/{actorId}": {
      "get": {
        "tags": [ "Skills" ],
        "summary": "Find the current progress for all skills for a <param name=\"gameId\" /> for <param name=\"actorId\" />.\r\n            \r\n            Example Usage: GET api/skills/game/1/evaluate/1",
        "operationId": "ApiSkillsGameByGameIdEvaluateByActorIdGet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "ID of Game",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "actorId",
            "in": "path",
            "description": "ID of Group/User",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/Skills/global/evaluate/{actorId}": {
      "get": {
        "tags": [ "Skills" ],
        "summary": "Find the current progress for all skills for a <param name=\"gameId\" /> for <param name=\"actorId\" />.\r\n            \r\n            Example Usage: GET api/skills/game/1/evaluate/1",
        "operationId": "ApiSkillsGlobalEvaluateByActorIdGet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "ID of Game",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "actorId",
            "in": "path",
            "description": "ID of Group/User",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/Skills/{token}/{gameId}/evaluate": {
      "get": {
        "tags": [ "Skills" ],
        "summary": "Find the current progress for a Skill for <param name=\"actorId\" />.\r\n            \r\n            Example Usage: GET api/skills/SKILL_TOKEN/1/evaluate/1",
        "operationId": "ApiSkillsByTokenByGameIdEvaluateGet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "description": "Token of Skill",
            "required": true,
            "type": "string"
          },
          {
            "name": "gameId",
            "in": "path",
            "description": "ID of the Game the Skill is for",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "actorId",
            "in": "path",
            "description": "ID of Group/User",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/Skills/{token}/global/evaluate": {
      "get": {
        "tags": [ "Skills" ],
        "summary": "Find the current progress for a Skill for <param name=\"actorId\" />.\r\n            \r\n            Example Usage: GET api/skills/SKILL_TOKEN/1/evaluate/1",
        "operationId": "ApiSkillsByTokenGlobalEvaluateGet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "description": "Token of Skill",
            "required": true,
            "type": "string"
          },
          {
            "name": "gameId",
            "in": "path",
            "description": "ID of the Game the Skill is for",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "actorId",
            "in": "path",
            "description": "ID of Group/User",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/Skills/{token}/{gameId}/evaluate/{actorId}": {
      "get": {
        "tags": [ "Skills" ],
        "summary": "Find the current progress for a Skill for <param name=\"actorId\" />.\r\n            \r\n            Example Usage: GET api/skills/SKILL_TOKEN/1/evaluate/1",
        "operationId": "ApiSkillsByTokenByGameIdEvaluateByActorIdGet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "description": "Token of Skill",
            "required": true,
            "type": "string"
          },
          {
            "name": "gameId",
            "in": "path",
            "description": "ID of the Game the Skill is for",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "actorId",
            "in": "path",
            "description": "ID of Group/User",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/Skills/{token}/global/evaluate/{actorId}": {
      "get": {
        "tags": [ "Skills" ],
        "summary": "Find the current progress for a Skill for <param name=\"actorId\" />.\r\n            \r\n            Example Usage: GET api/skills/SKILL_TOKEN/1/evaluate/1",
        "operationId": "ApiSkillsByTokenGlobalEvaluateByActorIdGet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "description": "Token of Skill",
            "required": true,
            "type": "string"
          },
          {
            "name": "gameId",
            "in": "path",
            "description": "ID of the Game the Skill is for",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "actorId",
            "in": "path",
            "description": "ID of Group/User",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/Skills/create": {
      "post": {
        "tags": [ "Skills" ],
        "summary": "Create a new Skill.\r\n            Requires {PlayGen.SUGAR.Contracts.EvaluationCreateRequest.Name} to be unique to that {PlayGen.SUGAR.Contracts.EvaluationCreateRequest.GameId}.\r\n            \r\n            Example Usage: POST api/skills/create",
        "operationId": "ApiSkillsCreatePost",
        "consumes": [ "application/json", "text/json", "application/json-patch+json" ],
        "produces": [],
        "parameters": [
          {
            "name": "newSkill",
            "in": "body",
            "description": "{PlayGen.SUGAR.Contracts.EvaluationCreateRequest} object that holds the details of the new Skill.",
            "required": false,
            "schema": { "$ref": "#/definitions/EvaluationCreateRequest" }
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/Skills/update": {
      "put": {
        "tags": [ "Skills" ],
        "summary": "Update an existing Skill.\r\n            \r\n            Example Usage: PUT api/skills/update",
        "operationId": "ApiSkillsUpdatePut",
        "consumes": [ "application/json", "text/json", "application/json-patch+json" ],
        "produces": [],
        "parameters": [
          {
            "name": "skill",
            "in": "body",
            "description": "{PlayGen.SUGAR.Contracts.EvaluationCreateRequest} object that holds the details of the Skill.",
            "required": false,
            "schema": { "$ref": "#/definitions/EvaluationCreateRequest" }
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/Skills/{token}/global": {
      "delete": {
        "tags": [ "Skills" ],
        "summary": "Delete Skill with the <param name=\"token\" /> and <param name=\"gameId\" /> provided.\r\n            \r\n            Example Usage: DELETE api/skills/SKILL_TOKEN/1",
        "operationId": "ApiSkillsByTokenGlobalDelete",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "description": "Token of Skill",
            "required": true,
            "type": "string"
          },
          {
            "name": "gameId",
            "in": "path",
            "description": "ID of the Game the Skill is for",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/Skills/{token}/{gameId}": {
      "delete": {
        "tags": [ "Skills" ],
        "summary": "Delete Skill with the <param name=\"token\" /> and <param name=\"gameId\" /> provided.\r\n            \r\n            Example Usage: DELETE api/skills/SKILL_TOKEN/1",
        "operationId": "ApiSkillsByTokenByGameIdDelete",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "description": "Token of Skill",
            "required": true,
            "type": "string"
          },
          {
            "name": "gameId",
            "in": "path",
            "description": "ID of the Game the Skill is for",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/User/list": {
      "get": {
        "tags": [ "User" ],
        "summary": "Get a list of all Users.\r\n            \r\n            Example Usage: GET api/user/list",
        "operationId": "ApiUserListGet",
        "consumes": [],
        "produces": [],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/User/find/{name}": {
      "get": {
        "tags": [ "User" ],
        "summary": "Get a list of Users that match <param name=\"name\" /> provided.\r\n            \r\n            Example Usage: GET api/user/find/user1",
        "operationId": "ApiUserFindByNameGet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "User name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "exactMatch",
            "in": "modelbinding",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/User/findbyid/{id}": {
      "get": {
        "tags": [ "User" ],
        "summary": "Get User that matches <param name=\"id\" /> provided.\r\n            \r\n            Example Usage: GET api/user/findbyid/1",
        "operationId": "ApiUserFindbyidByIdGet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User id.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/User": {
      "post": {
        "tags": [ "User" ],
        "summary": "Create a new User.\r\n            Requires the {PlayGen.SUGAR.Contracts.ActorRequest.Name} to be unique for Users.\r\n            \r\n            Example Usage: POST api/user",
        "operationId": "ApiUserPost",
        "consumes": [ "application/json", "text/json", "application/json-patch+json" ],
        "produces": [],
        "parameters": [
          {
            "name": "actor",
            "in": "body",
            "description": "{PlayGen.SUGAR.Contracts.ActorRequest} object that holds the details of the new User.",
            "required": false,
            "schema": { "$ref": "#/definitions/ActorRequest" }
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/User/update/{id}": {
      "put": {
        "tags": [ "User" ],
        "summary": "Update an existing User.\r\n            \r\n            Example Usage: PUT api/user/update/1",
        "operationId": "ApiUserUpdateByIdPut",
        "consumes": [ "application/json", "text/json", "application/json-patch+json" ],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the existing User.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "user",
            "in": "body",
            "description": "{PlayGen.SUGAR.Contracts.ActorRequest} object that holds the details of the User.",
            "required": false,
            "schema": { "$ref": "#/definitions/ActorRequest" }
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/User/{id}": {
      "delete": {
        "tags": [ "User" ],
        "summary": "Delete user with the <param name=\"id\" /> provided.\r\n            \r\n            Example Usage: DELETE api/user/1",
        "operationId": "ApiUserByIdDelete",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/UserFriend/requests/{userId}": {
      "get": {
        "tags": [ "UserFriend" ],
        "summary": "Get a list of all Users that have relationship requests for this <param name=\"userId\" />.\r\n            \r\n            Example Usage: GET api/userfriend/requests/1",
        "operationId": "ApiUserFriendRequestsByUserIdGet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the group.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/UserFriend/sentrequests/{userId}": {
      "get": {
        "tags": [ "UserFriend" ],
        "summary": "Get a list of all Users that have been sent relationship requests for this <param name=\"userId\" />.\r\n            \r\n            Example Usage: GET api/userfriend/sentrequests/1",
        "operationId": "ApiUserFriendSentrequestsByUserIdGet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the user.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/UserFriend/friends/{userId}": {
      "get": {
        "tags": [ "UserFriend" ],
        "summary": "Get a list of all Users that have relationships with this <param name=\"userId\" />.\r\n            \r\n            Example Usage: GET api/userfriend/friends/1",
        "operationId": "ApiUserFriendFriendsByUserIdGet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the user.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/UserFriend": {
      "put": {
        "tags": [ "UserFriend" ],
        "summary": "Update an existing relationship between <param name=\"relationship.RequestorId.RequestorId\" /> and <param name=\"relationship.AcceptorId.AcceptorId\" />.\r\n            Requires the relationship to already exist between the two Users.\r\n            \r\n            Example Usage: PUT api/userfriend",
        "operationId": "ApiUserFriendPut",
        "consumes": [ "application/json", "text/json", "application/json-patch+json" ],
        "produces": [],
        "parameters": [
          {
            "name": "relationship",
            "in": "body",
            "description": "{PlayGen.SUGAR.Contracts.RelationshipStatusUpdate} object that holds the details of the relationship.",
            "required": false,
            "schema": { "$ref": "#/definitions/RelationshipStatusUpdate" }
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      },
      "post": {
        "tags": [ "UserFriend" ],
        "summary": "Create a new relationship request between two Users.\r\n            Requires a relationship between the two to not already exist.\r\n            \r\n            Example Usage: POST api/userfriend",
        "operationId": "ApiUserFriendPost",
        "consumes": [ "application/json", "text/json", "application/json-patch+json" ],
        "produces": [],
        "parameters": [
          {
            "name": "relationship",
            "in": "body",
            "description": "{PlayGen.SUGAR.Contracts.RelationshipRequest} object that holds the details of the new relationship request.",
            "required": false,
            "schema": { "$ref": "#/definitions/RelationshipRequest" }
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    },
    "/api/UserFriend/request": {
      "put": {
        "tags": [ "UserFriend" ],
        "summary": "Update an existing relationship request between <param name=\"relationship.RequestorId.RequestorId\" /> and <param name=\"relationship.AcceptorId.AcceptorId\" />.\r\n            Requires the relationship request to already exist between the two Users.\r\n            \r\n            Example Usage: PUT api/userfriend/request",
        "operationId": "ApiUserFriendRequestPut",
        "consumes": [ "application/json", "text/json", "application/json-patch+json" ],
        "produces": [],
        "parameters": [
          {
            "name": "relationship",
            "in": "body",
            "description": "{PlayGen.SUGAR.Contracts.RelationshipStatusUpdate} object that holds the details of the relationship.",
            "required": false,
            "schema": { "$ref": "#/definitions/RelationshipStatusUpdate" }
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      }
    }
  },
  "definitions": {
    "AccountRequest": {
      "description": "Encapsulates log-in details.",
      "required": [ "name", "password", "autoLogin" ],
      "type": "object",
      "properties": {
        "name": {
          "description": "The user's log-in name.",
          "maxLength": 64,
          "minLength": 0,
          "type": "string"
        },
        "password": {
          "description": "The user's password.",
          "maxLength": 64,
          "minLength": 0,
          "type": "string"
        },
        "autoLogin": {
          "description": "Whether the user will be logged in upon registering.",
          "type": "boolean"
        }
      }
    },
    "EvaluationCreateRequest": {
      "description": "Encapsulates achievement/skill details.",
      "required": [ "token", "name", "actorType", "completionCriteria" ],
      "type": "object",
      "properties": {
        "token": {
          "description": "A unique identifier used in development to reference the achievement/skill.",
          "type": "string"
        },
        "gameId": {
          "format": "int32",
          "description": "The ID of the Game which this achievement/skill should belong to. Can be left null to make the achievement/skill system-wide.",
          "type": "integer"
        },
        "name": {
          "description": "The display name for the achievement/skill.",
          "maxLength": 64,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "description": "The description of the achievement/skill.",
          "maxLength": 256,
          "minLength": 0,
          "type": "string"
        },
        "actorType": {
          "description": "The type of actor which this achievement/skill is intended to be completed by.",
          "enum": [ "Undefined", "User", "Group" ],
          "type": "string"
        },
        "completionCriteria": {
          "description": "A list of criteria which will be checked in order to see if an actor has completed the achievement/skill.\r\n            Must contain at least one criteria.",
          "type": "array",
          "items": { "$ref": "#/definitions/EvaluationCriteria" }
        },
        "reward": {
          "description": "A list of rewards that will be provided to the actor upon completion of the achievement/skill criteria.\r\n            An achievement does not need to contain a reward.",
          "type": "array",
          "items": { "$ref": "#/definitions/Reward" }
        }
      }
    },
    "EvaluationCriteria": {
      "description": "Encapsulates requirements for completing an achievement or skill.",
      "required": [ "key", "dataType", "criteriaQueryType", "comparisonType", "scope", "value" ],
      "type": "object",
      "properties": {
        "key": {
          "description": "The key which will be queried against to check if criteria is met.",
          "type": "string"
        },
        "dataType": {
          "description": "GameDataType of the key which is being queried.",
          "enum": [ "String", "Long", "Float", "Boolean" ],
          "type": "string"
        },
        "criteriaQueryType": {
          "description": "Which stored GameData will be queried.",
          "enum": [ "Any", "Sum", "Latest" ],
          "type": "string"
        },
        "comparisonType": {
          "description": "How the target value and the actual value will be compared.",
          "enum": [ "Equals", "NotEqual", "Greater", "GreaterOrEqual", "Less", "LessOrEqual" ],
          "type": "string"
        },
        "scope": {
          "description": "Whether the criteria will be checked against the actor or related actors (i.e. group members, user friends).",
          "enum": [ "Actor", "RelatedActors" ],
          "type": "string"
        },
        "value": {
          "description": "The value which will compared against in order to see if the criteria has been met.",
          "type": "string"
        }
      }
    },
    "Reward": {
      "description": "Encapsulates the reward given for completing an achievement or skill.",
      "required": [ "key", "dataType", "value" ],
      "type": "object",
      "properties": {
        "key": {
          "description": "The key which will be stored in GameData.",
          "type": "string"
        },
        "dataType": {
          "description": "GameDataType of the value for this GameData.",
          "enum": [ "String", "Long", "Float", "Boolean" ],
          "type": "string"
        },
        "value": {
          "description": "The value of the GameData.",
          "type": "string"
        }
      }
    },
    "GameRequest": {
      "description": "Encapsulates game details.",
      "required": [ "name" ],
      "type": "object",
      "properties": {
        "name": {
          "description": "The display name for the game.",
          "maxLength": 64,
          "minLength": 0,
          "type": "string"
        }
      }
    },
    "GameDataRequest": {
      "description": "Encapsulates GameData details.",
      "required": [ "key", "value", "gameDataType" ],
      "type": "object",
      "properties": {
        "actorId": {
          "format": "int32",
          "description": "The id of the Actor which this GameData is being ensigned to. Can be left null to ensign to the system/game.",
          "type": "integer"
        },
        "gameId": {
          "format": "int32",
          "description": "The id of the Game which this GameData relates to. Can be left null to relate the GameData to the wider system.",
          "type": "integer"
        },
        "key": {
          "description": "The identifier of the data being stored.",
          "maxLength": 64,
          "minLength": 0,
          "type": "string"
        },
        "value": {
          "description": "The value of the data being stored.",
          "maxLength": 64,
          "minLength": 0,
          "type": "string"
        },
        "gameDataType": {
          "description": "The type of data which is being stored.",
          "enum": [ "String", "Long", "Float", "Boolean" ],
          "type": "string"
        }
      }
    },
    "ActorRequest": {
      "description": "Encapsulates user and group details.",
      "required": [ "name" ],
      "type": "object",
      "properties": {
        "name": {
          "description": "The display name of the user/group.",
          "maxLength": 64,
          "minLength": 0,
          "type": "string"
        }
      }
    },
    "RelationshipRequest": {
      "description": "Encapsulates relationship details.",
      "required": [ "requestorId", "acceptorId", "autoAccept" ],
      "type": "object",
      "properties": {
        "requestorId": {
          "format": "int32",
          "description": "The Id of the requesting actor.",
          "type": "integer"
        },
        "acceptorId": {
          "format": "int32",
          "description": "The Id of the receiving actor.",
          "type": "integer"
        },
        "autoAccept": {
          "description": "Whether the request should be automatically accepted.",
          "type": "boolean"
        }
      }
    },
    "RelationshipStatusUpdate": {
      "description": "Encapsulates relationship details, including updated status of the relationship.",
      "required": [ "requestorId", "acceptorId", "accepted" ],
      "type": "object",
      "properties": {
        "requestorId": {
          "format": "int32",
          "description": "The Id of the requesting actor.",
          "type": "integer"
        },
        "acceptorId": {
          "format": "int32",
          "description": "The Id of the receiving actor.",
          "type": "integer"
        },
        "accepted": {
          "description": "Whether the request was accepted or declined.",
          "type": "boolean"
        }
      }
    },
    "LeaderboardRequest": {
      "description": "Encapsulates leaderboard details.",
      "required": [ "token", "name", "actorType", "gameDataType", "criteriaScope", "leaderboardType" ],
      "type": "object",
      "properties": {
        "token": {
          "description": "A unique identifier used in development to reference the leaderboard.",
          "maxLength": 64,
          "minLength": 0,
          "type": "string"
        },
        "gameId": {
          "format": "int32",
          "description": "The Id of the Game which this leaderboards belongs to. Can be left null to relate this leaderboard to the system rather than a game.\r\n            This Id is also used when gathering GameData using the Key provided.",
          "type": "integer"
        },
        "name": {
          "description": "The display name of the leaderboard.",
          "maxLength": 64,
          "minLength": 0,
          "type": "string"
        },
        "key": {
          "description": "The GameData key which is checked against in order to create the leaderboard standings.",
          "maxLength": 64,
          "minLength": 0,
          "type": "string"
        },
        "actorType": {
          "description": "The type of actor which this leaderboard is intended for.",
          "enum": [ "Undefined", "User", "Group" ],
          "type": "string"
        },
        "gameDataType": {
          "description": "The GameDataType of the GameData being checked against.",
          "enum": [ "String", "Long", "Float", "Boolean" ],
          "type": "string"
        },
        "criteriaScope": {
          "description": "Whether the criteria will be checked against the actor or relatedactors (i.e. group members, user friends).",
          "enum": [ "Actor", "RelatedActors" ],
          "type": "string"
        },
        "leaderboardType": {
          "description": "The method which data will be collected and sorted for this leaderboard.",
          "enum": [ "Highest", "Lowest", "Cumulative", "Count", "Earliest", "Latest" ],
          "type": "string"
        }
      }
    },
    "LeaderboardStandingsRequest": {
      "description": "Encapsulates leaderboard current standings request.",
      "required": [ "leaderboardToken", "gameId", "leaderboardFilterType", "limit", "offset" ],
      "type": "object",
      "properties": {
        "leaderboardToken": {
          "description": "The Token of the Leaderboard which the standings are being gathered for.",
          "type": "string"
        },
        "gameId": {
          "format": "int32",
          "description": "The Id of the Game the leaderboard. Can be left null for system-wide leaderboards.",
          "type": "integer"
        },
        "actorId": {
          "format": "int32",
          "description": "The Id of an Actor. Required for getting standings for Near, Friends (user only) and Group Members (group only)",
          "type": "integer"
        },
        "leaderboardFilterType": {
          "description": "The filter for what standings will be returned.",
          "enum": [ "Top", "Near", "Friends", "GroupMembers" ],
          "type": "string"
        },
        "limit": {
          "format": "int32",
          "description": "The maximum number of results which will be returned.",
          "type": "integer"
        },
        "offset": {
          "format": "int32",
          "description": "The set of results which will be returned based on the limit.\r\n            0 returns the first set of results for Top, Friends and Group Member and the nearest range for Near.",
          "type": "integer"
        },
        "dateStart": {
          "format": "date-time",
          "description": "The earliest point which data should be collected from.\r\n            Can be left null to set no earliest point.",
          "type": "string"
        },
        "dateEnd": {
          "format": "date-time",
          "description": "The latest point which data should be collected from.\r\n            Can be left null to gather ll data up to the present time.",
          "type": "string"
        }
      }
    },
    "ResourceAddRequest": {
      "description": "Encapsulates Resource Data details.",
      "required": [ "key", "quantity" ],
      "type": "object",
      "properties": {
        "actorId": {
          "format": "int32",
          "description": "The id of the Actor which this Resource is being ensigned to. Can be left null to ensign to the system/game.",
          "type": "integer"
        },
        "gameId": {
          "format": "int32",
          "description": "The id of the Game which this Resource relates to. Can be left null to relate the Resource to the wider system.",
          "type": "integer"
        },
        "key": {
          "description": "The identifier/name of the Resource.",
          "maxLength": 64,
          "minLength": 0,
          "type": "string"
        },
        "quantity": {
          "format": "int64",
          "description": "The value of the Resource.",
          "type": "integer"
        }
      }
    },
    "ResourceTransferRequest": {
      "description": "Encapsulates Resource Transfer details.",
      "required": [ "quantity", "key" ],
      "type": "object",
      "properties": {
        "senderActorId": {
          "format": "int32",
          "description": "The Id of the Actor who will send this Resource. Can be left null to only give/take from the current owner.",
          "type": "integer"
        },
        "recipientActorId": {
          "format": "int32",
          "description": "The Id of the Actor who will receive this Resource. Can be left null to only give/take from the current owner.",
          "type": "integer"
        },
        "gameId": {
          "format": "int32",
          "description": "The Id of the Game which this Resource belongs to. Left null for system-wise resources.",
          "type": "integer"
        },
        "quantity": {
          "format": "int64",
          "description": "The amount of the Resource being transferred.",
          "type": "integer"
        },
        "key": {
          "description": "The key of the Resource being transferred.",
          "maxLength": 64,
          "minLength": 0,
          "type": "string"
        }
      }
    }
  },
  "securityDefinitions": {}
}