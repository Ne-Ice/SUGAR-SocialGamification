{
  "unity-client/tutorials/quick-start.html": {
    "href": "unity-client/tutorials/quick-start.html",
    "title": "Quick Start | SUGAR",
    "keywords": "Quick Start Note: Please ensure you have created a SUGAR account before going through the following steps. If you don't already have one, you can create a SUGAR account here . Build the SUGAR Unity Client Open and build the PlayGen.SUGAR.Unity project. Add SUGAR Add the 'SUGAR' prefab, found at SUGAR/Prefabs/SUGAR, into your starting scene. All of the interfaces referenced on the Unity Clients on this object can be found at SUGAR/Example/Prefabs/Landscape. Create Game Seed File Open the 'Edit Game Seed' tool by clicking Tools/SUGAR/Edit Game Seed. Create a new game seed by clicking the 'Create Game Seed' button. Fill in the 'Name' field with the name of the game you wish to seed. Save this basic Seed file by clicking the 'Save' button. If you do not change the selected file, this will overwrite the provided 'GameSeed' file. If you wish to set up the achievements, leaderboards and skills for your game now, go to the guide on Seeding for further details. Seed Game Open the 'Seed Game' tool by clicking Tools/SUGAR/Seed Game. Fill in the provided Username and Password fields with your SUGAR details. If you did not overwrite the provided 'GameSeed' file, change the 'Game Seed File' field to use the file you created during step 2. Click the 'Sign-in and Seed' button to add the game to the platform. This step will fail if the seed file is invalid or you provide invalid user details. Check that the 'Game Token' and 'Game Id' fields on the SUGAR object in your starting scene has been edited to match the details of the game you just created. Set Auto Log-in Values (optional) Open the 'Set Auto Log-in Values' tool by clicking Tools/SUGAR/Set Auto Log-in Values. Fill in the details you want to use to automatically sign in when testing in Unity. This feature is disabled if either 'Auto Log-in' within the tool or 'Allow Auto Login' in 'Account Unity Client' on the 'SUGAR' prefab is not checked. Testing SUGAR features in Unity Project In the unity project, open Unity/Assets/SUGAR/Example/Scene.unity , after rebuilding the PlayGen.SUGAR.Unity project you can test the functionality with the following commands: Shortcut Test T + L GameLeaderboard.DisplayGameList T + K Evaluation.DisplayAchievementList T + A Evaluation.ForceNotification T + S Unity.StartSpinner T + H Unity.StopSpinner T + F UserFriend.Display T + G UserGroup.Display Escape Application.Quit Delete Account.Logout Shortcuts can be seen and changed in Unity/Assets/SUGAR/Example/Scripts/TestImplementation.cs ."
  },
  "api/PlayGen.SUGAR.Server.Model.html": {
    "href": "api/PlayGen.SUGAR.Server.Model.html",
    "title": "Namespace PlayGen.SUGAR.Server.Model | SUGAR",
    "keywords": "Namespace PlayGen.SUGAR.Server.Model Classes Account AccountSource Achievement Actor ActorClaim ActorData ActorRelationship ActorRelationshipRequest ActorRole Claim Evaluation EvaluationCriteria EvaluationData Game Group Leaderboard Match Reward Role RoleClaim SentEvaluationNotification Skill User"
  },
  "api/PlayGen.SUGAR.Server.WebAPI.Exceptions.IncompatibleAPIVersionException.html": {
    "href": "api/PlayGen.SUGAR.Server.WebAPI.Exceptions.IncompatibleAPIVersionException.html",
    "title": "Class IncompatibleAPIVersionException | SUGAR",
    "keywords": "Class IncompatibleAPIVersionException Inheritance System.Object IncompatibleAPIVersionException Namespace : PlayGen.SUGAR.Server.WebAPI.Exceptions Assembly : PlayGen.SUGAR.Server.WebAPI.dll Syntax public class IncompatibleAPIVersionException : Exception Constructors IncompatibleAPIVersionException(String) Declaration public IncompatibleAPIVersionException(string message) Parameters Type Name Description System.String message IncompatibleAPIVersionException(String, Exception) Declaration public IncompatibleAPIVersionException(string message, Exception innerException) Parameters Type Name Description System.String message Exception innerException"
  },
  "api/PlayGen.SUGAR.Server.WebAPI.Exceptions.InvalidAccountDetailsException.html": {
    "href": "api/PlayGen.SUGAR.Server.WebAPI.Exceptions.InvalidAccountDetailsException.html",
    "title": "Class InvalidAccountDetailsException | SUGAR",
    "keywords": "Class InvalidAccountDetailsException Inheritance System.Object InvalidAccountDetailsException Namespace : PlayGen.SUGAR.Server.WebAPI.Exceptions Assembly : PlayGen.SUGAR.Server.WebAPI.dll Syntax public class InvalidAccountDetailsException : Exception Constructors InvalidAccountDetailsException() Declaration public InvalidAccountDetailsException() InvalidAccountDetailsException(String) Declaration public InvalidAccountDetailsException(string message) Parameters Type Name Description System.String message InvalidAccountDetailsException(String, Exception) Declaration public InvalidAccountDetailsException(string message, Exception inner) Parameters Type Name Description System.String message Exception inner"
  },
  "api/PlayGen.SUGAR.Server.WebAPI.Exceptions.InvalidSessionException.html": {
    "href": "api/PlayGen.SUGAR.Server.WebAPI.Exceptions.InvalidSessionException.html",
    "title": "Class InvalidSessionException | SUGAR",
    "keywords": "Class InvalidSessionException Inheritance System.Object InvalidSessionException Namespace : PlayGen.SUGAR.Server.WebAPI.Exceptions Assembly : PlayGen.SUGAR.Server.WebAPI.dll Syntax public class InvalidSessionException : Exception Constructors InvalidSessionException(String) Declaration public InvalidSessionException(string message) Parameters Type Name Description System.String message"
  },
  "api/PlayGen.SUGAR.Client.SUGARClient.html": {
    "href": "api/PlayGen.SUGAR.Client.SUGARClient.html",
    "title": "Class SUGARClient | SUGAR",
    "keywords": "Class SUGARClient Inheritance System.Object SUGARClient SUGARDevelopmentClient Namespace : PlayGen.SUGAR.Client Assembly : PlayGen.SUGAR.Client.dll Syntax public class SUGARClient : object Constructors SUGARClient(String, IHttpHandler, Boolean, Dictionary<String, String>, Dictionary<String, String>, Int32) Declaration public SUGARClient(string baseAddress, IHttpHandler httpHandler = null, bool asyncEnabled = true, Dictionary<string, string> persistentHeaders = null, Dictionary<string, string> sessionHeaders = null, int timeoutMilliseconds = null) Parameters Type Name Description System.String baseAddress IHttpHandler httpHandler System.Boolean asyncEnabled Dictionary < System.String , System.String > persistentHeaders Dictionary < System.String , System.String > sessionHeaders System.Int32 timeoutMilliseconds Fields _accountClient Declaration protected AccountClient _accountClient Field Value Type Description AccountClient _achievementClient Declaration protected AchievementClient _achievementClient Field Value Type Description AchievementClient _allianceClient Declaration protected AllianceClient _allianceClient Field Value Type Description AllianceClient _apiVersionClient Declaration protected APIVersionClient _apiVersionClient Field Value Type Description APIVersionClient _asyncRequestController Declaration protected readonly IAsyncRequestController _asyncRequestController Field Value Type Description IAsyncRequestController _baseAddress Declaration protected readonly string _baseAddress Field Value Type Description System.String _evaluationNotifications Declaration protected readonly EvaluationNotifications _evaluationNotifications Field Value Type Description EvaluationNotifications _gameClient Declaration protected GameClient _gameClient Field Value Type Description GameClient _gameDataClient Declaration protected GameDataClient _gameDataClient Field Value Type Description GameDataClient _groupClient Declaration protected GroupClient _groupClient Field Value Type Description GroupClient _groupMemberClient Declaration protected GroupMemberClient _groupMemberClient Field Value Type Description GroupMemberClient _httpHandler Declaration protected readonly IHttpHandler _httpHandler Field Value Type Description IHttpHandler _leaderboardClient Declaration protected LeaderboardClient _leaderboardClient Field Value Type Description LeaderboardClient _matchClient Declaration protected MatchClient _matchClient Field Value Type Description MatchClient _persistentHeaders Declaration protected readonly Dictionary<string, string> _persistentHeaders Field Value Type Description Dictionary < System.String , System.String > _resourceClient Declaration protected ResourceClient _resourceClient Field Value Type Description ResourceClient _sessionClient Declaration protected SessionClient _sessionClient Field Value Type Description SessionClient _sessionHeaders Declaration protected readonly Dictionary<string, string> _sessionHeaders Field Value Type Description Dictionary < System.String , System.String > _skillClient Declaration protected SkillClient _skillClient Field Value Type Description SkillClient _userClient Declaration protected UserClient _userClient Field Value Type Description UserClient _userFriendClient Declaration protected UserFriendClient _userFriendClient Field Value Type Description UserFriendClient Properties Account Declaration public AccountClient Account { get; } Property Value Type Description AccountClient Achievement Declaration public AchievementClient Achievement { get; } Property Value Type Description AchievementClient AllianceClient Declaration public AllianceClient AllianceClient { get; } Property Value Type Description AllianceClient APIVersion Declaration public APIVersionClient APIVersion { get; } Property Value Type Description APIVersionClient Game Declaration public GameClient Game { get; } Property Value Type Description GameClient GameData Declaration public GameDataClient GameData { get; } Property Value Type Description GameDataClient Group Declaration public GroupClient Group { get; } Property Value Type Description GroupClient GroupMember Declaration public GroupMemberClient GroupMember { get; } Property Value Type Description GroupMemberClient Leaderboard Declaration public LeaderboardClient Leaderboard { get; } Property Value Type Description LeaderboardClient Match Declaration public MatchClient Match { get; } Property Value Type Description MatchClient Resource Declaration public ResourceClient Resource { get; } Property Value Type Description ResourceClient Session Declaration public SessionClient Session { get; } Property Value Type Description SessionClient Skill Declaration public SkillClient Skill { get; } Property Value Type Description SkillClient User Declaration public UserClient User { get; } Property Value Type Description UserClient UserFriend Declaration public UserFriendClient UserFriend { get; } Property Value Type Description UserFriendClient Methods TryExecuteResponse() Declaration public bool TryExecuteResponse() Returns Type Description System.Boolean"
  },
  "api/PlayGen.SUGAR.Common.Authorization.AuthorizationEntity.html": {
    "href": "api/PlayGen.SUGAR.Common.Authorization.AuthorizationEntity.html",
    "title": "Enum AuthorizationEntity | SUGAR",
    "keywords": "Enum AuthorizationEntity Namespace : PlayGen.SUGAR.Common.Authorization Assembly : PlayGen.SUGAR.Common.dll Syntax public enum AuthorizationEntity : int Fields Name Description Account AccountSource Achievement ActorClaim ActorData ActorRole Alliance AllianceRequest Game GameData Group GroupMember GroupMemberRequest Leaderboard Match Resource Role RoleClaim User UserFriend UserFriendRequest"
  },
  "api/PlayGen.SUGAR.Common.CriteriaQueryType.html": {
    "href": "api/PlayGen.SUGAR.Common.CriteriaQueryType.html",
    "title": "Enum CriteriaQueryType | SUGAR",
    "keywords": "Enum CriteriaQueryType Enum for selecting what values will be used to query if criteria is met. Namespace : PlayGen.SUGAR.Common Assembly : PlayGen.SUGAR.Common.dll Syntax public enum CriteriaQueryType : int Fields Name Description Any Check if any singular piece of EvaluationData matches the criteria. Count Check if the count of all EvaluationData matches the criteria. Latest Check if the most recent piece of EvaluationData matches the criteria. Sum Check if a sum of all EvaluationData for that key matches the crteria (Long and Float only)."
  },
  "api/PlayGen.SUGAR.Common.Extensions.EvaluationExtensions.html": {
    "href": "api/PlayGen.SUGAR.Common.Extensions.EvaluationExtensions.html",
    "title": "Class EvaluationExtensions | SUGAR",
    "keywords": "Class EvaluationExtensions Inheritance System.Object EvaluationExtensions Namespace : PlayGen.SUGAR.Common.Extensions Assembly : PlayGen.SUGAR.Common.dll Syntax public static class EvaluationExtensions : object Methods ToEvaluationDataCategory(EvaluationType) Declaration public static EvaluationDataCategory ToEvaluationDataCategory(this EvaluationType evaluationType) Parameters Type Name Description EvaluationType evaluationType Returns Type Description EvaluationDataCategory"
  },
  "api/PlayGen.SUGAR.Common.Extensions.html": {
    "href": "api/PlayGen.SUGAR.Common.Extensions.html",
    "title": "Namespace PlayGen.SUGAR.Common.Extensions | SUGAR",
    "keywords": "Namespace PlayGen.SUGAR.Common.Extensions Classes DateTimeExtensions EvaluationExtensions"
  },
  "api/PlayGen.SUGAR.Contracts.ClaimResponse.html": {
    "href": "api/PlayGen.SUGAR.Contracts.ClaimResponse.html",
    "title": "Class ClaimResponse | SUGAR",
    "keywords": "Class ClaimResponse Encapsulates role details. Inheritance System.Object ClaimResponse Namespace : PlayGen.SUGAR.Contracts Assembly : PlayGen.SUGAR.Contracts.dll Syntax public class ClaimResponse : object Examples JSON { Id : 1, Token : \"CreateGame\", Description : \"Allows for the creation of new games\", ClaimScope : \"Game\" } Properties ClaimScope The ClaimScope of this claim. Declaration public ClaimScope ClaimScope { get; set; } Property Value Type Description ClaimScope Description A description of the claim. Declaration public string Description { get; set; } Property Value Type Description System.String Id The ID of the claim. Declaration public int Id { get; set; } Property Value Type Description System.Int32 Token The display name for the claim. Declaration public string Token { get; set; } Property Value Type Description System.String"
  },
  "api/PlayGen.SUGAR.Contracts.EvaluationCreateRequest.html": {
    "href": "api/PlayGen.SUGAR.Contracts.EvaluationCreateRequest.html",
    "title": "Class EvaluationCreateRequest | SUGAR",
    "keywords": "Class EvaluationCreateRequest Encapsulates achievement/skill details. Inheritance System.Object EvaluationCreateRequest Namespace : PlayGen.SUGAR.Contracts Assembly : PlayGen.SUGAR.Contracts.dll Syntax public class EvaluationCreateRequest : object Examples JSON { Token : \"AN_ACHIEVEMENT_TOKEN\", GameId : 1, Name : \"Achievement Unlocked\", Description : \"Fulfil the criteria to get the reward\", ActorType : \"User\", EvaluationCriteria : [{ Key : \"Criteria Key\", DataType : \"Long\", CriteriaQueryType : \"Any\", ComparisonType : \"Equals\", Scope : \"Actor\", Value : \"5\" }], Reward : [{ Key : \"Reward Key\", DataType : \"Float\", Value : \"10.5\" }] } Properties ActorType The type of actor which this achievement/skill is intended to be completed by. Declaration public ActorType? ActorType { get; set; } Property Value Type Description System.Nullable < ActorType > Description The description of the achievement/skill. Declaration public string Description { get; set; } Property Value Type Description System.String EvaluationCriterias A list of criteria which will be checked in order to see if an actor has completed the achievement/skill. Must contain at least one criteria. Declaration public List<EvaluationCriteriaCreateRequest> EvaluationCriterias { get; set; } Property Value Type Description List < EvaluationCriteriaCreateRequest > GameId The ID of the Game which this achievement/skill should belong to. Declaration public int? GameId { get; set; } Property Value Type Description System.Nullable < System.Int32 > Name The display name for the achievement/skill. Declaration public string Name { get; set; } Property Value Type Description System.String Rewards A list of rewards that will be provided to the actor upon completion of the achievement/skill criteria. An achievement does not need to contain a reward. Declaration public List<RewardCreateRequest> Rewards { get; set; } Property Value Type Description List < RewardCreateRequest > Token A unique identifier used in development to reference the achievement/skill. Declaration public string Token { get; set; } Property Value Type Description System.String Extension Methods AchievementExtensions.ToAchievementModel(EvaluationCreateRequest) SkillExtensions.ToSkillModel(EvaluationCreateRequest)"
  },
  "api/PlayGen.SUGAR.Contracts.LeaderboardStandingsRequest.html": {
    "href": "api/PlayGen.SUGAR.Contracts.LeaderboardStandingsRequest.html",
    "title": "Class LeaderboardStandingsRequest | SUGAR",
    "keywords": "Class LeaderboardStandingsRequest Encapsulates leaderboard current standings request. Inheritance System.Object LeaderboardStandingsRequest Namespace : PlayGen.SUGAR.Contracts Assembly : PlayGen.SUGAR.Contracts.dll Syntax public class LeaderboardStandingsRequest : object Examples JSON { LeaderboardToken : \"AN_ACHIEVEMENT_TOKEN\", GameId : 1, ActorId : 1, LeaderboardFilterType : \"Near\", Limit : 10, Offset : 0, DateStart : \"2016-01-01 00:00:00\", DateEnd : \"2016-12-31 23:59:59\" } Properties ActorId The Id of an Actor. Required for getting standings for Near, Friends (user only) and Group Members (group only) Declaration public int? ActorId { get; set; } Property Value Type Description System.Nullable < System.Int32 > DateEnd The latest point which data should be collected from. Can be left null to gather all data up to the present time. Declaration public DateTime? DateEnd { get; set; } Property Value Type Description System.Nullable < DateTime > DateStart The earliest point which data should be collected from. Can be left null to set no earliest point. Declaration public DateTime? DateStart { get; set; } Property Value Type Description System.Nullable < DateTime > GameId The Id of the Game the leaderboard. Declaration public int? GameId { get; set; } Property Value Type Description System.Nullable < System.Int32 > LeaderboardFilterType The filter for what standings will be returned. Declaration public LeaderboardFilterType? LeaderboardFilterType { get; set; } Property Value Type Description System.Nullable < LeaderboardFilterType > LeaderboardToken The Token of the Leaderboard which the standings are being gathered for. Declaration public string LeaderboardToken { get; set; } Property Value Type Description System.String MultiplePerActor Whether a user can rank multiple times if they have different values. Only applicable for Highest, Lowest, Earliest, Latest. Declaration public bool? MultiplePerActor { get; set; } Property Value Type Description System.Nullable < System.Boolean > PageLimit The maximum number of results which will be returned. Leave this as null to return all results as each time the next page is queried the database is queried Declaration public int? PageLimit { get; set; } Property Value Type Description System.Nullable < System.Int32 > PageOffset The set of results which will be returned based on the limit. 0 returns the first set of results for Top, Friends and Group Member and the nearest range for Near. Declaration public int? PageOffset { get; set; } Property Value Type Description System.Nullable < System.Int32 > Extension Methods LeaderboardExtensions.ToCore(LeaderboardStandingsRequest)"
  },
  "api/PlayGen.SUGAR.Server.WebAPI.Extensions.GameDataExtensions.html": {
    "href": "api/PlayGen.SUGAR.Server.WebAPI.Extensions.GameDataExtensions.html",
    "title": "Class GameDataExtensions | SUGAR",
    "keywords": "Class GameDataExtensions Inheritance System.Object GameDataExtensions Namespace : PlayGen.SUGAR.Server.WebAPI.Extensions Assembly : PlayGen.SUGAR.Server.WebAPI.dll Syntax public static class GameDataExtensions : object Methods ToGameDataModel(EvaluationDataRequest) Declaration public static EvaluationData ToGameDataModel(this EvaluationDataRequest contract) Parameters Type Name Description EvaluationDataRequest contract Returns Type Description EvaluationData"
  },
  "api/PlayGen.SUGAR.Server.WebAPI.Extensions.GameExtensions.html": {
    "href": "api/PlayGen.SUGAR.Server.WebAPI.Extensions.GameExtensions.html",
    "title": "Class GameExtensions | SUGAR",
    "keywords": "Class GameExtensions Inheritance System.Object GameExtensions Namespace : PlayGen.SUGAR.Server.WebAPI.Extensions Assembly : PlayGen.SUGAR.Server.WebAPI.dll Syntax public static class GameExtensions : object Methods ToContract(Game) Declaration public static GameResponse ToContract(this Game gameModel) Parameters Type Name Description Game gameModel Returns Type Description GameResponse ToContractList(IEnumerable<Game>) Declaration public static IEnumerable<GameResponse> ToContractList(this IEnumerable<Game> gameModels) Parameters Type Name Description IEnumerable < Game > gameModels Returns Type Description IEnumerable < GameResponse > ToModel(GameRequest) Declaration public static Game ToModel(this GameRequest gameContract) Parameters Type Name Description GameRequest gameContract Returns Type Description Game"
  },
  "api/PlayGen.SUGAR.Client.AchievementClient.html": {
    "href": "api/PlayGen.SUGAR.Client.AchievementClient.html",
    "title": "Class AchievementClient | SUGAR",
    "keywords": "Class AchievementClient Controller that facilitates Achievement specific operations. Inheritance System.Object ClientBase AchievementClient Inherited Members ClientBase.AsyncRequestController ClientBase.EvaluationNotifications ClientBase.SerializerSettings ClientBase.EnableEvaluationNotifications(Boolean) ClientBase.ClearSessionData() ClientBase.AreUriParamsValid(Object[]) ClientBase.GetUriBuilder(String, Object[]) ClientBase.Post<TRequest, TResponse>(String, TRequest, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Post<TRequest>(String, TRequest, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Post<TResponse>(String, Object, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Put<TRequest, TResponse>(String, TRequest, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Put<TRequest>(String, TRequest, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.PostPut<TResponse>(String, String, Dictionary<String, String>, Object, IEnumerable<HttpStatusCode>) ClientBase.PostPut(String, String, Dictionary<String, String>, Object, IEnumerable<HttpStatusCode>) ClientBase.Get<TResponse>(String, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Get(String, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Delete<TResponse>(String, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Delete(String, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.GetDelete<TResponse>(String, String, Dictionary<String, String>, IEnumerable<HttpStatusCode>) ClientBase.GetDelete(String, String, Dictionary<String, String>, IEnumerable<HttpStatusCode>) Namespace : PlayGen.SUGAR.Client Assembly : PlayGen.SUGAR.Client.dll Syntax public class AchievementClient : ClientBase Constructors AchievementClient(String, IHttpHandler, Dictionary<String, String>, Dictionary<String, String>, IAsyncRequestController, EvaluationNotifications) Declaration public AchievementClient(string baseAddress, IHttpHandler httpHandler, Dictionary<string, string> constantHeaders, Dictionary<string, string> sessionHeaders, IAsyncRequestController asyncRequestController, EvaluationNotifications evaluationNotifications) Parameters Type Name Description System.String baseAddress IHttpHandler httpHandler Dictionary < System.String , System.String > constantHeaders Dictionary < System.String , System.String > sessionHeaders IAsyncRequestController asyncRequestController EvaluationNotifications evaluationNotifications Methods EnableNotifications(Boolean) Sets flag to return pending achievement notifications from the server as they become available. Declaration public void EnableNotifications(bool enable) Parameters Type Name Description System.Boolean enable Whether to enable or disable notifications. GetAchievementProgress(String, Int32, Int32) Find the current progress for an Achievement for . Declaration public EvaluationProgressResponse GetAchievementProgress(string token, int gameId, int actorId) Parameters Type Name Description System.String token Token of Achievement System.Int32 gameId ID of the Game the Achievement is for System.Int32 actorId ID of actor/User Returns Type Description EvaluationProgressResponse Returns EvaluationProgressResponse that hold current progress toward achievement. GetAchievementProgressAsync(String, Int32, Int32, Action<EvaluationProgressResponse>, Action<Exception>) Declaration public void GetAchievementProgressAsync(string token, int gameId, int actorId, Action<EvaluationProgressResponse> onSuccess, Action<Exception> onError) Parameters Type Name Description System.String token System.Int32 gameId System.Int32 actorId Action < EvaluationProgressResponse > onSuccess Action < Exception > onError GetGameProgress(Int32, Int32) Find the current progress for all achievements for a for . Declaration public IEnumerable<EvaluationProgressResponse> GetGameProgress(int gameId, int actorId) Parameters Type Name Description System.Int32 gameId ID of Game System.Int32 actorId ID of Group/User Returns Type Description IEnumerable < EvaluationProgressResponse > Returns multiple EvaluationProgressResponse that hold current progress toward achievement. GetGameProgressAsync(Int32, Int32, Action<IEnumerable<EvaluationProgressResponse>>, Action<Exception>) Declaration public void GetGameProgressAsync(int gameId, int actorId, Action<IEnumerable<EvaluationProgressResponse>> onSuccess, Action<Exception> onError) Parameters Type Name Description System.Int32 gameId System.Int32 actorId Action < IEnumerable < EvaluationProgressResponse >> onSuccess Action < Exception > onError GetGlobalAchievementProgress(String, Int32) Find the current progress for an Achievement for . Declaration public EvaluationProgressResponse GetGlobalAchievementProgress(string token, int actorId) Parameters Type Name Description System.String token Token of Achievement System.Int32 actorId ID of actor/User Returns Type Description EvaluationProgressResponse Returns EvaluationProgressResponse that hold current progress toward achievement. GetGlobalAchievementProgressAsync(String, Int32, Action<EvaluationProgressResponse>, Action<Exception>) Declaration public void GetGlobalAchievementProgressAsync(string token, int actorId, Action<EvaluationProgressResponse> onSuccess, Action<Exception> onError) Parameters Type Name Description System.String token System.Int32 actorId Action < EvaluationProgressResponse > onSuccess Action < Exception > onError GetGlobalProgress(Int32) Find the current progress for all global achievements for . Declaration public IEnumerable<EvaluationProgressResponse> GetGlobalProgress(int actorId) Parameters Type Name Description System.Int32 actorId ID of Group/User Returns Type Description IEnumerable < EvaluationProgressResponse > Returns multiple EvaluationProgressResponse that hold Achievement progress details GetGlobalProgressAsync(Int32, Action<IEnumerable<EvaluationProgressResponse>>, Action<Exception>) Declaration public void GetGlobalProgressAsync(int actorId, Action<IEnumerable<EvaluationProgressResponse>> onSuccess, Action<Exception> onError) Parameters Type Name Description System.Int32 actorId Action < IEnumerable < EvaluationProgressResponse >> onSuccess Action < Exception > onError TryGetPendingNotification(out EvaluationNotification) Gets pending achievement progress notifications. Declaration public bool TryGetPendingNotification(out EvaluationNotification notification) Parameters Type Name Description EvaluationNotification notification Returns Type Description System.Boolean Returns a boolean value indicating whether there was a notification to retrieve or not."
  },
  "api/PlayGen.SUGAR.Client.Development.DevelopmentClient.html": {
    "href": "api/PlayGen.SUGAR.Client.Development.DevelopmentClient.html",
    "title": "Class DevelopmentClient | SUGAR",
    "keywords": "Class DevelopmentClient Controller that facilitates developer specific operations. Inheritance System.Object ClientBase DevelopmentClient Inherited Members ClientBase.AsyncRequestController ClientBase.EvaluationNotifications ClientBase.SerializerSettings ClientBase.EnableEvaluationNotifications(Boolean) ClientBase.ClearSessionData() ClientBase.AreUriParamsValid(Object[]) ClientBase.GetUriBuilder(String, Object[]) ClientBase.Post<TRequest, TResponse>(String, TRequest, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Post<TRequest>(String, TRequest, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Post<TResponse>(String, Object, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Put<TRequest, TResponse>(String, TRequest, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Put<TRequest>(String, TRequest, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.PostPut<TResponse>(String, String, Dictionary<String, String>, Object, IEnumerable<HttpStatusCode>) ClientBase.PostPut(String, String, Dictionary<String, String>, Object, IEnumerable<HttpStatusCode>) ClientBase.Get<TResponse>(String, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Get(String, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Delete<TResponse>(String, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Delete(String, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.GetDelete<TResponse>(String, String, Dictionary<String, String>, IEnumerable<HttpStatusCode>) ClientBase.GetDelete(String, String, Dictionary<String, String>, IEnumerable<HttpStatusCode>) Namespace : PlayGen.SUGAR.Client.Development Assembly : PlayGen.SUGAR.Client.Development.dll Syntax public class DevelopmentClient : ClientBase Constructors DevelopmentClient(String, IHttpHandler, Dictionary<String, String>, Dictionary<String, String>, IAsyncRequestController, EvaluationNotifications) Declaration public DevelopmentClient(string baseAddress, IHttpHandler httpHandler, Dictionary<string, string> constantHeaders, Dictionary<string, string> sessionHeaders, IAsyncRequestController asyncRequestController, EvaluationNotifications evaluationNotifications) Parameters Type Name Description System.String baseAddress IHttpHandler httpHandler Dictionary < System.String , System.String > constantHeaders Dictionary < System.String , System.String > sessionHeaders IAsyncRequestController asyncRequestController EvaluationNotifications evaluationNotifications Methods CreateAchievement(EvaluationCreateRequest) Create a new Achievement. Declaration public EvaluationResponse CreateAchievement(EvaluationCreateRequest achievement) Parameters Type Name Description EvaluationCreateRequest achievement Returns Type Description EvaluationResponse A GameResponse containing the new achievement details. CreateAchievementAsync(EvaluationCreateRequest, Action<EvaluationResponse>, Action<Exception>) Declaration public void CreateAchievementAsync(EvaluationCreateRequest achievement, Action<EvaluationResponse> onSuccess, Action<Exception> onError) Parameters Type Name Description EvaluationCreateRequest achievement Action < EvaluationResponse > onSuccess Action < Exception > onError CreateGame(GameRequest) Create a new Game. Declaration public GameResponse CreateGame(GameRequest game) Parameters Type Name Description GameRequest game GameRequest object that holds the details of the new game request. Returns Type Description GameResponse A GameResponse containing the new game details. CreateGameAsync(GameRequest, Action<GameResponse>, Action<Exception>) Declaration public void CreateGameAsync(GameRequest game, Action<GameResponse> onSuccess, Action<Exception> onError) Parameters Type Name Description GameRequest game Action < GameResponse > onSuccess Action < Exception > onError CreateLeaderboard(LeaderboardRequest) Create a new Leaderboard. Declaration public LeaderboardResponse CreateLeaderboard(LeaderboardRequest leaderboard) Parameters Type Name Description LeaderboardRequest leaderboard Returns Type Description LeaderboardResponse A GameResponse containing the new leaderboard details. CreateLeaderboardAsync(LeaderboardRequest, Action<LeaderboardResponse>, Action<Exception>) Declaration public void CreateLeaderboardAsync(LeaderboardRequest leaderboard, Action<LeaderboardResponse> onSuccess, Action<Exception> onError) Parameters Type Name Description LeaderboardRequest leaderboard Action < LeaderboardResponse > onSuccess Action < Exception > onError CreateSkill(EvaluationCreateRequest) Create a new Skill. Declaration public EvaluationResponse CreateSkill(EvaluationCreateRequest skill) Parameters Type Name Description EvaluationCreateRequest skill Returns Type Description EvaluationResponse A GameResponse containing the new skill details. CreateSkillAsync(EvaluationCreateRequest, Action<EvaluationResponse>, Action<Exception>) Declaration public void CreateSkillAsync(EvaluationCreateRequest skill, Action<EvaluationResponse> onSuccess, Action<Exception> onError) Parameters Type Name Description EvaluationCreateRequest skill Action < EvaluationResponse > onSuccess Action < Exception > onError"
  },
  "api/PlayGen.SUGAR.Client.Exceptions.ClientException.html": {
    "href": "api/PlayGen.SUGAR.Client.Exceptions.ClientException.html",
    "title": "Class ClientException | SUGAR",
    "keywords": "Class ClientException Inheritance System.Object ClientException Namespace : PlayGen.SUGAR.Client.Exceptions Assembly : PlayGen.SUGAR.Client.dll Syntax public class ClientException : SUGARException Constructors ClientException() Declaration public ClientException() ClientException(String) Declaration public ClientException(string message) Parameters Type Name Description System.String message ClientException(String, Exception) Declaration public ClientException(string message, Exception innerException) Parameters Type Name Description System.String message Exception innerException"
  },
  "api/PlayGen.SUGAR.Client.GroupMemberClient.html": {
    "href": "api/PlayGen.SUGAR.Client.GroupMemberClient.html",
    "title": "Class GroupMemberClient | SUGAR",
    "keywords": "Class GroupMemberClient Controller that facilitates User to Group relationship specific operations. Inheritance System.Object ClientBase GroupMemberClient Inherited Members ClientBase.AsyncRequestController ClientBase.EvaluationNotifications ClientBase.SerializerSettings ClientBase.EnableEvaluationNotifications(Boolean) ClientBase.ClearSessionData() ClientBase.AreUriParamsValid(Object[]) ClientBase.GetUriBuilder(String, Object[]) ClientBase.Post<TRequest, TResponse>(String, TRequest, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Post<TRequest>(String, TRequest, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Post<TResponse>(String, Object, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Put<TRequest, TResponse>(String, TRequest, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Put<TRequest>(String, TRequest, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.PostPut<TResponse>(String, String, Dictionary<String, String>, Object, IEnumerable<HttpStatusCode>) ClientBase.PostPut(String, String, Dictionary<String, String>, Object, IEnumerable<HttpStatusCode>) ClientBase.Get<TResponse>(String, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Get(String, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Delete<TResponse>(String, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Delete(String, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.GetDelete<TResponse>(String, String, Dictionary<String, String>, IEnumerable<HttpStatusCode>) ClientBase.GetDelete(String, String, Dictionary<String, String>, IEnumerable<HttpStatusCode>) Namespace : PlayGen.SUGAR.Client Assembly : PlayGen.SUGAR.Client.dll Syntax public class GroupMemberClient : ClientBase Constructors GroupMemberClient(String, IHttpHandler, Dictionary<String, String>, Dictionary<String, String>, IAsyncRequestController, EvaluationNotifications) Declaration public GroupMemberClient(string baseAddress, IHttpHandler httpHandler, Dictionary<string, string> constantHeaders, Dictionary<string, string> sessionHeaders, IAsyncRequestController asyncRequestController, EvaluationNotifications evaluationNotifications) Parameters Type Name Description System.String baseAddress IHttpHandler httpHandler Dictionary < System.String , System.String > constantHeaders Dictionary < System.String , System.String > sessionHeaders IAsyncRequestController asyncRequestController EvaluationNotifications evaluationNotifications Methods CreateMemberRequest(RelationshipRequest) Create a new relationship request between the User and Group. Requires a relationship between the User and Group to not already exist. Declaration public RelationshipResponse CreateMemberRequest(RelationshipRequest relationship) Parameters Type Name Description RelationshipRequest relationship RelationshipRequest object that holds the details of the new relationship request. Returns Type Description RelationshipResponse A RelationshipResponse containing the new Relationship details. CreateMemberRequestAsync(RelationshipRequest, Action<RelationshipResponse>, Action<Exception>) Declaration public void CreateMemberRequestAsync(RelationshipRequest relationship, Action<RelationshipResponse> onSuccess, Action<Exception> onError) Parameters Type Name Description RelationshipRequest relationship Action < RelationshipResponse > onSuccess Action < Exception > onError GetMemberCount(Int32) Get a count of users that have a relationship with this . Declaration public int GetMemberCount(int groupId) Parameters Type Name Description System.Int32 groupId ID of the group. Returns Type Description System.Int32 A count of members in the group that matches the search criteria. GetMemberCountAsync(Int32, Action<Int32>, Action<Exception>) Declaration public void GetMemberCountAsync(int groupId, Action<int> onSuccess, Action<Exception> onError) Parameters Type Name Description System.Int32 groupId Action < System.Int32 > onSuccess Action < Exception > onError GetMemberRequests(Int32) Get a list of all Users that have relationship requests for this . Declaration public IEnumerable<ActorResponse> GetMemberRequests(int groupId) Parameters Type Name Description System.Int32 groupId ID of the group. Returns Type Description IEnumerable < ActorResponse > A list of ActorResponse which match the search criteria. GetMemberRequestsAsync(Int32, Action<IEnumerable<ActorResponse>>, Action<Exception>) Declaration public void GetMemberRequestsAsync(int userId, Action<IEnumerable<ActorResponse>> onSuccess, Action<Exception> onError) Parameters Type Name Description System.Int32 userId Action < IEnumerable < ActorResponse >> onSuccess Action < Exception > onError GetMembers(Int32) Get a list of all Users that have relationships with this . Declaration public IEnumerable<ActorResponse> GetMembers(int groupId) Parameters Type Name Description System.Int32 groupId ID of the group. Returns Type Description IEnumerable < ActorResponse > A list of ActorResponse which match the search criteria. GetMembersAsync(Int32, Action<IEnumerable<ActorResponse>>, Action<Exception>) Declaration public void GetMembersAsync(int groupId, Action<IEnumerable<ActorResponse>> onSuccess, Action<Exception> onError) Parameters Type Name Description System.Int32 groupId Action < IEnumerable < ActorResponse >> onSuccess Action < Exception > onError GetSentRequests(Int32) Get a list of all Groups that have been sent relationship requests for this . Declaration public IEnumerable<ActorResponse> GetSentRequests(int userId) Parameters Type Name Description System.Int32 userId ID of the user. Returns Type Description IEnumerable < ActorResponse > A list of ActorResponse which match the search criteria. GetSentRequestsAsync(Int32, Action<IEnumerable<ActorResponse>>, Action<Exception>) Declaration public void GetSentRequestsAsync(int userId, Action<IEnumerable<ActorResponse>> onSuccess, Action<Exception> onError) Parameters Type Name Description System.Int32 userId Action < IEnumerable < ActorResponse >> onSuccess Action < Exception > onError GetUserGroups(Int32) Get a list of all Groups that have relationships with this . Declaration public IEnumerable<ActorResponse> GetUserGroups(int userId) Parameters Type Name Description System.Int32 userId ID of the User. Returns Type Description IEnumerable < ActorResponse > A list of ActorResponse which match the search criteria. GetUserGroupsAsync(Int32, Action<IEnumerable<ActorResponse>>, Action<Exception>) Declaration public void GetUserGroupsAsync(int userId, Action<IEnumerable<ActorResponse>> onSuccess, Action<Exception> onError) Parameters Type Name Description System.Int32 userId Action < IEnumerable < ActorResponse >> onSuccess Action < Exception > onError UpdateMember(RelationshipStatusUpdate) Update an existing relationship between and . Requires the relationship to already exist between the User and Group. Declaration public void UpdateMember(RelationshipStatusUpdate relationship) Parameters Type Name Description RelationshipStatusUpdate relationship RelationshipStatusUpdate object that holds the details of the relationship. UpdateMemberAsync(RelationshipStatusUpdate, Action, Action<Exception>) Declaration public void UpdateMemberAsync(RelationshipStatusUpdate relationship, Action onSuccess, Action<Exception> onError) Parameters Type Name Description RelationshipStatusUpdate relationship Action onSuccess Action < Exception > onError UpdateMemberRequest(RelationshipStatusUpdate) Update an existing relationship request between and . Requires the relationship request to already exist between the User and Group. Declaration public void UpdateMemberRequest(RelationshipStatusUpdate relationship) Parameters Type Name Description RelationshipStatusUpdate relationship RelationshipStatusUpdate object that holds the details of the relationship. UpdateMemberRequestAsync(RelationshipStatusUpdate, Action, Action<Exception>) Declaration public void UpdateMemberRequestAsync(RelationshipStatusUpdate relationship, Action onSuccess, Action<Exception> onError) Parameters Type Name Description RelationshipStatusUpdate relationship Action onSuccess Action < Exception > onError"
  },
  "api/PlayGen.SUGAR.Client.ResourceClient.html": {
    "href": "api/PlayGen.SUGAR.Client.ResourceClient.html",
    "title": "Class ResourceClient | SUGAR",
    "keywords": "Class ResourceClient Controller that facilitates Resource specific operations. Inheritance System.Object ClientBase ResourceClient Inherited Members ClientBase.AsyncRequestController ClientBase.EvaluationNotifications ClientBase.SerializerSettings ClientBase.EnableEvaluationNotifications(Boolean) ClientBase.ClearSessionData() ClientBase.AreUriParamsValid(Object[]) ClientBase.GetUriBuilder(String, Object[]) ClientBase.Post<TRequest, TResponse>(String, TRequest, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Post<TRequest>(String, TRequest, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Post<TResponse>(String, Object, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Put<TRequest, TResponse>(String, TRequest, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Put<TRequest>(String, TRequest, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.PostPut<TResponse>(String, String, Dictionary<String, String>, Object, IEnumerable<HttpStatusCode>) ClientBase.PostPut(String, String, Dictionary<String, String>, Object, IEnumerable<HttpStatusCode>) ClientBase.Get<TResponse>(String, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Get(String, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Delete<TResponse>(String, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Delete(String, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.GetDelete<TResponse>(String, String, Dictionary<String, String>, IEnumerable<HttpStatusCode>) ClientBase.GetDelete(String, String, Dictionary<String, String>, IEnumerable<HttpStatusCode>) Namespace : PlayGen.SUGAR.Client Assembly : PlayGen.SUGAR.Client.dll Syntax public class ResourceClient : ClientBase Constructors ResourceClient(String, IHttpHandler, Dictionary<String, String>, Dictionary<String, String>, IAsyncRequestController, EvaluationNotifications) Declaration public ResourceClient(string baseAddress, IHttpHandler httpHandler, Dictionary<string, string> constantHeaders, Dictionary<string, string> sessionHeaders, IAsyncRequestController asyncRequestController, EvaluationNotifications evaluationNotifications) Parameters Type Name Description System.String baseAddress IHttpHandler httpHandler Dictionary < System.String , System.String > constantHeaders Dictionary < System.String , System.String > sessionHeaders IAsyncRequestController asyncRequestController EvaluationNotifications evaluationNotifications Methods AddOrUpdate(ResourceAddRequest) Create or Updates a Resource record. Declaration public ResourceResponse AddOrUpdate(ResourceAddRequest data) Parameters Type Name Description ResourceAddRequest data ResourceAddRequest object that holds the details of the new Resource. Returns Type Description ResourceResponse A ResourceResponse containing the new Resource details. AddOrUpdateAsync(ResourceAddRequest, Action<ResourceResponse>, Action<Exception>) Declaration public void AddOrUpdateAsync(ResourceAddRequest data, Action<ResourceResponse> onSuccess, Action<Exception> onError) Parameters Type Name Description ResourceAddRequest data Action < ResourceResponse > onSuccess Action < Exception > onError Get(Int32, Int32, String[]) Find a list of all Resources that match the , and provided. Declaration public IEnumerable<ResourceResponse> Get(int gameId, int actorId, string[] keys) Parameters Type Name Description System.Int32 gameId ID of a Game. System.Int32 actorId ID of a User/Group. System.String [] keys Array of Key names. Returns Type Description IEnumerable < ResourceResponse > A list of ResourceResponse which match the search criteria. GetAsync(Int32, Int32, String[], Action<IEnumerable<ResourceResponse>>, Action<Exception>) Declaration public void GetAsync(int gameId, int actorId, string[] keys, Action<IEnumerable<ResourceResponse>> onSuccess, Action<Exception> onError) Parameters Type Name Description System.Int32 gameId System.Int32 actorId System.String [] keys Action < IEnumerable < ResourceResponse >> onSuccess Action < Exception > onError Transfer(ResourceTransferRequest) Transfers a quantity of a specific resource. Declaration public ResourceTransferResponse Transfer(ResourceTransferRequest data) Parameters Type Name Description ResourceTransferRequest data Returns Type Description ResourceTransferResponse A ResourceTransferResponse containing the modified resources. TransferAsync(ResourceTransferRequest, Action<ResourceTransferResponse>, Action<Exception>) Declaration public void TransferAsync(ResourceTransferRequest data, Action<ResourceTransferResponse> onSuccess, Action<Exception> onError) Parameters Type Name Description ResourceTransferRequest data Action < ResourceTransferResponse > onSuccess Action < Exception > onError"
  },
  "api/PlayGen.SUGAR.Common.APIVersion.html": {
    "href": "api/PlayGen.SUGAR.Common.APIVersion.html",
    "title": "Class APIVersion | SUGAR",
    "keywords": "Class APIVersion This class is used to see which version of the API exists in consuming projects to facillitate checking compatibility. Major versions should increment when API Breaking changes are added. Minor version should increment for Fixes and Additions that won't cause existing clients with the same Major version to break. Build version should increment for every build. Inheritance System.Object APIVersion Namespace : PlayGen.SUGAR.Common Assembly : PlayGen.SUGAR.Common.dll Syntax public static class APIVersion : object Fields Build Declaration public const int Build = null Field Value Type Description System.Int32 Key Declaration public const string Key = null Field Value Type Description System.String Major Declaration public const int Major = null Field Value Type Description System.Int32 Minor Declaration public const int Minor = null Field Value Type Description System.Int32 Properties Version Declaration public static string Version { get; } Property Value Type Description System.String Methods IsCompatible(Int32) Declaration public static bool IsCompatible(int checkMajor) Parameters Type Name Description System.Int32 checkMajor Returns Type Description System.Boolean IsCompatible(String) Declaration public static bool IsCompatible(string checkVersion) Parameters Type Name Description System.String checkVersion Returns Type Description System.Boolean"
  },
  "api/PlayGen.SUGAR.Client.UserFriendClient.html": {
    "href": "api/PlayGen.SUGAR.Client.UserFriendClient.html",
    "title": "Class UserFriendClient | SUGAR",
    "keywords": "Class UserFriendClient Controller that facilitates User to User relationship specific operations. Inheritance System.Object ClientBase UserFriendClient Inherited Members ClientBase.AsyncRequestController ClientBase.EvaluationNotifications ClientBase.SerializerSettings ClientBase.EnableEvaluationNotifications(Boolean) ClientBase.ClearSessionData() ClientBase.AreUriParamsValid(Object[]) ClientBase.GetUriBuilder(String, Object[]) ClientBase.Post<TRequest, TResponse>(String, TRequest, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Post<TRequest>(String, TRequest, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Post<TResponse>(String, Object, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Put<TRequest, TResponse>(String, TRequest, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Put<TRequest>(String, TRequest, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.PostPut<TResponse>(String, String, Dictionary<String, String>, Object, IEnumerable<HttpStatusCode>) ClientBase.PostPut(String, String, Dictionary<String, String>, Object, IEnumerable<HttpStatusCode>) ClientBase.Get<TResponse>(String, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Get(String, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Delete<TResponse>(String, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Delete(String, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.GetDelete<TResponse>(String, String, Dictionary<String, String>, IEnumerable<HttpStatusCode>) ClientBase.GetDelete(String, String, Dictionary<String, String>, IEnumerable<HttpStatusCode>) Namespace : PlayGen.SUGAR.Client Assembly : PlayGen.SUGAR.Client.dll Syntax public class UserFriendClient : ClientBase Constructors UserFriendClient(String, IHttpHandler, Dictionary<String, String>, Dictionary<String, String>, IAsyncRequestController, EvaluationNotifications) Declaration public UserFriendClient(string baseAddress, IHttpHandler httpHandler, Dictionary<string, string> constantHeaders, Dictionary<string, string> sessionHeaders, IAsyncRequestController asyncRequestController, EvaluationNotifications evaluationNotifications) Parameters Type Name Description System.String baseAddress IHttpHandler httpHandler Dictionary < System.String , System.String > constantHeaders Dictionary < System.String , System.String > sessionHeaders IAsyncRequestController asyncRequestController EvaluationNotifications evaluationNotifications Methods CreateFriendRequest(RelationshipRequest) Create a new relationship request between two Users. Requires a relationship between the two to not already exist. Declaration public RelationshipResponse CreateFriendRequest(RelationshipRequest relationship) Parameters Type Name Description RelationshipRequest relationship RelationshipRequest object that holds the details of the new relationship request. Returns Type Description RelationshipResponse A RelationshipResponse containing the new Relationship details. CreateFriendRequestAsync(RelationshipRequest, Action<RelationshipResponse>, Action<Exception>) Declaration public void CreateFriendRequestAsync(RelationshipRequest relationship, Action<RelationshipResponse> onSuccess, Action<Exception> onError) Parameters Type Name Description RelationshipRequest relationship Action < RelationshipResponse > onSuccess Action < Exception > onError GetFriendRequests(Int32) Get a list of all Users that have relationship requests for this . Declaration public IEnumerable<ActorResponse> GetFriendRequests(int userId) Parameters Type Name Description System.Int32 userId ID of the group. Returns Type Description IEnumerable < ActorResponse > A list of ActorResponse which match the search criteria. GetFriendRequestsAsync(Int32, Action<IEnumerable<ActorResponse>>, Action<Exception>) Declaration public void GetFriendRequestsAsync(int userId, Action<IEnumerable<ActorResponse>> onSuccess, Action<Exception> onError) Parameters Type Name Description System.Int32 userId Action < IEnumerable < ActorResponse >> onSuccess Action < Exception > onError GetFriends(Int32) Get a list of all Users that have relationships with this . Declaration public IEnumerable<ActorResponse> GetFriends(int userId) Parameters Type Name Description System.Int32 userId ID of the group. Returns Type Description IEnumerable < ActorResponse > A list of ActorResponse which match the search criteria. GetFriendsAsync(Int32, Action<IEnumerable<ActorResponse>>, Action<Exception>) Declaration public void GetFriendsAsync(int userId, Action<IEnumerable<ActorResponse>> onSuccess, Action<Exception> onError) Parameters Type Name Description System.Int32 userId Action < IEnumerable < ActorResponse >> onSuccess Action < Exception > onError GetSentRequests(Int32) Get a list of all Users that have been sent relationship requests for this . Declaration public IEnumerable<ActorResponse> GetSentRequests(int userId) Parameters Type Name Description System.Int32 userId ID of the user. Returns Type Description IEnumerable < ActorResponse > A list of ActorResponse which match the search criteria. GetSentRequestsAsync(Int32, Action<IEnumerable<ActorResponse>>, Action<Exception>) Declaration public void GetSentRequestsAsync(int userId, Action<IEnumerable<ActorResponse>> onSuccess, Action<Exception> onError) Parameters Type Name Description System.Int32 userId Action < IEnumerable < ActorResponse >> onSuccess Action < Exception > onError UpdateFriend(RelationshipStatusUpdate) Update an existing relationship between and . Requires the relationship to already exist between the two Users. Declaration public void UpdateFriend(RelationshipStatusUpdate relationship) Parameters Type Name Description RelationshipStatusUpdate relationship RelationshipStatusUpdate object that holds the details of the relationship. UpdateFriendAsync(RelationshipStatusUpdate, Action, Action<Exception>) Declaration public void UpdateFriendAsync(RelationshipStatusUpdate relationship, Action onSuccess, Action<Exception> onError) Parameters Type Name Description RelationshipStatusUpdate relationship Action onSuccess Action < Exception > onError UpdateFriendRequest(RelationshipStatusUpdate) Update an existing relationship request between and . Requires the relationship request to already exist between the two Users. Declaration public void UpdateFriendRequest(RelationshipStatusUpdate relationship) Parameters Type Name Description RelationshipStatusUpdate relationship RelationshipStatusUpdate object that holds the details of the relationship. UpdateFriendRequestAsync(RelationshipStatusUpdate, Action, Action<Exception>) Declaration public void UpdateFriendRequestAsync(RelationshipStatusUpdate relationship, Action onSuccess, Action<Exception> onError) Parameters Type Name Description RelationshipStatusUpdate relationship Action onSuccess Action < Exception > onError"
  },
  "api/PlayGen.SUGAR.Client.GroupClient.html": {
    "href": "api/PlayGen.SUGAR.Client.GroupClient.html",
    "title": "Class GroupClient | SUGAR",
    "keywords": "Class GroupClient Controller that facilitates Group specific operations. Inheritance System.Object ClientBase GroupClient Inherited Members ClientBase.AsyncRequestController ClientBase.EvaluationNotifications ClientBase.SerializerSettings ClientBase.EnableEvaluationNotifications(Boolean) ClientBase.ClearSessionData() ClientBase.AreUriParamsValid(Object[]) ClientBase.GetUriBuilder(String, Object[]) ClientBase.Post<TRequest, TResponse>(String, TRequest, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Post<TRequest>(String, TRequest, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Post<TResponse>(String, Object, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Put<TRequest, TResponse>(String, TRequest, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Put<TRequest>(String, TRequest, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.PostPut<TResponse>(String, String, Dictionary<String, String>, Object, IEnumerable<HttpStatusCode>) ClientBase.PostPut(String, String, Dictionary<String, String>, Object, IEnumerable<HttpStatusCode>) ClientBase.Get<TResponse>(String, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Get(String, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Delete<TResponse>(String, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Delete(String, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.GetDelete<TResponse>(String, String, Dictionary<String, String>, IEnumerable<HttpStatusCode>) ClientBase.GetDelete(String, String, Dictionary<String, String>, IEnumerable<HttpStatusCode>) Namespace : PlayGen.SUGAR.Client Assembly : PlayGen.SUGAR.Client.dll Syntax public class GroupClient : ClientBase Constructors GroupClient(String, IHttpHandler, Dictionary<String, String>, Dictionary<String, String>, IAsyncRequestController, EvaluationNotifications) Declaration public GroupClient(string baseAddress, IHttpHandler httpHandler, Dictionary<string, string> constantHeaders, Dictionary<string, string> sessionHeaders, IAsyncRequestController asyncRequestController, EvaluationNotifications evaluationNotifications) Parameters Type Name Description System.String baseAddress IHttpHandler httpHandler Dictionary < System.String , System.String > constantHeaders Dictionary < System.String , System.String > sessionHeaders IAsyncRequestController asyncRequestController EvaluationNotifications evaluationNotifications Methods Create(GroupRequest) Create a new Group. Requires the GroupRequest 's Name to be unique for Groups. Declaration public GroupResponse Create(GroupRequest actor) Parameters Type Name Description GroupRequest actor GroupRequest object that holds the details of the new Group. Returns Type Description GroupResponse A GroupResponse containing the new Group details. CreateAsync(GroupRequest, Action<GroupResponse>, Action<Exception>) Declaration public void CreateAsync(GroupRequest actor, Action<GroupResponse> onSuccess, Action<Exception> onError) Parameters Type Name Description GroupRequest actor Action < GroupResponse > onSuccess Action < Exception > onError Delete(Int32) Delete group with the provided. Declaration public void Delete(int id) Parameters Type Name Description System.Int32 id Group ID. DeleteAsync(Int32, Action, Action<Exception>) Declaration public void DeleteAsync(int id, Action onSuccess, Action<Exception> onError) Parameters Type Name Description System.Int32 id Action onSuccess Action < Exception > onError Get() Get a list of all Groups. Declaration public IEnumerable<GroupResponse> Get() Returns Type Description IEnumerable < GroupResponse > A list of GroupResponse that hold Group details. Get(Int32) Get Group that matches provided. Declaration public GroupResponse Get(int id) Parameters Type Name Description System.Int32 id Group id. Returns Type Description GroupResponse GroupResponse which matches search criteria. Get(String) Get a list of Groups that match provided. Declaration public IEnumerable<GroupResponse> Get(string name) Parameters Type Name Description System.String name Group name. Returns Type Description IEnumerable < GroupResponse > A list of GroupResponse which match the search criteria. GetAsync(Action<IEnumerable<GroupResponse>>, Action<Exception>) Declaration public void GetAsync(Action<IEnumerable<GroupResponse>> onSuccess, Action<Exception> onError) Parameters Type Name Description Action < IEnumerable < GroupResponse >> onSuccess Action < Exception > onError GetAsync(Int32, Action<GroupResponse>, Action<Exception>) Declaration public void GetAsync(int id, Action<GroupResponse> onSuccess, Action<Exception> onError) Parameters Type Name Description System.Int32 id Action < GroupResponse > onSuccess Action < Exception > onError GetAsync(String, Action<IEnumerable<GroupResponse>>, Action<Exception>) Declaration public void GetAsync(string name, Action<IEnumerable<GroupResponse>> onSuccess, Action<Exception> onError) Parameters Type Name Description System.String name Action < IEnumerable < GroupResponse >> onSuccess Action < Exception > onError GetControlled() Get a list of all Groups this Actor has control over. Declaration public IEnumerable<GroupResponse> GetControlled() Returns Type Description IEnumerable < GroupResponse > A list of GroupResponse that hold Group details. GetControlledAsync(Action<IEnumerable<GroupResponse>>, Action<Exception>) Declaration public void GetControlledAsync(Action<IEnumerable<GroupResponse>> onSuccess, Action<Exception> onError) Parameters Type Name Description Action < IEnumerable < GroupResponse >> onSuccess Action < Exception > onError Update(Int32, GroupRequest) Update an existing Group. Declaration public void Update(int id, GroupRequest group) Parameters Type Name Description System.Int32 id Id of the existing Group. GroupRequest group GroupRequest object that holds the details of the Group. UpdateAsync(Int32, GroupRequest, Action, Action<Exception>) Declaration public void UpdateAsync(int id, GroupRequest group, Action onSuccess, Action<Exception> onError) Parameters Type Name Description System.Int32 id GroupRequest group Action onSuccess Action < Exception > onError"
  },
  "unity-client/api/PlayGen.SUGAR.Unity.CustomInterface.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.CustomInterface.html",
    "title": "Class CustomInterface | SUGAR",
    "keywords": "Class CustomInterface Inheritance System.Object CustomInterface Namespace : PlayGen.SUGAR.Unity Assembly : PlayGen.SUGAR.Unity.dll Syntax public class CustomInterface : object Fields GameObject Declaration public GameObject GameObject Field Value Type Description GameObject Name Declaration public string Name Field Value Type Description System.String"
  },
  "api/PlayGen.SUGAR.Contracts.ActorResponse.html": {
    "href": "api/PlayGen.SUGAR.Contracts.ActorResponse.html",
    "title": "Class ActorResponse | SUGAR",
    "keywords": "Class ActorResponse Encapsulates user and group details from the server. Inheritance System.Object ActorResponse GroupResponse UserResponse Namespace : PlayGen.SUGAR.Contracts Assembly : PlayGen.SUGAR.Contracts.dll Syntax public class ActorResponse : object Examples JSON { Id : 1, Name : \"Actor Name\" Description: \"Description of Actor\" } Properties Description The description/biography of the user/group. Declaration public string Description { get; set; } Property Value Type Description System.String Id The unqiue identifier for the user/group. Declaration public int Id { get; set; } Property Value Type Description System.Int32 Name The display name of the user/group. Declaration public string Name { get; set; } Property Value Type Description System.String"
  },
  "api/PlayGen.SUGAR.Contracts.EvaluationCriteriaUpdateRequest.html": {
    "href": "api/PlayGen.SUGAR.Contracts.EvaluationCriteriaUpdateRequest.html",
    "title": "Class EvaluationCriteriaUpdateRequest | SUGAR",
    "keywords": "Class EvaluationCriteriaUpdateRequest Encapsulates requirements for completing an achievement or skill. Inheritance System.Object EvaluationCriteriaUpdateRequest Namespace : PlayGen.SUGAR.Contracts Assembly : PlayGen.SUGAR.Contracts.dll Syntax public class EvaluationCriteriaUpdateRequest : object Examples JSON { Key : \"EvaluationData Key\", DataType : \"String\", CriteriaQueryType : \"Any\", ComparisonType : \"Equals\", Scope : \"Actor\", Value : \"EvaluationData Key Value\" } Properties ComparisonType How the target value and the actual value will be compared. Declaration public ComparisonType? ComparisonType { get; set; } Property Value Type Description System.Nullable < ComparisonType > CriteriaQueryType Which stored EvaluationData will be queried. Declaration public CriteriaQueryType? CriteriaQueryType { get; set; } Property Value Type Description System.Nullable < CriteriaQueryType > EvaluationDataCategory EvaluationDataCategory of the key which is being queried. Declaration public EvaluationDataCategory? EvaluationDataCategory { get; set; } Property Value Type Description System.Nullable < EvaluationDataCategory > EvaluationDataKey The key which will be queried against to check if criteria is met. Declaration public string EvaluationDataKey { get; set; } Property Value Type Description System.String EvaluationDataType EvaluationDataType of the key which is being queried. Declaration public EvaluationDataType? EvaluationDataType { get; set; } Property Value Type Description System.Nullable < EvaluationDataType > Id The unqiue identifier for this type. Declaration public int? Id { get; set; } Property Value Type Description System.Nullable < System.Int32 > Scope Whether the criteria will be checked against the actor or related actors (i.e. group members, user friends). Declaration public CriteriaScope? Scope { get; set; } Property Value Type Description System.Nullable < CriteriaScope > Value The value which will compared against in order to see if the criteria has been met. Declaration public string Value { get; set; } Property Value Type Description System.String Extension Methods EvaluationCriteriaExtensions.ToModel(EvaluationCriteriaUpdateRequest)"
  },
  "unity-client/api/PlayGen.SUGAR.Unity.BaseInterface.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.BaseInterface.html",
    "title": "Class BaseInterface | SUGAR",
    "keywords": "Class BaseInterface Base abstract class for controlling UI objects Inheritance System.Object BaseInterface BaseEvaluationListInterface BaseGroupMemberInterface BaseLeaderboardInterface BaseLeaderboardListInterface BaseUserFriendInterface BaseUserGroupInterface Namespace : PlayGen.SUGAR.Unity Assembly : PlayGen.SUGAR.Unity.dll Syntax public abstract class BaseInterface : MonoBehaviour Fields _closeButton Button used to disable this object. Can be left null. Declaration protected Button _closeButton Field Value Type Description Button _errorText Text object which displays errors if/when they occur. Can be left null. Declaration protected Text _errorText Field Value Type Description Text _signinButton Button used to display account interface (if available) if no user is signed in. Can be left null. Declaration protected Button _signinButton Field Value Type Description Button Methods Awake() Base Awake method adds onClick listeners for the close and signin buttons. Declaration protected virtual void Awake() Draw() Should be used to set, create and place UI on this object. Declaration protected abstract void Draw() ErrorDraw(Boolean) Should be used to set error text and disable UI objects due to errors, if required. By default sets error text in case of no user being signed in or loading issues. Declaration protected virtual void ErrorDraw(bool loadingSuccess) Parameters Type Name Description System.Boolean loadingSuccess Was the data successfully loaded? HideInterfaces() Should be used to enable/disable UI on this object and hide other UI objects. Declaration protected abstract void HideInterfaces() LoadErrorText() Get error string if there were issues loading what was required. Declaration protected abstract string LoadErrorText() Returns Type Description System.String NoResultsErrorText() Get error string if there were no results to display. Declaration protected abstract string NoResultsErrorText() Returns Type Description System.String OnSignIn() Triggered by successful sign-in via this interface. Declaration protected abstract void OnSignIn() PreDisplay() Functionality triggered before displaying the interface. Declaration protected abstract void PreDisplay() Show(Boolean) Used to display/redraw the UI on this object. Triggers methods in this order: HideInterfaces - abstract method used to enable/disable UI on this object and hide other UI objects. PreDraw - private method. Activates object using SUGARManager.Unity.EnableObject, resets error text and hides signin button. Draw - abstract method where creation and placement of the UI should be performed. ErrorDraw - where error text is determined and set, if required. Declaration protected void Show(bool loadingSuccess) Parameters Type Name Description System.Boolean loadingSuccess Was the data successfully loaded?"
  },
  "api/PlayGen.SUGAR.Client.AsyncRequestQueue.IAsyncRequestController.html": {
    "href": "api/PlayGen.SUGAR.Client.AsyncRequestQueue.IAsyncRequestController.html",
    "title": "Interface IAsyncRequestController | SUGAR",
    "keywords": "Interface IAsyncRequestController Namespace : PlayGen.SUGAR.Client.AsyncRequestQueue Assembly : PlayGen.SUGAR.Client.dll Syntax public interface IAsyncRequestController : IDisposable Methods Clear() Declaration void Clear() EnqueueRequest(Action, Action, Action<Exception>) Declaration void EnqueueRequest(Action request, Action onSuccess, Action<Exception> onError) Parameters Type Name Description Action request Action onSuccess Action < Exception > onError EnqueueRequest<TResult>(Func<TResult>, Action<TResult>, Action<Exception>) Declaration void EnqueueRequest<TResult>(Func<TResult> request, Action<TResult> onSuccess, Action<Exception> onError) Parameters Type Name Description Func <TResult> request Action <TResult> onSuccess Action < Exception > onError Type Parameters Name Description TResult TryExecuteResponse() Declaration bool TryExecuteResponse() Returns Type Description System.Boolean"
  },
  "api/PlayGen.SUGAR.Contracts.RewardCreateRequest.html": {
    "href": "api/PlayGen.SUGAR.Contracts.RewardCreateRequest.html",
    "title": "Class RewardCreateRequest | SUGAR",
    "keywords": "Class RewardCreateRequest Encapsulates the reward given for completing an achievement or skill. Inheritance System.Object RewardCreateRequest Namespace : PlayGen.SUGAR.Contracts Assembly : PlayGen.SUGAR.Contracts.dll Syntax public class RewardCreateRequest : object Examples JSON { Key : \"Reward Key\", DataType : \"Float\", Value : \"10.5\" } Properties EvaluationDataCategory EvaluationDataCategory of the value for this EvaluationData. Declaration public EvaluationDataCategory? EvaluationDataCategory { get; set; } Property Value Type Description System.Nullable < EvaluationDataCategory > EvaluationDataKey The key which will be stored in EvaluationData. Declaration public string EvaluationDataKey { get; set; } Property Value Type Description System.String EvaluationDataType EvaluationDataType of the value for this EvaluationData. Declaration public EvaluationDataType? EvaluationDataType { get; set; } Property Value Type Description System.Nullable < EvaluationDataType > Value The value of the EvaluationData. Declaration public string Value { get; set; } Property Value Type Description System.String Extension Methods RewardExtensions.ToModel(RewardCreateRequest)"
  },
  "api/PlayGen.SUGAR.Server.Authentication.Extensions.AuthorizationHeaderExtensions.html": {
    "href": "api/PlayGen.SUGAR.Server.Authentication.Extensions.AuthorizationHeaderExtensions.html",
    "title": "Class AuthorizationHeaderExtensions | SUGAR",
    "keywords": "Class AuthorizationHeaderExtensions Inheritance System.Object AuthorizationHeaderExtensions Namespace : PlayGen.SUGAR.Server.Authentication.Extensions Assembly : PlayGen.SUGAR.Server.Authentication.dll Syntax public static class AuthorizationHeaderExtensions : object Methods GetAuthorization(HttpRequest) Declaration public static string GetAuthorization(this HttpRequest request) Parameters Type Name Description HttpRequest request Returns Type Description System.String GetAuthorization(HttpResponse) Declaration public static string GetAuthorization(this HttpResponse response) Parameters Type Name Description HttpResponse response Returns Type Description System.String GetAuthorizationToken(HttpRequest) Declaration public static string GetAuthorizationToken(this HttpRequest request) Parameters Type Name Description HttpRequest request Returns Type Description System.String GetAuthorizationToken(HttpResponse) Declaration public static string GetAuthorizationToken(this HttpResponse response) Parameters Type Name Description HttpResponse response Returns Type Description System.String GetAuthorizationToken(IHeaderDictionary) Declaration public static string GetAuthorizationToken(this IHeaderDictionary headers) Parameters Type Name Description IHeaderDictionary headers Returns Type Description System.String HasAuthorization(HttpRequest) Declaration public static bool HasAuthorization(this HttpRequest request) Parameters Type Name Description HttpRequest request Returns Type Description System.Boolean HasAuthorization(HttpResponse) Declaration public static bool HasAuthorization(this HttpResponse response) Parameters Type Name Description HttpResponse response Returns Type Description System.Boolean SetAuthorization(HttpResponse, String) Declaration public static void SetAuthorization(this HttpResponse response, string authorization) Parameters Type Name Description HttpResponse response System.String authorization SetAuthorizationToken(HttpResponse, String) Declaration public static void SetAuthorizationToken(this HttpResponse response, string token) Parameters Type Name Description HttpResponse response System.String token"
  },
  "api/PlayGen.SUGAR.Server.WebAPI.Exceptions.html": {
    "href": "api/PlayGen.SUGAR.Server.WebAPI.Exceptions.html",
    "title": "Namespace PlayGen.SUGAR.Server.WebAPI.Exceptions | SUGAR",
    "keywords": "Namespace PlayGen.SUGAR.Server.WebAPI.Exceptions Classes ClaimNotFoundException IncompatibleAPIVersionException InvalidAccountDetailsException InvalidSessionException"
  },
  "api/PlayGen.SUGAR.Server.WebAPI.Filters.APIVersionFilterFilter.html": {
    "href": "api/PlayGen.SUGAR.Server.WebAPI.Filters.APIVersionFilterFilter.html",
    "title": "Class APIVersionFilterFilter | SUGAR",
    "keywords": "Class APIVersionFilterFilter Ensures API Versions match for incoming request and server Inheritance System.Object APIVersionFilterFilter Namespace : PlayGen.SUGAR.Server.WebAPI.Filters Assembly : PlayGen.SUGAR.Server.WebAPI.dll Syntax public class APIVersionFilterFilter : IAuthorizationFilter Methods OnAuthorization(AuthorizationFilterContext) Declaration public void OnAuthorization(AuthorizationFilterContext context) Parameters Type Name Description AuthorizationFilterContext context"
  },
  "api/PlayGen.SUGAR.Server.WebAPI.Filters.ExceptionFilter.html": {
    "href": "api/PlayGen.SUGAR.Server.WebAPI.Filters.ExceptionFilter.html",
    "title": "Class ExceptionFilter | SUGAR",
    "keywords": "Class ExceptionFilter Wraps internal exceptions for external consumption. Inheritance System.Object ExceptionFilter Namespace : PlayGen.SUGAR.Server.WebAPI.Filters Assembly : PlayGen.SUGAR.Server.WebAPI.dll Syntax public class ExceptionFilter : ExceptionFilterAttribute Constructors ExceptionFilter(ILogger<ExceptionFilter>) Declaration public ExceptionFilter(ILogger<ExceptionFilter> logger) Parameters Type Name Description ILogger < ExceptionFilter > logger Methods OnException(ExceptionContext) Declaration public override void OnException(ExceptionContext context) Parameters Type Name Description ExceptionContext context"
  },
  "api/PlayGen.SUGAR.Server.WebAPI.Filters.ModelValidationFilter.html": {
    "href": "api/PlayGen.SUGAR.Server.WebAPI.Filters.ModelValidationFilter.html",
    "title": "Class ModelValidationFilter | SUGAR",
    "keywords": "Class ModelValidationFilter Checks if models are valid. If a model is not valid, a Bad Request is returned as the result with details on why the model state is invalid. Inheritance System.Object ModelValidationFilter Namespace : PlayGen.SUGAR.Server.WebAPI.Filters Assembly : PlayGen.SUGAR.Server.WebAPI.dll Syntax public class ModelValidationFilter : IActionFilter Methods OnActionExecuted(ActionExecutedContext) Declaration public void OnActionExecuted(ActionExecutedContext context) Parameters Type Name Description ActionExecutedContext context OnActionExecuting(ActionExecutingContext) Declaration public void OnActionExecuting(ActionExecutingContext context) Parameters Type Name Description ActionExecutingContext context"
  },
  "api/PlayGen.SUGAR.Client.ClientBase.html": {
    "href": "api/PlayGen.SUGAR.Client.ClientBase.html",
    "title": "Class ClientBase | SUGAR",
    "keywords": "Class ClientBase Inheritance System.Object ClientBase AccountClient AchievementClient AllianceClient APIVersionClient DevelopmentClient GameClient GameDataClient GroupClient GroupMemberClient LeaderboardClient MatchClient ResourceClient SessionClient SkillClient UserClient UserFriendClient Namespace : PlayGen.SUGAR.Client Assembly : PlayGen.SUGAR.Client.dll Syntax public abstract class ClientBase : object Constructors ClientBase(String, IHttpHandler, Dictionary<String, String>, Dictionary<String, String>, IAsyncRequestController, EvaluationNotifications) Declaration protected ClientBase(string baseAddress, IHttpHandler httpHandler, Dictionary<string, string> constantHeaders, Dictionary<string, string> sessionHeaders, IAsyncRequestController asyncRequestController, EvaluationNotifications evaluationNotifications) Parameters Type Name Description System.String baseAddress IHttpHandler httpHandler Dictionary < System.String , System.String > constantHeaders Dictionary < System.String , System.String > sessionHeaders IAsyncRequestController asyncRequestController EvaluationNotifications evaluationNotifications Fields AsyncRequestController Declaration protected readonly IAsyncRequestController AsyncRequestController Field Value Type Description IAsyncRequestController EvaluationNotifications Declaration protected readonly EvaluationNotifications EvaluationNotifications Field Value Type Description EvaluationNotifications SerializerSettings Declaration public static readonly JsonSerializerSettings SerializerSettings Field Value Type Description JsonSerializerSettings Methods AreUriParamsValid(Object[]) Declaration protected bool AreUriParamsValid(object[] param) Parameters Type Name Description System.Object [] param Returns Type Description System.Boolean ClearSessionData() Declaration protected void ClearSessionData() Delete(String, IEnumerable<HttpStatusCode>, Dictionary<String, String>) Declaration protected void Delete(string url, IEnumerable<HttpStatusCode> expectedStatusCodes = null, Dictionary<string, string> headers = null) Parameters Type Name Description System.String url IEnumerable < HttpStatusCode > expectedStatusCodes Dictionary < System.String , System.String > headers Delete<TResponse>(String, IEnumerable<HttpStatusCode>, Dictionary<String, String>) Declaration protected TResponse Delete<TResponse>(string url, IEnumerable<HttpStatusCode> expectedStatusCodes = null, Dictionary<string, string> headers = null) Parameters Type Name Description System.String url IEnumerable < HttpStatusCode > expectedStatusCodes Dictionary < System.String , System.String > headers Returns Type Description TResponse Type Parameters Name Description TResponse EnableEvaluationNotifications(Boolean) Declaration protected void EnableEvaluationNotifications(bool enable = true) Parameters Type Name Description System.Boolean enable Get(String, IEnumerable<HttpStatusCode>, Dictionary<String, String>) Declaration protected void Get(string url, IEnumerable<HttpStatusCode> expectedStatusCodes = null, Dictionary<string, string> headers = null) Parameters Type Name Description System.String url IEnumerable < HttpStatusCode > expectedStatusCodes Dictionary < System.String , System.String > headers Get<TResponse>(String, IEnumerable<HttpStatusCode>, Dictionary<String, String>) Declaration protected TResponse Get<TResponse>(string url, IEnumerable<HttpStatusCode> expectedStatusCodes = null, Dictionary<string, string> headers = null) Parameters Type Name Description System.String url IEnumerable < HttpStatusCode > expectedStatusCodes Dictionary < System.String , System.String > headers Returns Type Description TResponse Type Parameters Name Description TResponse GetDelete(String, String, Dictionary<String, String>, IEnumerable<HttpStatusCode>) Declaration protected void GetDelete(string url, string method, Dictionary<string, string> headers, IEnumerable<HttpStatusCode> expectedStatusCodes) Parameters Type Name Description System.String url System.String method Dictionary < System.String , System.String > headers IEnumerable < HttpStatusCode > expectedStatusCodes GetDelete<TResponse>(String, String, Dictionary<String, String>, IEnumerable<HttpStatusCode>) Declaration protected TResponse GetDelete<TResponse>(string url, string method, Dictionary<string, string> headers, IEnumerable<HttpStatusCode> expectedStatusCodes) Parameters Type Name Description System.String url System.String method Dictionary < System.String , System.String > headers IEnumerable < HttpStatusCode > expectedStatusCodes Returns Type Description TResponse Type Parameters Name Description TResponse GetUriBuilder(String, Object[]) Get a UriBuilder object with the origin and web api path Declaration protected UriBuilder GetUriBuilder(string apiSuffix, params object[] param) Parameters Type Name Description System.String apiSuffix WebAPI path relative to web origin, eg. /api System.Object [] param URI para Returns Type Description UriBuilder Post<TRequest>(String, TRequest, IEnumerable<HttpStatusCode>, Dictionary<String, String>) Declaration protected void Post<TRequest>(string url, TRequest payload, IEnumerable<HttpStatusCode> expectedStatusCodes = null, Dictionary<string, string> headers = null) Parameters Type Name Description System.String url TRequest payload IEnumerable < HttpStatusCode > expectedStatusCodes Dictionary < System.String , System.String > headers Type Parameters Name Description TRequest Post<TResponse>(String, Object, IEnumerable<HttpStatusCode>, Dictionary<String, String>) Declaration protected TResponse Post<TResponse>(string url, object payload, IEnumerable<HttpStatusCode> expectedStatusCodes = null, Dictionary<string, string> headers = null) Parameters Type Name Description System.String url System.Object payload IEnumerable < HttpStatusCode > expectedStatusCodes Dictionary < System.String , System.String > headers Returns Type Description TResponse Type Parameters Name Description TResponse Post<TRequest, TResponse>(String, TRequest, IEnumerable<HttpStatusCode>, Dictionary<String, String>) Declaration protected TResponse Post<TRequest, TResponse>(string url, TRequest payload, IEnumerable<HttpStatusCode> expectedStatusCodes = null, Dictionary<string, string> headers = null) Parameters Type Name Description System.String url TRequest payload IEnumerable < HttpStatusCode > expectedStatusCodes Dictionary < System.String , System.String > headers Returns Type Description TResponse Type Parameters Name Description TRequest TResponse PostPut(String, String, Dictionary<String, String>, Object, IEnumerable<HttpStatusCode>) Declaration protected void PostPut(string url, string method, Dictionary<string, string> headers, object payload, IEnumerable<HttpStatusCode> expectedStatusCodes) Parameters Type Name Description System.String url System.String method Dictionary < System.String , System.String > headers System.Object payload IEnumerable < HttpStatusCode > expectedStatusCodes PostPut<TResponse>(String, String, Dictionary<String, String>, Object, IEnumerable<HttpStatusCode>) Declaration protected TResponse PostPut<TResponse>(string url, string method, Dictionary<string, string> headers, object payload, IEnumerable<HttpStatusCode> expectedStatusCodes) Parameters Type Name Description System.String url System.String method Dictionary < System.String , System.String > headers System.Object payload IEnumerable < HttpStatusCode > expectedStatusCodes Returns Type Description TResponse Type Parameters Name Description TResponse Put<TRequest>(String, TRequest, IEnumerable<HttpStatusCode>, Dictionary<String, String>) Declaration protected void Put<TRequest>(string url, TRequest payload, IEnumerable<HttpStatusCode> expectedStatusCodes = null, Dictionary<string, string> headers = null) Parameters Type Name Description System.String url TRequest payload IEnumerable < HttpStatusCode > expectedStatusCodes Dictionary < System.String , System.String > headers Type Parameters Name Description TRequest Put<TRequest, TResponse>(String, TRequest, IEnumerable<HttpStatusCode>, Dictionary<String, String>) Declaration protected TResponse Put<TRequest, TResponse>(string url, TRequest payload, IEnumerable<HttpStatusCode> expectedStatusCodes = null, Dictionary<string, string> headers = null) Parameters Type Name Description System.String url TRequest payload IEnumerable < HttpStatusCode > expectedStatusCodes Dictionary < System.String , System.String > headers Returns Type Description TResponse Type Parameters Name Description TRequest TResponse"
  },
  "api/PlayGen.SUGAR.Client.EvaluationEvents.EvaluationEventsExtensions.html": {
    "href": "api/PlayGen.SUGAR.Client.EvaluationEvents.EvaluationEventsExtensions.html",
    "title": "Class EvaluationEventsExtensions | SUGAR",
    "keywords": "Class EvaluationEventsExtensions Inheritance System.Object EvaluationEventsExtensions Namespace : PlayGen.SUGAR.Client.EvaluationEvents Assembly : PlayGen.SUGAR.Client.dll Syntax public static class EvaluationEventsExtensions : object Methods ToNotification(EvaluationProgressResponse) Declaration public static EvaluationNotification ToNotification(this EvaluationProgressResponse progressResponse) Parameters Type Name Description EvaluationProgressResponse progressResponse Returns Type Description EvaluationNotification ToNotifications(List<EvaluationProgressResponse>) Declaration public static List<EvaluationNotification> ToNotifications(this List<EvaluationProgressResponse> progressResponses) Parameters Type Name Description List < EvaluationProgressResponse > progressResponses Returns Type Description List < EvaluationNotification >"
  },
  "api/PlayGen.SUGAR.Client.Extensions.html": {
    "href": "api/PlayGen.SUGAR.Client.Extensions.html",
    "title": "Namespace PlayGen.SUGAR.Client.Extensions | SUGAR",
    "keywords": "Namespace PlayGen.SUGAR.Client.Extensions Classes UriBuilderExtensions"
  },
  "api/PlayGen.SUGAR.Client.IHttpHandler.html": {
    "href": "api/PlayGen.SUGAR.Client.IHttpHandler.html",
    "title": "Interface IHttpHandler | SUGAR",
    "keywords": "Interface IHttpHandler Namespace : PlayGen.SUGAR.Client Assembly : PlayGen.SUGAR.Client.dll Syntax public interface IHttpHandler Methods HandleRequest(HttpRequest) Declaration HttpResponse HandleRequest(HttpRequest request) Parameters Type Name Description HttpRequest request Returns Type Description HttpResponse"
  },
  "unity-client/api/PlayGen.SUGAR.Unity.LeaderboardListUnityClient.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.LeaderboardListUnityClient.html",
    "title": "Class LeaderboardListUnityClient | SUGAR",
    "keywords": "Class LeaderboardListUnityClient Use this to get a list of leaderboards for this game Inheritance System.Object BaseUnityClient < BaseLeaderboardListInterface > LeaderboardListUnityClient Inherited Members BaseUnityClient<BaseLeaderboardListInterface>._landscapeInterface BaseUnityClient<BaseLeaderboardListInterface>._portraitInterface BaseUnityClient<BaseLeaderboardListInterface>._interface BaseUnityClient<BaseLeaderboardListInterface>.HasInterface BaseUnityClient<BaseLeaderboardListInterface>.IsActive BaseUnityClient<BaseLeaderboardListInterface>.Update() BaseUnityClient<BaseLeaderboardListInterface>.Hide() Namespace : PlayGen.SUGAR.Unity Assembly : PlayGen.SUGAR.Unity.dll Syntax public class LeaderboardListUnityClient : BaseUnityClient<BaseLeaderboardListInterface> Properties CurrentActorType Declaration public ActorType CurrentActorType { get; } Property Value Type Description ActorType Currently used ActorType filter. Leaderboards Declaration public Dictionary<ActorType, List<LeaderboardResponse>> Leaderboards { get; } Property Value Type Description Dictionary < ActorType , List < LeaderboardResponse >> Each ActorType and list of leaderboard responses for this application. Methods DisplayGameList(ActorType) Gathers leaderboards for this application and displays list for current ActorType if interface if provided. Declaration public void DisplayGameList(ActorType filter = null) Parameters Type Name Description ActorType filter Optional The filter type to use (default: ActorType.User) DisplayGlobalList(ActorType) Gathers all leaderboards not attached to a game and displays list for current ActorType if interface if provided. Declaration public void DisplayGlobalList(ActorType filter = null) Parameters Type Name Description ActorType filter Optional The filter type to use (default: ActorType.User)"
  },
  "unity-client/api/PlayGen.SUGAR.Unity.LeaderboardUnityClient.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.LeaderboardUnityClient.html",
    "title": "Class LeaderboardUnityClient | SUGAR",
    "keywords": "Class LeaderboardUnityClient Use this to get the current standings for a leaderboard Inheritance System.Object BaseUnityClient < BaseLeaderboardInterface > LeaderboardUnityClient Inherited Members BaseUnityClient<BaseLeaderboardInterface>._landscapeInterface BaseUnityClient<BaseLeaderboardInterface>._portraitInterface BaseUnityClient<BaseLeaderboardInterface>._interface BaseUnityClient<BaseLeaderboardInterface>.HasInterface BaseUnityClient<BaseLeaderboardInterface>.IsActive BaseUnityClient<BaseLeaderboardInterface>.Update() BaseUnityClient<BaseLeaderboardInterface>.Hide() Namespace : PlayGen.SUGAR.Unity Assembly : PlayGen.SUGAR.Unity.dll Syntax public class LeaderboardUnityClient : BaseUnityClient<BaseLeaderboardInterface> Properties CurrentFilter Declaration public LeaderboardFilterType CurrentFilter { get; } Property Value Type Description LeaderboardFilterType Current filter to use for gathering leaderboard standings. CurrentLeaderboard Declaration public LeaderboardResponse CurrentLeaderboard { get; } Property Value Type Description LeaderboardResponse Current leaderboard to use for gathering leaderboard standings from. CurrentStandings Declaration public List<LeaderboardStandingsResponse> CurrentStandings { get; } Property Value Type Description List < LeaderboardStandingsResponse > Last set of standings gathered. MultiplePerActor Declaration public bool MultiplePerActor { get; } Property Value Type Description System.Boolean Current setting for whether actors can appear on leaderboards multiple times. PositionCount Declaration public int PositionCount { get; } Property Value Type Description System.Int32 Number of results that should be gathered per call. Methods Display(String, LeaderboardFilterType, Boolean, Int32, Boolean) Gathers information for leaderboard and displays the interface if it has been provided. Declaration public void Display(string token, LeaderboardFilterType filter, bool multiplePerActor, int pageNumber = 0, bool globalLeaderboard = false) Parameters Type Name Description System.String token The unique identifier for the Leaderboard LeaderboardFilterType filter The Filter type to order standings by System.Boolean multiplePerActor If the leaderboard allows for actors to appeard multiple times System.Int32 pageNumber Optional The page number to start from (default: 0) System.Boolean globalLeaderboard Optional Whether the leaderboard is global or in game scope. (default: false) GetLeaderboardStandings(Int32, Action<Boolean>, Action<List<LeaderboardStandingsResponse>>) Get standings for the current leaderboard. Declaration public void GetLeaderboardStandings(int pageNumber, Action<bool> success, Action<List<LeaderboardStandingsResponse>> result = null) Parameters Type Name Description System.Int32 pageNumber The page number to retrieve Action < System.Boolean > success Whether the standings were retrieved successfully Action < List < LeaderboardStandingsResponse >> result Optional the results for the leaderboard standings, null value will save results to CurrentStandings (default: null) SetPositionCount(Int32) Set the maximum number of results to get per call. Declaration public void SetPositionCount(int count) Parameters Type Name Description System.Int32 count The Maximum number of results"
  },
  "unity-client/api/PlayGen.SUGAR.Unity.ResourceUnityClient.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.ResourceUnityClient.html",
    "title": "Class ResourceUnityClient | SUGAR",
    "keywords": "Class ResourceUnityClient Use this to get current resources, add resources and send resources to other users Inheritance System.Object ResourceUnityClient Namespace : PlayGen.SUGAR.Unity Assembly : PlayGen.SUGAR.Unity.dll Syntax public class ResourceUnityClient : MonoBehaviour Methods Add(String, Int64, Action<Boolean, Int64>, Boolean) Add the resource with the key provided to the currently signed in user If globalResource is true, resource transferred will be global rather than for the game. Declaration public void Add(string key, long amount, Action<bool, long> success, bool globalResource = false) Parameters Type Name Description System.String key Name of the resource being transferred System.Int64 amount The amount being transferred Action < System.Boolean , System.Int64 > success Callback which returns whether the transfer was a success and the current value of the resource that was transferred System.Boolean globalResource Optional Setting for if the resource is global rather than for this game. (default: false) Remarks If globalResource is true, resource transferred will be global rather than for the game. GetFromCache(String, Boolean) Get the current resource amount for the current user from the local cache. Cache is updated at the rate set in the Inspector. Declaration public long GetFromCache(string key, bool globalResource = false) Parameters Type Name Description System.String key Resource key value is being gathered for System.Boolean globalResource Optional Get value for a global resource rather than one for this game. (default: false) Returns Type Description System.Int64 Remarks If globalResource is true, resource will be global rather than for the game. GetFromServer(Action<Boolean, Dictionary<String, Int64>>, String[], Boolean) Get the resources with the keys provided for the current user directly from the server. Declaration public void GetFromServer(Action<bool, Dictionary<string, long>> result, string[] keys = null, bool globalResource = false) Parameters Type Name Description Action < System.Boolean , Dictionary < System.String , System.Int64 >> result Callback which will return whether the call to the server was successful and a dictionary of all the keys and their current values System.String [] keys Resource keys values are being gathered for System.Boolean globalResource Optional Get resource values for global resources rather than one for this game. (default: false) Remarks If globalResource is true, resource will be global rather than for the game. Transfer(Int32, String, Int64, Action<Boolean, Int64>, Boolean) Transfer the resource with the key provided from the currently signed in user Declaration public void Transfer(int recipientId, string key, long amount, Action<bool, long> success, bool globalResource = false) Parameters Type Name Description System.Int32 recipientId Id of the actor who will receive the resource System.String key Name of the resource being transferred System.Int64 amount The amount being transferred Action < System.Boolean , System.Int64 > success Callback which returns whether the transfer was a success and the current value of the resource that was transferred System.Boolean globalResource Optional Setting for if the resource is global rather than for this game. (default: false) Remarks If globalResource is true, resource transferred will be global rather than for the game. TryTake(Int32, String, Int64, Action<Boolean, Int64>, Boolean) Transfer the resource with the key provided to the currently signed in user Declaration public void TryTake(int senderId, string key, long amount, Action<bool, long> success, bool globalResource = false) Parameters Type Name Description System.Int32 senderId Id of the actor who will send the resource System.String key Name of the resource being transferred System.Int64 amount The amount being transferred Action < System.Boolean , System.Int64 > success Callback which returns whether the transfer was a success and the current value of the resource that was transferred System.Boolean globalResource Optional Setting for if the resource is global rather than for this game. (default: false) Remarks If globalResource is true, resource transferred will be global rather than for the game."
  },
  "api/PlayGen.SUGAR.Client.GameDataClient.html": {
    "href": "api/PlayGen.SUGAR.Client.GameDataClient.html",
    "title": "Class GameDataClient | SUGAR",
    "keywords": "Class GameDataClient Controller that facilitates GameData specific operations. Inheritance System.Object ClientBase GameDataClient Inherited Members ClientBase.AsyncRequestController ClientBase.EvaluationNotifications ClientBase.SerializerSettings ClientBase.EnableEvaluationNotifications(Boolean) ClientBase.ClearSessionData() ClientBase.AreUriParamsValid(Object[]) ClientBase.GetUriBuilder(String, Object[]) ClientBase.Post<TRequest, TResponse>(String, TRequest, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Post<TRequest>(String, TRequest, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Post<TResponse>(String, Object, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Put<TRequest, TResponse>(String, TRequest, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Put<TRequest>(String, TRequest, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.PostPut<TResponse>(String, String, Dictionary<String, String>, Object, IEnumerable<HttpStatusCode>) ClientBase.PostPut(String, String, Dictionary<String, String>, Object, IEnumerable<HttpStatusCode>) ClientBase.Get<TResponse>(String, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Get(String, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Delete<TResponse>(String, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Delete(String, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.GetDelete<TResponse>(String, String, Dictionary<String, String>, IEnumerable<HttpStatusCode>) ClientBase.GetDelete(String, String, Dictionary<String, String>, IEnumerable<HttpStatusCode>) Namespace : PlayGen.SUGAR.Client Assembly : PlayGen.SUGAR.Client.dll Syntax public class GameDataClient : ClientBase Constructors GameDataClient(String, IHttpHandler, Dictionary<String, String>, Dictionary<String, String>, IAsyncRequestController, EvaluationNotifications) Declaration public GameDataClient(string baseAddress, IHttpHandler httpHandler, Dictionary<string, string> constantHeaders, Dictionary<string, string> sessionHeaders, IAsyncRequestController asyncRequestController, EvaluationNotifications evaluationNotifications) Parameters Type Name Description System.String baseAddress IHttpHandler httpHandler Dictionary < System.String , System.String > constantHeaders Dictionary < System.String , System.String > sessionHeaders IAsyncRequestController asyncRequestController EvaluationNotifications evaluationNotifications Methods Add(EvaluationDataRequest) Create a new GameData record. Declaration public EvaluationDataResponse Add(EvaluationDataRequest data) Parameters Type Name Description EvaluationDataRequest data EvaluationDataRequest object that holds the details of the new GameData. Returns Type Description EvaluationDataResponse A EvaluationDataResponse containing the new GameData details. AddAsync(EvaluationDataRequest, Action<EvaluationDataResponse>, Action<Exception>) Declaration public void AddAsync(EvaluationDataRequest data, Action<EvaluationDataResponse> onSuccess, Action<Exception> onError) Parameters Type Name Description EvaluationDataRequest data Action < EvaluationDataResponse > onSuccess Action < Exception > onError Get(Int32, Int32, String[]) Find a list of all GameData that match the , and provided. Declaration public IEnumerable<EvaluationDataResponse> Get(int actorId, int gameId, string[] key) Parameters Type Name Description System.Int32 actorId ID of a User/Group. System.Int32 gameId ID of a Game. System.String [] key Array of Key names. Returns Type Description IEnumerable < EvaluationDataResponse > A list of EvaluationDataResponse which match the search criteria. GetAsync(Int32, Int32, String[], Action<IEnumerable<EvaluationDataResponse>>, Action<Exception>) Declaration public void GetAsync(int actorId, int gameId, string[] key, Action<IEnumerable<EvaluationDataResponse>> onSuccess, Action<Exception> onError) Parameters Type Name Description System.Int32 actorId System.Int32 gameId System.String [] key Action < IEnumerable < EvaluationDataResponse >> onSuccess Action < Exception > onError GetByLeaderboardType(Int32, Int32, String, EvaluationDataType, LeaderboardType) Finds a list of GameData with the highest for each provided that matches the and . Declaration public EvaluationDataResponse GetByLeaderboardType(int actorId, int gameId, string key, EvaluationDataType dataType, LeaderboardType leaderboardType) Parameters Type Name Description System.Int32 actorId ID of a User/Group. System.Int32 gameId ID of a Game. System.String key Array of Key names. EvaluationDataType dataType Data type of value LeaderboardType leaderboardType Returns Type Description EvaluationDataResponse A list of EvaluationDataResponse which match the search criteria. GetByLeaderboardTypeAsync(Int32, Int32, String, EvaluationDataType, LeaderboardType, Action<EvaluationDataResponse>, Action<Exception>) Declaration public void GetByLeaderboardTypeAsync(int actorId, int gameId, string key, EvaluationDataType dataType, LeaderboardType leaderboardType, Action<EvaluationDataResponse> onSuccess, Action<Exception> onError) Parameters Type Name Description System.Int32 actorId System.Int32 gameId System.String key EvaluationDataType dataType LeaderboardType leaderboardType Action < EvaluationDataResponse > onSuccess Action < Exception > onError GetGameActors(Int32) Find a list of all Actors that have data saved for the game provided. Declaration public IEnumerable<ActorResponse> GetGameActors(int id) Parameters Type Name Description System.Int32 id ID of a Game. Returns Type Description IEnumerable < ActorResponse > A list of ActorResponse which match the search criteria. GetGameActorsAsync(Int32, Action<IEnumerable<ActorResponse>>, Action<Exception>) Declaration public void GetGameActorsAsync(int id, Action<IEnumerable<ActorResponse>> onSuccess, Action<Exception> onError) Parameters Type Name Description System.Int32 id Action < IEnumerable < ActorResponse >> onSuccess Action < Exception > onError"
  },
  "unity-client/api/PlayGen.SUGAR.Unity.Editor.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.Editor.html",
    "title": "Namespace PlayGen.SUGAR.Unity.Editor | SUGAR",
    "keywords": "Namespace PlayGen.SUGAR.Unity.Editor Classes AutoLogIn EditGameSeed EditGameSeedWindow SeedGame SeedGameWindow SetEditorAutoLogin SetEditorAutoLogin.AutoLoginOption SetEditorAutoLogin.BoolValue SetEditorAutoLogin.StringValue"
  },
  "api/PlayGen.SUGAR.Client.SkillClient.html": {
    "href": "api/PlayGen.SUGAR.Client.SkillClient.html",
    "title": "Class SkillClient | SUGAR",
    "keywords": "Class SkillClient Controller that facilitates Skill specific operations. Inheritance System.Object ClientBase SkillClient Inherited Members ClientBase.AsyncRequestController ClientBase.EvaluationNotifications ClientBase.SerializerSettings ClientBase.EnableEvaluationNotifications(Boolean) ClientBase.ClearSessionData() ClientBase.AreUriParamsValid(Object[]) ClientBase.GetUriBuilder(String, Object[]) ClientBase.Post<TRequest, TResponse>(String, TRequest, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Post<TRequest>(String, TRequest, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Post<TResponse>(String, Object, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Put<TRequest, TResponse>(String, TRequest, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Put<TRequest>(String, TRequest, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.PostPut<TResponse>(String, String, Dictionary<String, String>, Object, IEnumerable<HttpStatusCode>) ClientBase.PostPut(String, String, Dictionary<String, String>, Object, IEnumerable<HttpStatusCode>) ClientBase.Get<TResponse>(String, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Get(String, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Delete<TResponse>(String, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Delete(String, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.GetDelete<TResponse>(String, String, Dictionary<String, String>, IEnumerable<HttpStatusCode>) ClientBase.GetDelete(String, String, Dictionary<String, String>, IEnumerable<HttpStatusCode>) Namespace : PlayGen.SUGAR.Client Assembly : PlayGen.SUGAR.Client.dll Syntax public class SkillClient : ClientBase Constructors SkillClient(String, IHttpHandler, Dictionary<String, String>, Dictionary<String, String>, IAsyncRequestController, EvaluationNotifications) Declaration public SkillClient(string baseAddress, IHttpHandler httpHandler, Dictionary<string, string> constantHeaders, Dictionary<string, string> sessionHeaders, IAsyncRequestController asyncRequestController, EvaluationNotifications evaluationNotifications) Parameters Type Name Description System.String baseAddress IHttpHandler httpHandler Dictionary < System.String , System.String > constantHeaders Dictionary < System.String , System.String > sessionHeaders IAsyncRequestController asyncRequestController EvaluationNotifications evaluationNotifications Methods EnableNotifications(Boolean) Sets flag to return pending skill notifications from the server as they become available. Declaration public void EnableNotifications(bool enable) Parameters Type Name Description System.Boolean enable Whether to enable or disable notifications. GetGameProgress(Int32, Int32) Find the current progress for all skills for a for . Declaration public IEnumerable<EvaluationProgressResponse> GetGameProgress(int gameId, int actorId) Parameters Type Name Description System.Int32 gameId ID of Game System.Int32 actorId ID of Group/User Returns Type Description IEnumerable < EvaluationProgressResponse > Returns multiple EvaluationProgressResponse that hold current progress toward skill. GetGameProgressAsync(Int32, Int32, Action<IEnumerable<EvaluationProgressResponse>>, Action<Exception>) Declaration public void GetGameProgressAsync(int gameId, int actorId, Action<IEnumerable<EvaluationProgressResponse>> onSuccess, Action<Exception> onError) Parameters Type Name Description System.Int32 gameId System.Int32 actorId Action < IEnumerable < EvaluationProgressResponse >> onSuccess Action < Exception > onError GetGlobalProgress(Int32) Find the current progress for all global skills for . Declaration public IEnumerable<EvaluationProgressResponse> GetGlobalProgress(int actorId) Parameters Type Name Description System.Int32 actorId ID of Group/User Returns Type Description IEnumerable < EvaluationProgressResponse > Returns multiple EvaluationProgressResponse that hold Skill progress details GetGlobalProgressAsync(Int32, Action<IEnumerable<EvaluationProgressResponse>>, Action<Exception>) Declaration public void GetGlobalProgressAsync(int actorId, Action<IEnumerable<EvaluationProgressResponse>> onSuccess, Action<Exception> onError) Parameters Type Name Description System.Int32 actorId Action < IEnumerable < EvaluationProgressResponse >> onSuccess Action < Exception > onError GetGlobalSkillProgress(String, Int32) Find the current progress for an Skill for . Declaration public EvaluationProgressResponse GetGlobalSkillProgress(string token, int actorId) Parameters Type Name Description System.String token Token of Skill System.Int32 actorId ID of actor/User Returns Type Description EvaluationProgressResponse Returns EvaluationProgressResponse that hold current progress toward skill. GetGlobalSkillProgressAsync(String, Int32, Action<EvaluationProgressResponse>, Action<Exception>) Declaration public void GetGlobalSkillProgressAsync(string token, int actorId, Action<EvaluationProgressResponse> onSuccess, Action<Exception> onError) Parameters Type Name Description System.String token System.Int32 actorId Action < EvaluationProgressResponse > onSuccess Action < Exception > onError GetSkillProgress(String, Int32, Int32) Find the current progress for an Skill for . Declaration public EvaluationProgressResponse GetSkillProgress(string token, int gameId, int actorId) Parameters Type Name Description System.String token Token of Skill System.Int32 gameId ID of the Game the Skill is for System.Int32 actorId ID of actor/User Returns Type Description EvaluationProgressResponse Returns EvaluationProgressResponse that hold current progress toward skill. GetSkillProgressAsync(String, Int32, Int32, Action<EvaluationProgressResponse>, Action<Exception>) Declaration public void GetSkillProgressAsync(string token, int gameId, int actorId, Action<EvaluationProgressResponse> onSuccess, Action<Exception> onError) Parameters Type Name Description System.String token System.Int32 gameId System.Int32 actorId Action < EvaluationProgressResponse > onSuccess Action < Exception > onError TryGetPendingNotification(out EvaluationNotification) Gets pending skill progress notifications. Declaration public bool TryGetPendingNotification(out EvaluationNotification notification) Parameters Type Name Description EvaluationNotification notification Returns Type Description System.Boolean Returns a boolean value indicating whether there was a notification to retrieve or not."
  },
  "api/PlayGen.SUGAR.Server.WebAPI.Attributes.AllowWithoutSession.html": {
    "href": "api/PlayGen.SUGAR.Server.WebAPI.Attributes.AllowWithoutSession.html",
    "title": "Class AllowWithoutSession | SUGAR",
    "keywords": "Class AllowWithoutSession Inheritance System.Object AllowWithoutSession Namespace : PlayGen.SUGAR.Server.WebAPI.Attributes Assembly : PlayGen.SUGAR.Server.WebAPI.dll Syntax public class AllowWithoutSession : Attribute"
  },
  "api/PlayGen.SUGAR.Server.WebAPI.Attributes.ArgumentsNotNullAttribute.html": {
    "href": "api/PlayGen.SUGAR.Server.WebAPI.Attributes.ArgumentsNotNullAttribute.html",
    "title": "Class ArgumentsNotNullAttribute | SUGAR",
    "keywords": "Class ArgumentsNotNullAttribute Attributes used to flag controller actions where not null arguments may be passed. Inheritance System.Object ArgumentsNotNullAttribute Namespace : PlayGen.SUGAR.Server.WebAPI.Attributes Assembly : PlayGen.SUGAR.Server.WebAPI.dll Syntax public class ArgumentsNotNullAttribute : ActionFilterAttribute Methods OnActionExecuting(ActionExecutingContext) Declaration public override void OnActionExecuting(ActionExecutingContext context) Parameters Type Name Description ActionExecutingContext context"
  },
  "unity-client/api/PlayGen.SUGAR.Unity.Editor.AutoLogIn.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.Editor.AutoLogIn.html",
    "title": "Class AutoLogIn | SUGAR",
    "keywords": "Class AutoLogIn Inheritance System.Object AutoLogIn Namespace : PlayGen.SUGAR.Unity.Editor Assembly : PlayGen.SUGAR.Unity.Editor.dll Syntax public class AutoLogIn : EditorWindow"
  },
  "unity-client/api/PlayGen.SUGAR.Unity.Editor.EditGameSeed.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.Editor.EditGameSeed.html",
    "title": "Class EditGameSeed | SUGAR",
    "keywords": "Class EditGameSeed Inheritance System.Object EditGameSeed Namespace : PlayGen.SUGAR.Unity.Editor Assembly : PlayGen.SUGAR.Unity.Editor.dll Syntax public static class EditGameSeed : object Methods ShowEditGameSeed() Declaration public static void ShowEditGameSeed()"
  },
  "api/PlayGen.SUGAR.Contracts.EvaluationResponse.html": {
    "href": "api/PlayGen.SUGAR.Contracts.EvaluationResponse.html",
    "title": "Class EvaluationResponse | SUGAR",
    "keywords": "Class EvaluationResponse Encapsulates achievement/skill details returned from the server. Inheritance System.Object EvaluationResponse Namespace : PlayGen.SUGAR.Contracts Assembly : PlayGen.SUGAR.Contracts.dll Syntax public class EvaluationResponse : object Examples JSON { Token : \"AN_ACHIEVEMENT_TOKEN\", GameId : 1, Name : \"Achievement Unlocked\", Description : \"Fulfil the criteria to get the reward\", ActorType : \"User\", EvaluationCriteria : [{ Key : \"Criteria Key\", DataType : \"Long\", CriteriaQueryType : \"Any\", ComparisonType : \"Equals\", Scope : \"Actor\", Value : \"5\" }], Reward : [{ Key : \"Reward Key\", DataType : \"Float\", Value : \"10.5\" }] } Properties ActorType The type of actor which this achievement/skill is intended to be completed by. Declaration public ActorType ActorType { get; set; } Property Value Type Description ActorType Description The description of the achievement/skill. Declaration public string Description { get; set; } Property Value Type Description System.String EvaluationCriterias A list of criteria which is checked in order to see if an actor has completed the achievement/skill. Declaration public List<EvaluationCriteriaResponse> EvaluationCriterias { get; set; } Property Value Type Description List < EvaluationCriteriaResponse > GameId The ID of the Game which this achievement/skill belongs to. Declaration public int GameId { get; set; } Property Value Type Description System.Int32 Id The unqiue identifier for the achievement/skill. Declaration public int Id { get; set; } Property Value Type Description System.Int32 Name The display name for the achievement/skill. Declaration public string Name { get; set; } Property Value Type Description System.String Rewards A list of rewards that is provided to the actor upon completion of the achievement/skill criteria. Declaration public List<RewardResponse> Rewards { get; set; } Property Value Type Description List < RewardResponse > Token A unique identifier used in development to reference the achievement/skill. Declaration public string Token { get; set; } Property Value Type Description System.String"
  },
  "api/PlayGen.SUGAR.Contracts.EvaluationUpdateRequest.html": {
    "href": "api/PlayGen.SUGAR.Contracts.EvaluationUpdateRequest.html",
    "title": "Class EvaluationUpdateRequest | SUGAR",
    "keywords": "Class EvaluationUpdateRequest Encapsulates achievement/skill details. Inheritance System.Object EvaluationUpdateRequest Namespace : PlayGen.SUGAR.Contracts Assembly : PlayGen.SUGAR.Contracts.dll Syntax public class EvaluationUpdateRequest : object Examples JSON { Token : \"AN_ACHIEVEMENT_TOKEN\", GameId : 1, Name : \"Achievement Unlocked\", Description : \"Fulfil the criteria to get the reward\", ActorType : \"User\", EvaluationCriteria : [{ Key : \"Criteria Key\", DataType : \"Long\", CriteriaQueryType : \"Any\", ComparisonType : \"Equals\", Scope : \"Actor\", Value : \"5\" }], Reward : [{ Key : \"Reward Key\", DataType : \"Float\", Value : \"10.5\" }] } Properties ActorType The type of actor which this achievement/skill is intended to be completed by. Declaration public ActorType? ActorType { get; set; } Property Value Type Description System.Nullable < ActorType > Description The description of the achievement/skill. Declaration public string Description { get; set; } Property Value Type Description System.String EvaluationCriterias A list of criteria which will be checked in order to see if an actor has completed the achievement/skill. Must contain at least one criteria. Declaration public List<EvaluationCriteriaUpdateRequest> EvaluationCriterias { get; set; } Property Value Type Description List < EvaluationCriteriaUpdateRequest > GameId The ID of the Game which this achievement/skill should belong to. Declaration public int? GameId { get; set; } Property Value Type Description System.Nullable < System.Int32 > Id The unqiue identifier for the achievement/skill. Declaration public int? Id { get; set; } Property Value Type Description System.Nullable < System.Int32 > Name The display name for the achievement/skill. Declaration public string Name { get; set; } Property Value Type Description System.String Rewards A list of rewards that will be provided to the actor upon completion of the achievement/skill criteria. An achievement does not need to contain a reward. Declaration public List<RewardUpdateRequest> Rewards { get; set; } Property Value Type Description List < RewardUpdateRequest > Token A unique identifier used in development to reference the achievement/skill. Declaration public string Token { get; set; } Property Value Type Description System.String Extension Methods AchievementExtensions.ToAchievementModel(EvaluationUpdateRequest) SkillExtensions.ToSkillModel(EvaluationUpdateRequest)"
  },
  "api/PlayGen.SUGAR.Contracts.RelationshipResponse.html": {
    "href": "api/PlayGen.SUGAR.Contracts.RelationshipResponse.html",
    "title": "Class RelationshipResponse | SUGAR",
    "keywords": "Class RelationshipResponse Encapsulates relationship details from the server. Inheritance System.Object RelationshipResponse Namespace : PlayGen.SUGAR.Contracts Assembly : PlayGen.SUGAR.Contracts.dll Syntax public class RelationshipResponse : object Examples JSON { RequestorId : 1, AcceptorId : 2 } Properties AcceptorId The Id of the receiving actor. Declaration public int AcceptorId { get; set; } Property Value Type Description System.Int32 RequestorId The Id of the requesting actor. Declaration public int RequestorId { get; set; } Property Value Type Description System.Int32"
  },
  "api/PlayGen.SUGAR.Contracts.RelationshipStatusUpdate.html": {
    "href": "api/PlayGen.SUGAR.Contracts.RelationshipStatusUpdate.html",
    "title": "Class RelationshipStatusUpdate | SUGAR",
    "keywords": "Class RelationshipStatusUpdate Encapsulates relationship details, including updated status of the relationship. Inheritance System.Object RelationshipStatusUpdate Namespace : PlayGen.SUGAR.Contracts Assembly : PlayGen.SUGAR.Contracts.dll Syntax public class RelationshipStatusUpdate : object Examples JSON { RequestorId : 1, AcceptorId : 2, Accepted : true } Properties Accepted Whether the request was accepted or declined. Declaration public bool Accepted { get; set; } Property Value Type Description System.Boolean AcceptorId The Id of the receiving actor. Declaration public int? AcceptorId { get; set; } Property Value Type Description System.Nullable < System.Int32 > RequestorId The Id of the requesting actor. Declaration public int? RequestorId { get; set; } Property Value Type Description System.Nullable < System.Int32 >"
  },
  "api/PlayGen.SUGAR.Contracts.RoleRequest.html": {
    "href": "api/PlayGen.SUGAR.Contracts.RoleRequest.html",
    "title": "Class RoleRequest | SUGAR",
    "keywords": "Class RoleRequest Encapsulates role details. Inheritance System.Object RoleRequest Namespace : PlayGen.SUGAR.Contracts Assembly : PlayGen.SUGAR.Contracts.dll Syntax public class RoleRequest : object Examples JSON { Name : \"Role Name\" } Properties ClaimScope The ClaimScope of this role. Declaration public ClaimScope? ClaimScope { get; set; } Property Value Type Description System.Nullable < ClaimScope > Name The display name for the role. Declaration public string Name { get; set; } Property Value Type Description System.String Extension Methods RoleExtensions.ToModel(RoleRequest)"
  },
  "api/PlayGen.SUGAR.Contracts.RoleResponse.html": {
    "href": "api/PlayGen.SUGAR.Contracts.RoleResponse.html",
    "title": "Class RoleResponse | SUGAR",
    "keywords": "Class RoleResponse Encapsulates role details from the server. Inheritance System.Object RoleResponse Namespace : PlayGen.SUGAR.Contracts Assembly : PlayGen.SUGAR.Contracts.dll Syntax public class RoleResponse : object Examples JSON { Id : 1, Name : \"Role Name\" } Properties ClaimScope The ClaimScope of this role. Declaration public ClaimScope ClaimScope { get; set; } Property Value Type Description ClaimScope Default Is this role a default role for the ClaimScope? Declaration public bool Default { get; set; } Property Value Type Description System.Boolean Id The unqiue identifier for the role. Declaration public int Id { get; set; } Property Value Type Description System.Int32 Name The display name of the role. Declaration public string Name { get; set; } Property Value Type Description System.String"
  },
  "api/PlayGen.SUGAR.Server.Authorization.AuthorizationRequirement.html": {
    "href": "api/PlayGen.SUGAR.Server.Authorization.AuthorizationRequirement.html",
    "title": "Class AuthorizationRequirement | SUGAR",
    "keywords": "Class AuthorizationRequirement Inheritance System.Object AuthorizationRequirement Namespace : PlayGen.SUGAR.Server.Authorization Assembly : PlayGen.SUGAR.Server.Authorization.dll Syntax public class AuthorizationRequirement : IAuthorizationRequirement Constructors AuthorizationRequirement(ClaimScope, String) Declaration public AuthorizationRequirement(ClaimScope scope, string name) Parameters Type Name Description ClaimScope scope System.String name Properties ClaimScope Declaration public ClaimScope ClaimScope { get; set; } Property Value Type Description ClaimScope Name Declaration public string Name { get; set; } Property Value Type Description System.String"
  },
  "api/PlayGen.SUGAR.Server.Authorization.html": {
    "href": "api/PlayGen.SUGAR.Server.Authorization.html",
    "title": "Namespace PlayGen.SUGAR.Server.Authorization | SUGAR",
    "keywords": "Namespace PlayGen.SUGAR.Server.Authorization Classes AuthorizationAttribute AuthorizationExtensions AuthorizationRequirement"
  },
  "api/PlayGen.SUGAR.Server.Core.Controllers.LeaderboardController.html": {
    "href": "api/PlayGen.SUGAR.Server.Core.Controllers.LeaderboardController.html",
    "title": "Class LeaderboardController | SUGAR",
    "keywords": "Class LeaderboardController Inheritance System.Object CriteriaEvaluator LeaderboardController Inherited Members CriteriaEvaluator.RelationshipCoreController CriteriaEvaluator.ContextFactory CriteriaEvaluator.EvaluationDataLogger CriteriaEvaluator.IsCriteriaSatisified(Int32, Int32, List<EvaluationCriteria>, ActorType, EvaluationType) CriteriaEvaluator.Evaluate(Int32, Int32, EvaluationCriteria, ActorType, EvaluationType) CriteriaEvaluator.EvaluateLong(Int32, Int32, EvaluationCriteria) CriteriaEvaluator.EvaluateFloat(Int32, Int32, EvaluationCriteria) CriteriaEvaluator.EvaluateString(Int32, Int32, EvaluationCriteria) CriteriaEvaluator.EvaluateBool(Int32, Int32, EvaluationCriteria) CriteriaEvaluator.EvaluateManyLong(Int32, List<Int32>, EvaluationCriteria) CriteriaEvaluator.EvaluateManyFloat(Int32, List<Int32>, EvaluationCriteria) CriteriaEvaluator.EvaluateManyString(Int32, List<Int32>, EvaluationCriteria) CriteriaEvaluator.EvaluateManyBool(Int32, List<Int32>, EvaluationCriteria) CriteriaEvaluator.CompareValues<T>(T, T, ComparisonType, EvaluationDataType) Namespace : PlayGen.SUGAR.Server.Core.Controllers Assembly : PlayGen.SUGAR.Server.Core.dll Syntax public class LeaderboardController : CriteriaEvaluator Constructors LeaderboardController(ILogger<LeaderboardController>, ILogger<EvaluationDataController>, LeaderboardController, RelationshipController, ActorController, GroupController, UserController, SUGARContextFactory) Declaration public LeaderboardController(ILogger<LeaderboardController> logger, ILogger<EvaluationDataController> evaluationDataLogger, LeaderboardController leaderboardDbController, RelationshipController relationshipCoreController, ActorController actorController, GroupController groupController, UserController userController, SUGARContextFactory contextFactory) Parameters Type Name Description ILogger < LeaderboardController > logger ILogger < EvaluationDataController > evaluationDataLogger LeaderboardController leaderboardDbController RelationshipController relationshipCoreController ActorController actorController GroupController groupController UserController userController SUGARContextFactory contextFactory Fields ActorController Declaration protected readonly ActorController ActorController Field Value Type Description ActorController GroupController Declaration protected readonly GroupController GroupController Field Value Type Description GroupController UserController Declaration protected readonly UserController UserController Field Value Type Description UserController Methods Create(Leaderboard) Declaration public Leaderboard Create(Leaderboard leaderboard) Parameters Type Name Description Leaderboard leaderboard Returns Type Description Leaderboard Delete(String, Int32) Declaration public void Delete(string token, int gameId) Parameters Type Name Description System.String token System.Int32 gameId EvaluateCount(EvaluationDataController, List<Actor>, Leaderboard, StandingsRequest) Declaration protected List<StandingsResponse> EvaluateCount(EvaluationDataController evaluationDataController, List<Actor> actors, Leaderboard leaderboard, StandingsRequest request) Parameters Type Name Description EvaluationDataController evaluationDataController List < Actor > actors Leaderboard leaderboard StandingsRequest request Returns Type Description List < StandingsResponse > EvaluateCumulative(EvaluationDataController, List<Actor>, Leaderboard, StandingsRequest) Declaration protected List<StandingsResponse> EvaluateCumulative(EvaluationDataController evaluationDataController, List<Actor> actors, Leaderboard leaderboard, StandingsRequest request) Parameters Type Name Description EvaluationDataController evaluationDataController List < Actor > actors Leaderboard leaderboard StandingsRequest request Returns Type Description List < StandingsResponse > EvaluateEarliest(EvaluationDataController, List<Actor>, Leaderboard, StandingsRequest) Declaration protected List<StandingsResponse> EvaluateEarliest(EvaluationDataController evaluationDataController, List<Actor> actors, Leaderboard leaderboard, StandingsRequest request) Parameters Type Name Description EvaluationDataController evaluationDataController List < Actor > actors Leaderboard leaderboard StandingsRequest request Returns Type Description List < StandingsResponse > EvaluateHighest(EvaluationDataController, List<Actor>, Leaderboard, StandingsRequest) Declaration protected List<StandingsResponse> EvaluateHighest(EvaluationDataController evaluationDataController, List<Actor> actors, Leaderboard leaderboard, StandingsRequest request) Parameters Type Name Description EvaluationDataController evaluationDataController List < Actor > actors Leaderboard leaderboard StandingsRequest request Returns Type Description List < StandingsResponse > EvaluateLatest(EvaluationDataController, List<Actor>, Leaderboard, StandingsRequest) Declaration protected List<StandingsResponse> EvaluateLatest(EvaluationDataController evaluationDataController, List<Actor> actors, Leaderboard leaderboard, StandingsRequest request) Parameters Type Name Description EvaluationDataController evaluationDataController List < Actor > actors Leaderboard leaderboard StandingsRequest request Returns Type Description List < StandingsResponse > EvaluateLowest(EvaluationDataController, List<Actor>, Leaderboard, StandingsRequest) Declaration protected List<StandingsResponse> EvaluateLowest(EvaluationDataController evaluationDataController, List<Actor> actors, Leaderboard leaderboard, StandingsRequest request) Parameters Type Name Description EvaluationDataController evaluationDataController List < Actor > actors Leaderboard leaderboard StandingsRequest request Returns Type Description List < StandingsResponse > FilterResults(List<StandingsResponse>, Int32, Int32, LeaderboardFilterType, Nullable<Int32>) Declaration protected List<StandingsResponse> FilterResults(List<StandingsResponse> typeResults, int limit, int offset, LeaderboardFilterType filter, int? actorId) Parameters Type Name Description List < StandingsResponse > typeResults System.Int32 limit System.Int32 offset LeaderboardFilterType filter System.Nullable < System.Int32 > actorId Returns Type Description List < StandingsResponse > GatherStandings(Leaderboard, StandingsRequest) Declaration protected List<StandingsResponse> GatherStandings(Leaderboard leaderboard, StandingsRequest request) Parameters Type Name Description Leaderboard leaderboard StandingsRequest request Returns Type Description List < StandingsResponse > Get(Int32) Declaration public List<Leaderboard> Get(int gameId) Parameters Type Name Description System.Int32 gameId Returns Type Description List < Leaderboard > Get(String, Int32) Declaration public Leaderboard Get(string token, int gameId) Parameters Type Name Description System.String token System.Int32 gameId Returns Type Description Leaderboard GetActors(EvaluationDataController, Leaderboard, StandingsRequest) Declaration protected List<Actor> GetActors(EvaluationDataController evaluationDataController, Leaderboard leaderboard, StandingsRequest request) Parameters Type Name Description EvaluationDataController evaluationDataController Leaderboard leaderboard StandingsRequest request Returns Type Description List < Actor > GetName(Int32, ActorType) Declaration protected string GetName(int id, ActorType actorType) Parameters Type Name Description System.Int32 id ActorType actorType Returns Type Description System.String GetStandings(Leaderboard, StandingsRequest) Declaration public List<StandingsResponse> GetStandings(Leaderboard leaderboard, StandingsRequest request) Parameters Type Name Description Leaderboard leaderboard StandingsRequest request Returns Type Description List < StandingsResponse > Update(Leaderboard) Declaration public void Update(Leaderboard leaderboard) Parameters Type Name Description Leaderboard leaderboard"
  },
  "api/PlayGen.SUGAR.Server.Core.Controllers.MatchController.html": {
    "href": "api/PlayGen.SUGAR.Server.Core.Controllers.MatchController.html",
    "title": "Class MatchController | SUGAR",
    "keywords": "Class MatchController Inheritance System.Object MatchController Namespace : PlayGen.SUGAR.Server.Core.Controllers Assembly : PlayGen.SUGAR.Server.Core.dll Syntax public class MatchController : object Constructors MatchController(ILogger<MatchController>, ILogger<EvaluationDataController>, SUGARContextFactory, MatchController) Declaration public MatchController(ILogger<MatchController> logger, ILogger<EvaluationDataController> evaluationDataLogger, SUGARContextFactory contextFactory, MatchController matchDbController) Parameters Type Name Description ILogger < MatchController > logger ILogger < EvaluationDataController > evaluationDataLogger SUGARContextFactory contextFactory MatchController matchDbController Methods AddData(EvaluationData) Declaration public EvaluationData AddData(EvaluationData newData) Parameters Type Name Description EvaluationData newData Returns Type Description EvaluationData Create(Int32, Int32) Declaration public Match Create(int gameId, int creatorId) Parameters Type Name Description System.Int32 gameId System.Int32 creatorId Returns Type Description Match End(Int32) Declaration public Match End(int matchId) Parameters Type Name Description System.Int32 matchId Returns Type Description Match Get(Int32) Declaration public Match Get(int matchId) Parameters Type Name Description System.Int32 matchId Returns Type Description Match GetByCreator(Int32) Declaration public List<Match> GetByCreator(int creatorId) Parameters Type Name Description System.Int32 creatorId Returns Type Description List < Match > GetByCreator(Int32, Nullable<DateTime>, Nullable<DateTime>) Declaration public List<Match> GetByCreator(int creatorId, DateTime? start, DateTime? end) Parameters Type Name Description System.Int32 creatorId System.Nullable < DateTime > start System.Nullable < DateTime > end Returns Type Description List < Match > GetByGame(Int32) Declaration public List<Match> GetByGame(int gameId) Parameters Type Name Description System.Int32 gameId Returns Type Description List < Match > GetByGame(Int32, Nullable<DateTime>, Nullable<DateTime>) Declaration public List<Match> GetByGame(int gameId, DateTime? start, DateTime? end) Parameters Type Name Description System.Int32 gameId System.Nullable < DateTime > start System.Nullable < DateTime > end Returns Type Description List < Match > GetByGameAndCreator(Int32, Int32) Declaration public List<Match> GetByGameAndCreator(int gameId, int creatorId) Parameters Type Name Description System.Int32 gameId System.Int32 creatorId Returns Type Description List < Match > GetByGameAndCreator(Int32, Int32, Nullable<DateTime>, Nullable<DateTime>) Declaration public List<Match> GetByGameAndCreator(int gameId, int creatorId, DateTime? start, DateTime? end) Parameters Type Name Description System.Int32 gameId System.Int32 creatorId System.Nullable < DateTime > start System.Nullable < DateTime > end Returns Type Description List < Match > GetByTime(Nullable<DateTime>, Nullable<DateTime>) Declaration public List<Match> GetByTime(DateTime? start, DateTime? end) Parameters Type Name Description System.Nullable < DateTime > start System.Nullable < DateTime > end Returns Type Description List < Match > GetData(Int32, String[]) Declaration public List<EvaluationData> GetData(int matchId, string[] keys = null) Parameters Type Name Description System.Int32 matchId System.String [] keys Returns Type Description List < EvaluationData > Start(Int32) Declaration public Match Start(int matchId) Parameters Type Name Description System.Int32 matchId Returns Type Description Match"
  },
  "api/PlayGen.SUGAR.Server.Core.EvaluationEvents.CriteriaEvaluator.html": {
    "href": "api/PlayGen.SUGAR.Server.Core.EvaluationEvents.CriteriaEvaluator.html",
    "title": "Class CriteriaEvaluator | SUGAR",
    "keywords": "Class CriteriaEvaluator Evaluates evaluation criteria. Inheritance System.Object CriteriaEvaluator EvaluationController LeaderboardController RewardController Namespace : PlayGen.SUGAR.Server.Core.EvaluationEvents Assembly : PlayGen.SUGAR.Server.Core.dll Syntax public class CriteriaEvaluator : object Constructors CriteriaEvaluator(ILogger<EvaluationDataController>, SUGARContextFactory, RelationshipController) Declaration public CriteriaEvaluator(ILogger<EvaluationDataController> evaluationDataLogger, SUGARContextFactory contextFactory, RelationshipController relationshipCoreController) Parameters Type Name Description ILogger < EvaluationDataController > evaluationDataLogger SUGARContextFactory contextFactory RelationshipController relationshipCoreController Fields ContextFactory Declaration protected readonly SUGARContextFactory ContextFactory Field Value Type Description SUGARContextFactory EvaluationDataLogger Declaration protected ILogger<EvaluationDataController> EvaluationDataLogger Field Value Type Description ILogger < EvaluationDataController > RelationshipCoreController Declaration protected readonly RelationshipController RelationshipCoreController Field Value Type Description RelationshipController Methods CompareValues<T>(T, T, ComparisonType, EvaluationDataType) Declaration protected static float CompareValues<T>(T value, T expected, ComparisonType comparisonType, EvaluationDataType dataType) where T : IComparable Parameters Type Name Description T value T expected ComparisonType comparisonType EvaluationDataType dataType Returns Type Description System.Single Type Parameters Name Description T Evaluate(Int32, Int32, EvaluationCriteria, ActorType, EvaluationType) Declaration protected float Evaluate(int gameId, int actorId, EvaluationCriteria completionCriteria, ActorType actorType, EvaluationType evaluationType) Parameters Type Name Description System.Int32 gameId System.Int32 actorId EvaluationCriteria completionCriteria ActorType actorType EvaluationType evaluationType Returns Type Description System.Single EvaluateBool(Int32, Int32, EvaluationCriteria) Declaration protected float EvaluateBool(int gameId, int actorId, EvaluationCriteria completionCriteria) Parameters Type Name Description System.Int32 gameId System.Int32 actorId EvaluationCriteria completionCriteria Returns Type Description System.Single EvaluateFloat(Int32, Int32, EvaluationCriteria) Declaration protected float EvaluateFloat(int gameId, int actorId, EvaluationCriteria completionCriteria) Parameters Type Name Description System.Int32 gameId System.Int32 actorId EvaluationCriteria completionCriteria Returns Type Description System.Single EvaluateLong(Int32, Int32, EvaluationCriteria) Declaration protected float EvaluateLong(int gameId, int actorId, EvaluationCriteria completionCriteria) Parameters Type Name Description System.Int32 gameId System.Int32 actorId EvaluationCriteria completionCriteria Returns Type Description System.Single EvaluateManyBool(Int32, List<Int32>, EvaluationCriteria) Declaration protected float EvaluateManyBool(int gameId, List<int> actors, EvaluationCriteria completionCriteria) Parameters Type Name Description System.Int32 gameId List < System.Int32 > actors EvaluationCriteria completionCriteria Returns Type Description System.Single EvaluateManyFloat(Int32, List<Int32>, EvaluationCriteria) Declaration protected float EvaluateManyFloat(int gameId, List<int> actors, EvaluationCriteria completionCriteria) Parameters Type Name Description System.Int32 gameId List < System.Int32 > actors EvaluationCriteria completionCriteria Returns Type Description System.Single EvaluateManyLong(Int32, List<Int32>, EvaluationCriteria) Declaration protected float EvaluateManyLong(int gameId, List<int> actors, EvaluationCriteria completionCriteria) Parameters Type Name Description System.Int32 gameId List < System.Int32 > actors EvaluationCriteria completionCriteria Returns Type Description System.Single EvaluateManyString(Int32, List<Int32>, EvaluationCriteria) Declaration protected float EvaluateManyString(int gameId, List<int> actors, EvaluationCriteria completionCriteria) Parameters Type Name Description System.Int32 gameId List < System.Int32 > actors EvaluationCriteria completionCriteria Returns Type Description System.Single EvaluateString(Int32, Int32, EvaluationCriteria) Declaration protected float EvaluateString(int gameId, int actorId, EvaluationCriteria completionCriteria) Parameters Type Name Description System.Int32 gameId System.Int32 actorId EvaluationCriteria completionCriteria Returns Type Description System.Single IsCriteriaSatisified(Int32, Int32, List<EvaluationCriteria>, ActorType, EvaluationType) Declaration public float IsCriteriaSatisified(int gameId, int actorId, List<EvaluationCriteria> completionCriterias, ActorType actorType, EvaluationType evaluationType) Parameters Type Name Description System.Int32 gameId System.Int32 actorId List < EvaluationCriteria > completionCriterias ActorType actorType EvaluationType evaluationType Returns Type Description System.Single"
  },
  "api/PlayGen.SUGAR.Server.Core.EvaluationEvents.EvaluationDataMapper.html": {
    "href": "api/PlayGen.SUGAR.Server.Core.EvaluationEvents.EvaluationDataMapper.html",
    "title": "Class EvaluationDataMapper | SUGAR",
    "keywords": "Class EvaluationDataMapper Mappings of game data keys to evaluations with criteria that make use of the specific keys. Inheritance System.Object EvaluationDataMapper Namespace : PlayGen.SUGAR.Server.Core.EvaluationEvents Assembly : PlayGen.SUGAR.Server.Core.dll Syntax public class EvaluationDataMapper : object Methods CreateMapping(Evaluation) Declaration public void CreateMapping(Evaluation evaluation) Parameters Type Name Description Evaluation evaluation CreateMappings(List<Evaluation>) Declaration public void CreateMappings(List<Evaluation> evaluations) Parameters Type Name Description List < Evaluation > evaluations RemoveMapping(Evaluation) Declaration public void RemoveMapping(Evaluation evaluation) Parameters Type Name Description Evaluation evaluation TryGetRelated(EvaluationData, out ICollection<Evaluation>) Declaration public bool TryGetRelated(EvaluationData evaluationData, out ICollection<Evaluation> evaluations) Parameters Type Name Description EvaluationData evaluationData ICollection < Evaluation > evaluations Returns Type Description System.Boolean"
  },
  "unity-client/features/index.html": {
    "href": "unity-client/features/index.html",
    "title": "Features | SUGAR",
    "keywords": "Features This section covers various features of the SUGAR Unity Client."
  },
  "unity-client/features/seeding.html": {
    "href": "unity-client/features/seeding.html",
    "title": "Seeding | SUGAR",
    "keywords": "Seeding Name : The name of the game you are adding to the SUGAR system. Please note that this name must be unique to the host. Achievements/Skills Name : The name of the achievement/skill you are creating. Please note that this name must be unique to the game. Description : The description of the achievement/skill you are creating. Token : The unique identification token for the achievement/skill you are creating. Please note that this name must be unique to the game. ActorType : The type of Actor which this achievement/skill applies to. Evaluation Criteria EvaluationDataKey : The key of the data which is being used for this criteria. EvaluationDataCategory : The category of data which the criteria is being checked against. ComparisonType : What the current value has to be compared to the target value in order for this criteria to be completed. CriteriaQueryType : The data set from which the current value will be gathered. EvaluationDataType : The type of data which the criteria is being checked for. Scope : The range of actors from which the data will be collected for comparision. Value : The target value of this criteria. Rewards EvaluationDataKey : The key of the data which will be provided to the actor upon completion of all criteria. EvaluationDataCategory : The category of data which will be provided to the actor upon completion of all criteria. EvaluationDataType : The type of data which will be provided to the actor upon completion of all criteria. Value : The value which will be provided to the actor upon completion of all criteria. Leaderboards Token : The unique identification token for the leaderboard you are creating. Please note that this name must be unique to the game. Name : The name of the leaderboard you are creating. Please note that this name must be unique to the game. Key : The key of the data which will be used to form the leaderboard. ActorType : The type of Actor which this leaderboard applies to. EvaluationDataCategory : The category of data which will be used for this leaderboard. EvaluationDataType : The type of data which will be used for this leaderboard. CriteriaScope : The range of actors from which the data will be collected. LeaderboardType : How collected data will be sorted for this leaderboard. Enums ActorType Undefined : Intended use not defined and as such means it applies to both Users and Groups. User : Intended for use for Users only. Group : Intended for use for Groups only. ComparisonType Equals : The current value and target value must exactly match. Not Equal : The current value and target value do not exactly match. Greater : The current value is greater in value than the target value (Long and Float only). Greater or Equal : The current value is greater or exactly equal in value to the target value (Long and Float only). Lesser : The current value is lower in value than the target value (Long and Float only). Lesser or Equal : The current value is lower or exactly equal in value to the target value (Long and Float only). CriteriaScope Actor : Data collected will have been submitted by the actor themselves. Related Users : Data collected will have been submitted by the actor and their friends (if the actor is a User) or their members (if the actor is a Group). ActorType cannot also be Undefined. Related Groups : Data collected will have been submitted by the actor and their alliances. ActorType must be Group. Related Group Users : Data collected will have been submitted by their members and the members of their alliances. ActorType must be Group. CriteriaQueryType Any : Any collected data will be compared against the value set in the criteria. Can only be used when Scope is set to Actor. Sum : The sum of all collected data will be compared against the value set in the criteria. Can only be used when EvaluationDataType is set to Long or Float. Latest : The latest piece of data will be compared against the value set in the criteria. Can only be used when Scope is set to Actor. EvaluationDataCategory Game Data : The data has been stored as a piece of Game Data, which allows for multiple values for the same key and all EvaluationDataTypes. Resource : The data has been stored as a Resource, which allows for only one value per key and has its value stored as a Long. Skill : The data has been stored as a Skill, marking the completion of all criteria for a Skill. Achievement : The data has been stored as a Achievement, marking the completion of all criteria for a Achievement. Match Data : The data has been stored as a piece of Match Data, which allows for multiple values for the same key in relation to a Match and all EvaluationDataTypes. EvaluationDataType String : The data has been stored and can be parsed as a String. Long : The data has been stored and can be parsed as a Long. Float : The data has been stored and can be parsed as a Float. Boolean : The data has been stored and can be parsed as a Boolean. LeaderboardType Highest : The leaderboard will be sorted from highest single value to lowest (Long and Float only). Lowest : The leaderboard will be sorted from lowest single value to highest (Long and Float only). Cumulative : The leaderboard will be sorted from highest combined value to lowest (Long and Float only). Count : The leaderboard will be sorted from the highest amount which the key has been recorded to the lowest (String and Boolean only). Earliest : The leaderboard will be sorted from the earliest time the key was recorded to the latest (String and Boolean only). Latest : The leaderboard will be sorted from the latest time the key was recorded to the earliest (String and Boolean only)."
  },
  "unity-client/features/savingdata.html": {
    "href": "unity-client/features/savingdata.html",
    "title": "Saving Data | SUGAR",
    "keywords": "Saving Data SUGAR Unity includes a class which handles saving and retrieving of data, similar to the way in which Player Prefs are set, retrieved and deleted. The class uses the following prefix: SUGAR_PREFS_ followed by the key provided. Current Usage Currently the saving and retrieving of data is used for storing player login tokens, allowing for players login details to be saved so they can log in without entering details every time"
  },
  "api/PlayGen.SUGAR.Server.Model.ActorRole.html": {
    "href": "api/PlayGen.SUGAR.Server.Model.ActorRole.html",
    "title": "Class ActorRole | SUGAR",
    "keywords": "Class ActorRole Inheritance System.Object ActorRole Namespace : PlayGen.SUGAR.Server.Model Assembly : PlayGen.SUGAR.Server.Model.dll Syntax public class ActorRole : object Properties Actor Declaration public Actor Actor { get; set; } Property Value Type Description Actor ActorId Declaration public int ActorId { get; set; } Property Value Type Description System.Int32 EntityId Declaration public int EntityId { get; set; } Property Value Type Description System.Int32 Id Declaration public int Id { get; set; } Property Value Type Description System.Int32 Role Declaration public Role Role { get; set; } Property Value Type Description Role RoleId Declaration public int RoleId { get; set; } Property Value Type Description System.Int32"
  },
  "api/PlayGen.SUGAR.Server.Authorization.AuthorizationExtensions.html": {
    "href": "api/PlayGen.SUGAR.Server.Authorization.AuthorizationExtensions.html",
    "title": "Class AuthorizationExtensions | SUGAR",
    "keywords": "Class AuthorizationExtensions Inheritance System.Object AuthorizationExtensions Namespace : PlayGen.SUGAR.Server.Authorization Assembly : PlayGen.SUGAR.Server.Authorization.dll Syntax public static class AuthorizationExtensions : object Methods Key(ClaimScope) Declaration public static string Key(this ClaimScope scope) Parameters Type Name Description ClaimScope scope Returns Type Description System.String ScopeItems(HttpContext, ClaimScope) Declaration public static IAuthorizationRequirement ScopeItems(this HttpContext context, ClaimScope scope) Parameters Type Name Description HttpContext context ClaimScope scope Returns Type Description IAuthorizationRequirement"
  },
  "api/PlayGen.SUGAR.Server.Core.Controllers.EvaluationDataController.html": {
    "href": "api/PlayGen.SUGAR.Server.Core.Controllers.EvaluationDataController.html",
    "title": "Class EvaluationDataController | SUGAR",
    "keywords": "Class EvaluationDataController Inheritance System.Object EvaluationDataController Namespace : PlayGen.SUGAR.Server.Core.Controllers Assembly : PlayGen.SUGAR.Server.Core.dll Syntax public class EvaluationDataController : object Constructors EvaluationDataController(ILogger<EvaluationDataController>, SUGARContextFactory, EvaluationDataCategory) Declaration public EvaluationDataController(ILogger<EvaluationDataController> logger, SUGARContextFactory contextFactory, EvaluationDataCategory category) Parameters Type Name Description ILogger < EvaluationDataController > logger SUGARContextFactory contextFactory EvaluationDataCategory category Fields EvaluationDataAddedEvent Declaration public static Action<EvaluationData> EvaluationDataAddedEvent Field Value Type Description Action < EvaluationData > Methods Add(List<EvaluationData>) Declaration public void Add(List<EvaluationData> datas) Parameters Type Name Description List < EvaluationData > datas Add(EvaluationData) Declaration public EvaluationData Add(EvaluationData newData) Parameters Type Name Description EvaluationData newData Returns Type Description EvaluationData CountKeys(Int32, Int32, String, EvaluationDataType, Nullable<DateTime>, Nullable<DateTime>) Declaration public int CountKeys(int gameId, int actorId, string key, EvaluationDataType evaluationDataType, DateTime? start = null, DateTime? end = null) Parameters Type Name Description System.Int32 gameId System.Int32 actorId System.String key EvaluationDataType evaluationDataType System.Nullable < DateTime > start System.Nullable < DateTime > end Returns Type Description System.Int32 Get(ICollection<Int32>) Declaration public List<EvaluationData> Get(ICollection<int> ids) Parameters Type Name Description ICollection < System.Int32 > ids Returns Type Description List < EvaluationData > Get(Int32, Int32, Nullable<Int32>, String[]) Declaration public List<EvaluationData> Get(int gameId, int actorId, int? entityId, string[] keys = null) Parameters Type Name Description System.Int32 gameId System.Int32 actorId System.Nullable < System.Int32 > entityId System.String [] keys Returns Type Description List < EvaluationData > Get(Int32, Int32, String, EvaluationDataType, LeaderboardType) Declaration public EvaluationData Get(int gameId, int actorId, string key, EvaluationDataType dataType, LeaderboardType sortType) Parameters Type Name Description System.Int32 gameId System.Int32 actorId System.String key EvaluationDataType dataType LeaderboardType sortType Returns Type Description EvaluationData Get(Int32, Int32, String[]) Declaration public List<EvaluationData> Get(int gameId, int actorId, string[] keys = null) Parameters Type Name Description System.Int32 gameId System.Int32 actorId System.String [] keys Returns Type Description List < EvaluationData > Get(Int32, String[]) Declaration public List<EvaluationData> Get(int entityId, string[] keys = null) Parameters Type Name Description System.Int32 entityId System.String [] keys Returns Type Description List < EvaluationData > GetActorData(Int32) Declaration public List<EvaluationData> GetActorData(int actorId) Parameters Type Name Description System.Int32 actorId Returns Type Description List < EvaluationData > GetGameActors(Int32) Declaration public List<int> GetGameActors(int gameId) Parameters Type Name Description System.Int32 gameId Returns Type Description List < System.Int32 > GetGameKeyActors(Int32, String, EvaluationDataType, Nullable<DateTime>, Nullable<DateTime>) Declaration public List<int> GetGameKeyActors(int gameId, string key, EvaluationDataType evaluationDataType, DateTime? start = null, DateTime? end = null) Parameters Type Name Description System.Int32 gameId System.String key EvaluationDataType evaluationDataType System.Nullable < DateTime > start System.Nullable < DateTime > end Returns Type Description List < System.Int32 > GetGameKeys(Int32) Declaration public List<KeyValuePair<string, EvaluationDataType>> GetGameKeys(int gameId) Parameters Type Name Description System.Int32 gameId Returns Type Description List < KeyValuePair < System.String , EvaluationDataType >> IsValid(EvaluationData, out String) Declaration public static bool IsValid(EvaluationData data, out string failure) Parameters Type Name Description EvaluationData data System.String failure Returns Type Description System.Boolean KeyExists(Int32, Int32, String, EvaluationDataType, Nullable<DateTime>, Nullable<DateTime>) Declaration public bool KeyExists(int gameId, int actorId, string key, EvaluationDataType evaluationDataType, DateTime? start = null, DateTime? end = null) Parameters Type Name Description System.Int32 gameId System.Int32 actorId System.String key EvaluationDataType evaluationDataType System.Nullable < DateTime > start System.Nullable < DateTime > end Returns Type Description System.Boolean List(Int32, Int32, String, EvaluationDataType, Nullable<DateTime>, Nullable<DateTime>) Declaration public List<EvaluationData> List(int gameId, int actorId, string key, EvaluationDataType evaluationDataType, DateTime? start = null, DateTime? end = null) Parameters Type Name Description System.Int32 gameId System.Int32 actorId System.String key EvaluationDataType evaluationDataType System.Nullable < DateTime > start System.Nullable < DateTime > end Returns Type Description List < EvaluationData > ParseCheck(EvaluationData) Declaration protected static bool ParseCheck(EvaluationData data) Parameters Type Name Description EvaluationData data Returns Type Description System.Boolean SumFloat(Int32, Int32, String, Nullable<DateTime>, Nullable<DateTime>) Declaration public float SumFloat(int gameId, int actorId, string key, DateTime? start = null, DateTime? end = null) Parameters Type Name Description System.Int32 gameId System.Int32 actorId System.String key System.Nullable < DateTime > start System.Nullable < DateTime > end Returns Type Description System.Single SumLong(Int32, Int32, String, Nullable<DateTime>, Nullable<DateTime>) Declaration public long SumLong(int gameId, int actorId, string key, DateTime? start = null, DateTime? end = null) Parameters Type Name Description System.Int32 gameId System.Int32 actorId System.String key System.Nullable < DateTime > start System.Nullable < DateTime > end Returns Type Description System.Int64 TryGetEarliest(Int32, Int32, String, out EvaluationData, EvaluationDataType, Nullable<DateTime>, Nullable<DateTime>) Declaration public bool TryGetEarliest(int gameId, int actorId, string key, out EvaluationData earliest, EvaluationDataType evaluationDataType, DateTime? start = null, DateTime? end = null) Parameters Type Name Description System.Int32 gameId System.Int32 actorId System.String key EvaluationData earliest EvaluationDataType evaluationDataType System.Nullable < DateTime > start System.Nullable < DateTime > end Returns Type Description System.Boolean TryGetLatest(Int32, Int32, String, out EvaluationData, EvaluationDataType, Nullable<DateTime>, Nullable<DateTime>) Declaration public bool TryGetLatest(int gameId, int actorId, string key, out EvaluationData latest, EvaluationDataType evaluationDataType, DateTime? start = null, DateTime? end = null) Parameters Type Name Description System.Int32 gameId System.Int32 actorId System.String key EvaluationData latest EvaluationDataType evaluationDataType System.Nullable < DateTime > start System.Nullable < DateTime > end Returns Type Description System.Boolean TryGetMax(Int32, Int32, String, out EvaluationData, EvaluationDataType, Nullable<DateTime>, Nullable<DateTime>) Declaration public bool TryGetMax(int gameId, int actorId, string key, out EvaluationData value, EvaluationDataType evaluationDataType, DateTime? start = null, DateTime? end = null) Parameters Type Name Description System.Int32 gameId System.Int32 actorId System.String key EvaluationData value EvaluationDataType evaluationDataType System.Nullable < DateTime > start System.Nullable < DateTime > end Returns Type Description System.Boolean TryGetMin(Int32, Int32, String, out EvaluationData, EvaluationDataType, Nullable<DateTime>, Nullable<DateTime>) Declaration public bool TryGetMin(int gameId, int actorId, string key, out EvaluationData value, EvaluationDataType evaluationDataType, DateTime? start = null, DateTime? end = null) Parameters Type Name Description System.Int32 gameId System.Int32 actorId System.String key EvaluationData value EvaluationDataType evaluationDataType System.Nullable < DateTime > start System.Nullable < DateTime > end Returns Type Description System.Boolean Update(EvaluationData) Declaration public EvaluationData Update(EvaluationData data) Parameters Type Name Description EvaluationData data Returns Type Description EvaluationData ValidateData(EvaluationData) Declaration protected void ValidateData(EvaluationData data) Parameters Type Name Description EvaluationData data"
  },
  "api/PlayGen.SUGAR.Server.Core.Controllers.GameController.html": {
    "href": "api/PlayGen.SUGAR.Server.Core.Controllers.GameController.html",
    "title": "Class GameController | SUGAR",
    "keywords": "Class GameController Inheritance System.Object GameController Namespace : PlayGen.SUGAR.Server.Core.Controllers Assembly : PlayGen.SUGAR.Server.Core.dll Syntax public class GameController : object Constructors GameController(ILogger<GameController>, GameController, ActorClaimController, ActorRoleController) Declaration public GameController(ILogger<GameController> logger, GameController gameDbController, ActorClaimController actorClaimController, ActorRoleController actorRoleController) Parameters Type Name Description ILogger < GameController > logger GameController gameDbController ActorClaimController actorClaimController ActorRoleController actorRoleController Methods Create(Game, Int32, SUGARContext) Declaration public Game Create(Game newGame, int creatorId, SUGARContext context = null) Parameters Type Name Description Game newGame System.Int32 creatorId SUGARContext context Returns Type Description Game Delete(Int32) Declaration public void Delete(int id) Parameters Type Name Description System.Int32 id Get() Declaration public List<Game> Get() Returns Type Description List < Game > Get(Int32) Declaration public Game Get(int id) Parameters Type Name Description System.Int32 id Returns Type Description Game GetByPermissions(Int32) Declaration public List<Game> GetByPermissions(int actorId) Parameters Type Name Description System.Int32 actorId Returns Type Description List < Game > Search(String) Declaration public List<Game> Search(string name) Parameters Type Name Description System.String name Returns Type Description List < Game > Update(Game) Declaration public void Update(Game game) Parameters Type Name Description Game game Events GameDeletedEvent Declaration public static event Action<int> GameDeletedEvent Event Type Type Description Action < System.Int32 >"
  },
  "api/PlayGen.SUGAR.Server.Core.Controllers.html": {
    "href": "api/PlayGen.SUGAR.Server.Core.Controllers.html",
    "title": "Namespace PlayGen.SUGAR.Server.Core.Controllers | SUGAR",
    "keywords": "Namespace PlayGen.SUGAR.Server.Core.Controllers Classes AccountController AccountSourceController ActorClaimController ActorController ActorDataController ActorRoleController EvaluationController EvaluationDataController GameController GameDataController GroupController LeaderboardController MatchController RelationshipController ResourceController RewardController RoleClaimController RoleController UserController"
  },
  "api/PlayGen.SUGAR.Server.Core.Controllers.GroupController.html": {
    "href": "api/PlayGen.SUGAR.Server.Core.Controllers.GroupController.html",
    "title": "Class GroupController | SUGAR",
    "keywords": "Class GroupController Inheritance System.Object ActorController GroupController Inherited Members ActorController.ActorDeletedEvent ActorController.TriggerDeletedEvent(Int32) Namespace : PlayGen.SUGAR.Server.Core.Controllers Assembly : PlayGen.SUGAR.Server.Core.dll Syntax public class GroupController : ActorController Constructors GroupController(ILogger<GroupController>, GroupController, ActorController, ActorClaimController, ActorRoleController, RelationshipController) Declaration public GroupController(ILogger<GroupController> logger, GroupController groupDbController, ActorController actorDbController, ActorClaimController actorClaimController, ActorRoleController actorRoleController, RelationshipController relationshipController) Parameters Type Name Description ILogger < GroupController > logger GroupController groupDbController ActorController actorDbController ActorClaimController actorClaimController ActorRoleController actorRoleController RelationshipController relationshipController Methods Create(Group, Int32) Declaration public Group Create(Group newGroup, int creatorId) Parameters Type Name Description Group newGroup System.Int32 creatorId Returns Type Description Group Delete(Int32) Declaration public void Delete(int id) Parameters Type Name Description System.Int32 id Get() Declaration public List<Group> Get() Returns Type Description List < Group > Get(Int32) Declaration public Group Get(int id) Parameters Type Name Description System.Int32 id Returns Type Description Group GetByPermissions(Int32) Declaration public List<Group> GetByPermissions(int actorId) Parameters Type Name Description System.Int32 actorId Returns Type Description List < Group > Search(String) Declaration public List<Group> Search(string name) Parameters Type Name Description System.String name Returns Type Description List < Group > Update(Group) Declaration public void Update(Group group) Parameters Type Name Description Group group"
  },
  "api/PlayGen.SUGAR.Server.Core.EvaluationEvents.EvaluationProgress.html": {
    "href": "api/PlayGen.SUGAR.Server.Core.EvaluationEvents.EvaluationProgress.html",
    "title": "Class EvaluationProgress | SUGAR",
    "keywords": "Class EvaluationProgress Inheritance System.Object EvaluationProgress Namespace : PlayGen.SUGAR.Server.Core.EvaluationEvents Assembly : PlayGen.SUGAR.Server.Core.dll Syntax public class EvaluationProgress : object Properties Actor Declaration public Actor Actor { get; set; } Property Value Type Description Actor Evaluation Declaration public Evaluation Evaluation { get; set; } Property Value Type Description Evaluation Progress Declaration public float Progress { get; set; } Property Value Type Description System.Single"
  },
  "api/PlayGen.SUGAR.Server.Core.EvaluationEvents.EvaluationTracker.html": {
    "href": "api/PlayGen.SUGAR.Server.Core.EvaluationEvents.EvaluationTracker.html",
    "title": "Class EvaluationTracker | SUGAR",
    "keywords": "Class EvaluationTracker Inheritance System.Object EvaluationTracker Namespace : PlayGen.SUGAR.Server.Core.EvaluationEvents Assembly : PlayGen.SUGAR.Server.Core.dll Syntax public class EvaluationTracker : IDisposable Constructors EvaluationTracker(ProgressEvaluator, EvaluationController, SessionTracker) Declaration public EvaluationTracker(ProgressEvaluator progressEvaluator, EvaluationController evaluationController, SessionTracker sessionTracker) Parameters Type Name Description ProgressEvaluator progressEvaluator EvaluationController evaluationController SessionTracker sessionTracker Methods Dispose() Declaration public void Dispose() Finalize() Declaration protected void Finalize() GetPendingNotifications(Int32, Int32) Declaration public ConcurrentDictionary<int, ConcurrentDictionary<Evaluation, float>> GetPendingNotifications(int gameId, int actorId) Parameters Type Name Description System.Int32 gameId System.Int32 actorId Returns Type Description ConcurrentDictionary < System.Int32 , ConcurrentDictionary < Evaluation , System.Single >> MapExistingEvaluations() Declaration public void MapExistingEvaluations()"
  },
  "api/PlayGen.SUGAR.Server.Core.Sessions.SessionTracker.html": {
    "href": "api/PlayGen.SUGAR.Server.Core.Sessions.SessionTracker.html",
    "title": "Class SessionTracker | SUGAR",
    "keywords": "Class SessionTracker Inheritance System.Object SessionTracker Namespace : PlayGen.SUGAR.Server.Core.Sessions Assembly : PlayGen.SUGAR.Server.Core.dll Syntax public class SessionTracker : IDisposable Constructors SessionTracker(ILogger<SessionTracker>, TimeSpan, TimeSpan) Declaration public SessionTracker(ILogger<SessionTracker> logger, TimeSpan sessionTimeout, TimeSpan timeoutCheckInterval) Parameters Type Name Description ILogger < SessionTracker > logger TimeSpan sessionTimeout TimeSpan timeoutCheckInterval Methods Dispose() Declaration public void Dispose() EndSession(Int64) Declaration public void EndSession(long sessionId) Parameters Type Name Description System.Int64 sessionId Finalize() Declaration protected void Finalize() GetByActor(Int32) Declaration public List<Session> GetByActor(int actorId) Parameters Type Name Description System.Int32 actorId Returns Type Description List < Session > GetByGames(List<Int32>) Declaration public List<Session> GetByGames(List<int> gameIds) Parameters Type Name Description List < System.Int32 > gameIds Returns Type Description List < Session > IsActive(Int64) Declaration public bool IsActive(long sessionId) Parameters Type Name Description System.Int64 sessionId Returns Type Description System.Boolean SetLastActive(Int64, DateTime) Declaration public void SetLastActive(long sessionId, DateTime lastActive) Parameters Type Name Description System.Int64 sessionId DateTime lastActive StartSession(Int32, Int32) Declaration public Session StartSession(int gameId, int actorId) Parameters Type Name Description System.Int32 gameId System.Int32 actorId Returns Type Description Session Events SessionEndedEvent Declaration public event Action<Session> SessionEndedEvent Event Type Type Description Action < Session > SessionStartedEvent Declaration public event Action<Session> SessionStartedEvent Event Type Type Description Action < Session >"
  },
  "api/PlayGen.SUGAR.Server.Core.Sessions.html": {
    "href": "api/PlayGen.SUGAR.Server.Core.Sessions.html",
    "title": "Namespace PlayGen.SUGAR.Server.Core.Sessions | SUGAR",
    "keywords": "Namespace PlayGen.SUGAR.Server.Core.Sessions Classes Session SessionTracker"
  },
  "api/PlayGen.SUGAR.Server.EntityFramework.Controllers.LeaderboardController.html": {
    "href": "api/PlayGen.SUGAR.Server.EntityFramework.Controllers.LeaderboardController.html",
    "title": "Class LeaderboardController | SUGAR",
    "keywords": "Class LeaderboardController Inheritance System.Object DbController LeaderboardController Inherited Members DbController.ContextFactory Namespace : PlayGen.SUGAR.Server.EntityFramework.Controllers Assembly : PlayGen.SUGAR.Server.EntityFramework.dll Syntax public class LeaderboardController : DbController Constructors LeaderboardController(SUGARContextFactory) Declaration public LeaderboardController(SUGARContextFactory contextFactory) Parameters Type Name Description SUGARContextFactory contextFactory Methods Create(Leaderboard) Declaration public Leaderboard Create(Leaderboard leaderboard) Parameters Type Name Description Leaderboard leaderboard Returns Type Description Leaderboard Delete(String, Int32) Declaration public void Delete(string token, int gameId) Parameters Type Name Description System.String token System.Int32 gameId Get(String, Int32) Declaration public Leaderboard Get(string token, int gameId) Parameters Type Name Description System.String token System.Int32 gameId Returns Type Description Leaderboard GetByGame(Int32) Declaration public List<Leaderboard> GetByGame(int gameId) Parameters Type Name Description System.Int32 gameId Returns Type Description List < Leaderboard > Update(Leaderboard) Declaration public void Update(Leaderboard leaderboard) Parameters Type Name Description Leaderboard leaderboard"
  },
  "api/PlayGen.SUGAR.Server.EntityFramework.Controllers.MatchController.html": {
    "href": "api/PlayGen.SUGAR.Server.EntityFramework.Controllers.MatchController.html",
    "title": "Class MatchController | SUGAR",
    "keywords": "Class MatchController Inheritance System.Object DbController MatchController Inherited Members DbController.ContextFactory Namespace : PlayGen.SUGAR.Server.EntityFramework.Controllers Assembly : PlayGen.SUGAR.Server.EntityFramework.dll Syntax public class MatchController : DbController Constructors MatchController(SUGARContextFactory) Declaration public MatchController(SUGARContextFactory contextFactory) Parameters Type Name Description SUGARContextFactory contextFactory Methods Create(Match) Declaration public Match Create(Match match) Parameters Type Name Description Match match Returns Type Description Match Delete(Int32) Declaration public void Delete(int matchId) Parameters Type Name Description System.Int32 matchId Get(Int32) Declaration public Match Get(int matchId) Parameters Type Name Description System.Int32 matchId Returns Type Description Match GetByCreator(Int32) Declaration public List<Match> GetByCreator(int creatorId) Parameters Type Name Description System.Int32 creatorId Returns Type Description List < Match > GetByCreator(Int32, Nullable<DateTime>, Nullable<DateTime>) Declaration public List<Match> GetByCreator(int creatorId, DateTime? start, DateTime? end) Parameters Type Name Description System.Int32 creatorId System.Nullable < DateTime > start System.Nullable < DateTime > end Returns Type Description List < Match > GetByGame(Int32) Declaration public List<Match> GetByGame(int gameId) Parameters Type Name Description System.Int32 gameId Returns Type Description List < Match > GetByGame(Int32, Nullable<DateTime>, Nullable<DateTime>) Declaration public List<Match> GetByGame(int gameId, DateTime? start, DateTime? end) Parameters Type Name Description System.Int32 gameId System.Nullable < DateTime > start System.Nullable < DateTime > end Returns Type Description List < Match > GetByGameAndCreator(Int32, Int32) Declaration public List<Match> GetByGameAndCreator(int gameId, int creatorId) Parameters Type Name Description System.Int32 gameId System.Int32 creatorId Returns Type Description List < Match > GetByGameAndCreator(Int32, Int32, Nullable<DateTime>, Nullable<DateTime>) Declaration public List<Match> GetByGameAndCreator(int gameId, int creatorId, DateTime? start, DateTime? end) Parameters Type Name Description System.Int32 gameId System.Int32 creatorId System.Nullable < DateTime > start System.Nullable < DateTime > end Returns Type Description List < Match > GetByTime(Nullable<DateTime>, Nullable<DateTime>) Declaration public List<Match> GetByTime(DateTime? start, DateTime? end) Parameters Type Name Description System.Nullable < DateTime > start System.Nullable < DateTime > end Returns Type Description List < Match > Update(Match) Declaration public Match Update(Match match) Parameters Type Name Description Match match Returns Type Description Match"
  },
  "unity-client/features/sugarmanager.html": {
    "href": "unity-client/features/sugarmanager.html",
    "title": "SUGARManager | SUGAR",
    "keywords": "SUGARManager Interaction with SUGAR in the SUGAR Unity Package is handled through SUGARManager. CurrentUser The currently signed in user, set when a user signs in or registers using the 'SetCurrentUser' method in AccountUnityClient . The ActorResponse object contains the user's Id, Name and Description. CurrentGroup The current 'primary' group for the signed in user. Automatically set when signing in to the first group in that user's list of group that they're a member of. Can be manually set using the 'SetCurrentGroup' method in SUGARManager. The ActorResponse object contains the group's Id, Name and Description. Unity Clients SUGAR Manager Property Functionality Unity Client Class Account Sign in, register and sign out AccountUnityClient Evaluation Get list of achievements and skills and user/group progress in each, with an event triggered when one is completed EvaluationUnityClient GameData Get and send data related to the game GameDataUnityClient Resource Get current resources, add resources and send resources to other users ResourceUnityClient GameLeaderboard Get leaderboards for this game LeaderboardListUnityClient Leaderboard Get the current standings for a leaderboard LeaderboardUnityClient UserFriend Get current user's list of friends and send and handle friend requests UserFriendUnityClient UserGroup Get current user's list of groups and send and handle group requests UserGroupUnityClient GroupMember Get list of members for a group GroupMemberUnityClient Unity Create client, enable and disable SUGAR objects, start and stop the loading spinner SUGARUnityManager Client All functionality within SUGAR Unity goes through this SUGAR Client. It is created within the 'CreateSUGARClient' method and set within the 'CreateSUGARClient' method of SUGARUnityManager , both of which are triggered from its 'Awake' method. Any player-facing SUGAR functionality can be accessed using the Client directly instead. Please note that the Client does not make the same checks as SUGAR Unity to ensure that functionality can only be called once a user is signed in and that only functionality that the user has access to is available, so additional care should be taken when using the Client directly to avoid calls failing. UserSignedIn Boolean used to confirm if a user is signed in. If no user is signed in, most functionality will not be accessible. ClassId Class name for the currently signed in user. Can be set when launching the application via the Command Line or via the 'SetClassId' method in SUGARManager. GameId The Id of the game. Set in 'Awake' in the SUGARUnityManager using the value set in the Inspector and cannot be overwritten."
  },
  "unity-client/tutorials/index.html": {
    "href": "unity-client/tutorials/index.html",
    "title": "Tutorials | SUGAR",
    "keywords": "Tutorials This section provides tutorials for the various tasks a developer may want to explore around using and customizing the SUGAR Unity Client."
  },
  "index.html": {
    "href": "index.html",
    "title": "SUGAR | SUGAR",
    "keywords": "SUGAR Welcome to the documentation for SUGAR also known as the RAGE Social Gamification Asset. SUGAR provides a software platform consisting of Web API and Client side components that enable game developers to integrate group based gamification into their applications. It supports features such as clans, group resources and goals and tournaments. The documentation includes : Installation : Simple guide to getting the SUGAR server running with docker. Features : Detailed description of features supported by the software including the roadmap for up-and-coming features. Core Concepts : Description of core concepts behind features within SUGAR. Admin Interface : Description of the platform’s admin panel. Client API Reference : Client API documentation and examples. RESTful API : Web API documentation and examples. The link to the repositories can be found below : Repositories: Server API Repository Admin Panel Repository Client Demo Repository SUGAR is partially funded by the RAGE project . Realising an Applied Gaming Eco-system (RAGE) aims to develop, transform and enrich advanced technologies from the leisure games industry into self-contained gaming assets that support game studios at developing applied games easier, faster and more cost-effectively."
  },
  "unity-client/development/documentation.html": {
    "href": "unity-client/development/documentation.html",
    "title": "Documentation | SUGAR",
    "keywords": "Documentation SUGAR Unity's documentation is generated using DocFX using tripple slash code comments and DicFX .md and .toc files located in docs/. Requirements DocFX \"docfx\" as a command needs to be availabe via the command console for the scripts to work. PDF documentation requires wkhtmltopdf . Process There are various build scripts in docs/tools to build, copy and serve the docs. Tool Function all.bat Build the docs site and pdf. copy_to_unity.bat Copy the built pdf into the unity project. all_and_copy.bat all.bat and copy_to_unity.bat metadata_build_and_serve.bat Build the site and serve. Use this to test the generated docs. metadata_pdf.bat Build the pdf. Note: The PDF docfx config was created by following this guide ."
  },
  "unity-client/development/index.html": {
    "href": "unity-client/development/index.html",
    "title": "Development | SUGAR",
    "keywords": "Development This section covers various aspects to do with developing the SUGAR Unity Client."
  },
  "unity-client/development/build-instructions.html": {
    "href": "unity-client/development/build-instructions.html",
    "title": "Build Instructions | SUGAR",
    "keywords": "Build Instructions Open and build the PlayGen.SUGAR.Unity project. Open the Unity project. Click Menu/Tools/Build SUGAR Package. Copy the built package from Build/SUGAR.unitypackage. Import it into your project and let the magic begin. Making Changes to SUGAR Client Build SUGAR project Open SUGAR/PlayGen.SUGAR.Client.Development/bin/Debug/net46 Copy new .dll files to sugar-unity/lib/SUGAR/Client Open and Build PlayGen.SUGAR.Unity project"
  },
  "concepts/leaderboardstandings.html": {
    "href": "concepts/leaderboardstandings.html",
    "title": "LeaderboardStandings | SUGAR",
    "keywords": "LeaderboardStandings LeaderboardStandings are used to obtain a collection of Users or Groups based on a specific Leaderboard . In order to setup a LeaderboardStandingsRequest , the following must be passed: LeaderboardToken - Used to identify the specific Leaderboard that this LeaderboardStandings applies to. GameId - The Game that this LeaderboardStandings and leaderboard is specific to. ActorId - The Actor that we are most concerned with. The actor is used in conjunction with the LeaderboardFilterType. LeaderboardFilterType - Allows you to specify how you want the results returned in relation to the actor: Top: Returns the top globally ranked actors. Near: Returns the actors in relation to the actorId Provided. This works in conjunction with the PageOffset. By default it will return a collection that contains the provided actor. Friends: If the actor is a user, only the friends of that user are returned. GroupMembers: If the actor is a group, only the members of that group are returned. PageLimit: The maximum amount of rankings to return. PageOffset: Used in conjunction with the LeaderboardFilterType Near. Example 1 - if the actorId = a user's Id, LeaderboardFilterType = Near, PageLimit = 50 and PageOffset = 0, with the user ranked 80th, a collection of rankings will be returned where the user is at position 30, with 29 rankings before and 20 after. Example 2 - if the actorId = a user's Id, LeaderboardFilterType = Near, PageLimit = 50 and PageOffset = 1, with the user ranked 40th, a collection of rankings between 51th and 100th will be returned, with the user not included. DateStart: Because the leaderboard associated with the LeaderboardStandings queries the GameData of actors to determine their ranking; you can specify a StartDate and EndDate where on the GameData added to the system during that time span will be considered in determining actors' rankings. DateEnd: The end of the date range for gameData to be considered in determining an actor's ranking. Both the DateStart and DateEnd can be left empty in which case all of the gameData for the actors will be considered. Examples LeaderboardToken = \"Player High Score\", GameId = 5, actorId = 23, LeaderboardFilterType = \"Near\", PageLimit = 20, PageOffset = 1, DateStart = null, DateEnd = null,"
  },
  "concepts/rewards.html": {
    "href": "concepts/rewards.html",
    "title": "Reward | SUGAR",
    "keywords": "Reward Rewards can be provided to Users and Groups upon completion of Achievements and Skills . Rewards given are stored within GameData, meaning they can in theory be used toward further Criteria and Leaderboards . In order to set up aa RewardCreateRequest , the following must be passed: Key - The unique identifier for the reward being provided within GameData. DataType - The EvaluationDataType of data being stored. Value - The value which is being stored. Examples Key = \"Gold\", DataType = \"Long\", Value = \"15\" Key = \"Bonus_Points\", DataType = \"Float\", Value = \"2.5\","
  },
  "concepts/rolesandpermissions.html": {
    "href": "concepts/rolesandpermissions.html",
    "title": "Roles and Permissions | SUGAR",
    "keywords": "Roles and Permissions Overview Account actions are controlled by their associated permissions, known as Claims , if an account does not have the right claim to authorize their activity, SUGAR will block their request. A Role is a collection of permissions that an account can have. The default admin will have all roles assigned to them on Database seeding, whereas new logins will be given the Account and User Role, providing claims to their own account. Default Roles SUGAR provides 6 Roles as default, these are defined in the table below Role Claims Global Create/Update/Delete Account Source Create/Get/Delete Actor Claim Create/Get/Delete Actor Role Create Game Create Group Create/Get Role Create/Get/Delete User Game Create/Get/Update/Delete Achievement Create/Get/Delete Actor Claim Create/Get/Delete Actor Role Update/Delete Game Create/Get Game Data Create/Update/Delete Leaderboard Create Resource Create Role Group Create/Get/Delete Actor Claim Create/Get Actor Data Create/Get/Delete Actor Role Create Game Data Update/Delete Group Create/Get/Update Group Member Request Delete Group Member Create/Update Resource Create Role User Get Actor Data Create/Get Actor Data Create Game Data Create/Get Group Member Request Delete Group Member Create/Update Resource Update User Create/Get/Update Friend Request Delete User Friend Account Delete Account Role Delete Role Create/Get/Delete Role Claim Adding new roles In order to add new roles, this can either be done by the REST API to firstly create a new Role, and then assign it the claims required, the claims must be assigned by Id to the Id of the newly created Role. Additionally Playgen.SUGAR.Server.Core/Authorization/ClaimController.cs, will automatically create new Roles when the API is started for AuthorizationAttributes, for example: [Authorization(ClaimScope.Group, AuthorizationAction.Delete, AuthorizationEntity.Group)] Will create the GroupDelete Claim for ClaimScope Group."
  },
  "concepts/session.html": {
    "href": "concepts/session.html",
    "title": "Session | SUGAR",
    "keywords": "Session When a user logs in to a game, a new, unique session is created. When the user logs out, that session is ended. Sessions will automatically be ended if there has been no activity within a certain period. The \"Heartbeat\" method can be used to keep sessions active. Features Login Logout Heartbeat API Client SessionClient Contracts AccountRequest AccountResponse WebAPI SessionController"
  },
  "concepts/criteria.html": {
    "href": "concepts/criteria.html",
    "title": "Evalutation Criteria | SUGAR",
    "keywords": "Evalutation Criteria EvaluationCriteriaCreateRequest are the goals which a Users or Group are set in order to complete an Achievement or Skills . At least one must be assigned and only information stored within EvaluationData can be queried against. In order to set up an EvaluationCriteriaCreateRequest , the following must be passed: Key - The fundermental piece of any criteria. All data collected will require the key to match with what is given here. EvaluationDataType - The type of data being queried against. As with key, only data that matches this type will be collected. Example - if \"String\" is given as DataType, only data also stored as \"String\" will be checked against. CriteriaQueryType - The type of query that will be performed against the collected data. \"Any\" checks to see if the criteria has been ever met by the collected data. \"Latest\" checks if the last data that matched Key and GameDataType met the criteria. \"Sum\" is used by numeric EvaluationDataTypes (Long and Float) and adds the value of all collected data together. \"Count\" checks if the amount of entries in the database of the specified EvaluationData matches the criteria. ComparisonType - How the retrieved data will be compared against the target value. If the retrieved data compared to the value matches the ComparisonType provided, then the criteria has been met. Example - if the retrieved data equals 20, the value is 15 and the ComparisonType is \"GreaterThan\", the criteria has been met. If the ComparisonType was \"Equals\" then the criteria would not have been met. CriteriaScope - The range of data collected for this Actor . The \"Actor\" scope only looks at data stored against the actor directly. \"RelatedActors\" will collect data that have a relationship with the provided actor. Example - \"RelatedActor\" could be used with a group to collect data for all members of that group. Value - The target value which will be checked evaluated against. Must always be passed as a string. Examples Key = \"Gold\", DataType = \"Long\", Scope = \"Actor\", Value = \"15\", ComparisonType = \"GreaterOrEqual\", CriteriaQueryType = \"Sum\" Key = \"Level_1_Time\", DataType = \"Float\", Scope = \"Actor\", Value = \"9.25\", ComparisonType = \"Less\", CriteriaQueryType = \"Any\""
  },
  "concepts/entityModel.html": {
    "href": "concepts/entityModel.html",
    "title": "Entity Model | SUGAR",
    "keywords": "Entity Model A Users is the person playing the game. A Group is made up of a collection of Users. Users and Groups both derive from the Actor type. This means that objects that reference an Actor can apply to either a User or a Group. Actors can save GameData . GameData could be: A User's inventory A User's high score A Group's high score etc or any other kind of data that you need to persist between play sessions. Resources are items that can be traded or consumed. An Actor may collect 20 gems and decide to give 10 of them to another actor at a later point, resulting in both actors having 10 gems. As with GameData, Resources can be obtained and given by both Users and Groups. Leaderboards are used to calculate an Actor's ranking against other actors of the same type. One leaderboard may rank Groups by the amount of members they have, in a game where one goal is to make as big a group as possible. Another leaderboard could be the typical high score, where Users are ranked by the score they have saved in the GameData. Achievements look at the GameData of a specfic Actor to see whether they have met the completion criteria for the achievement. An achievement may check to see if an Actor's score is over 100, and if so, the Actor is evaluated as having completed the Achievement. Skills operate in the same way as Achievements but are conceptually different. A Skill has the aim of teaching the player a \"skill\" in the process of completing it. For example, a Skill may be to give 10 gems to 10 different people to complete the \"sharing\" Skill. Achievements and Skills both have Evalutation Criteria which is a set of conditions that need to be met in order for the Skill or Achievement to be considered as completed. AchievementCriteria can look for specific data in GameData. Once completed, an Achievement or Skill may offer rewards to the Actor. These rewards would be in the form of GameData. For example, an Actor may be credited with 20 points on completing an Achievement or Skill. Those 20 points would be saved in that Actor's GameData. Users can create, join and leave Groups. Users can also befriend other Users. Because there may be multiple Games , the Game is used to associate Achievements, Skills, Leaderboards, GameData and Resources whithin that specific game. Each user has an Account . The Account is only used to faciliatate user registration and logging in. After the user has logged in, the Account is not used until the next time they log in."
  },
  "concepts/index.html": {
    "href": "concepts/index.html",
    "title": "Overview | SUGAR",
    "keywords": "Overview This section provides more detailed descriptions on how elements of the SUGAR system could and should be utilised. The following is included within this section: Account : Data used for logging in and permissions. Session : User active sessions. Entity Model : Diagram and descriptions of the different parts of the entity model and how they work together. Evalutation Criteria : How EvaluationCriteriaCreateRequest for Achievement and Skills can be utilised within the system. Reward : Details on what can be rewarded for completing Achievements and Skills . LeaderboardStandings : How LeaderboardStandingsRequest should be provided and how this request differs from a normal LeaderboardRequest ."
  },
  "demo/index.html": {
    "href": "demo/index.html",
    "title": "Demo | SUGAR",
    "keywords": "Demo Game The demo game serves as a simple tutorial of how one could implement the features of the SUGAR engine. Unity Demo"
  },
  "development/admin.html": {
    "href": "development/admin.html",
    "title": "sga-admin | SUGAR",
    "keywords": "sga-admin This project is generated with yo angular generator version 0.15.1. Build & development Change the api.baseUrl in app/scripts/app.js to that of your SUGAR server. Run grunt build for building and grunt serve for preview. Default login user: admin, password: admin Deployment The admin panel can be hosted as a static website or in a docker container, The admin panel does not use a docker-compose file to setup the container, instead it comes with a series of batch and shell scripts to get you started, these can be found in the root of the project docker_build_and_deploy.bat docker_build_and_deploy.sh docker_build_and_deploy_map_port.bat docker_build_and_deploy_map_port.sh By default the admin panel will expose port 4200, this can be changed in the Dockerfile and in the docker_build scripts above. Documentation You can find the SUGAR Admin Interface docs here ."
  },
  "api/PlayGen.SUGAR.Contracts.LeaderboardStandingsResponse.html": {
    "href": "api/PlayGen.SUGAR.Contracts.LeaderboardStandingsResponse.html",
    "title": "Class LeaderboardStandingsResponse | SUGAR",
    "keywords": "Class LeaderboardStandingsResponse Encapsulates leaderboard standings details from the database. Inheritance System.Object LeaderboardStandingsResponse Namespace : PlayGen.SUGAR.Contracts Assembly : PlayGen.SUGAR.Contracts.dll Syntax public class LeaderboardStandingsResponse : object Examples JSON { ActorId : 1, ActorName : \"Name\", Value : \"10\", Ranking : 1 } Properties ActorId The Id of the Actor. Declaration public int ActorId { get; set; } Property Value Type Description System.Int32 ActorName The name of the Actor. Declaration public string ActorName { get; set; } Property Value Type Description System.String Ranking The actor's global ranking within that leaderboard. Declaration public int Ranking { get; set; } Property Value Type Description System.Int32 Value The value returned from the query for the leaderboard. Declaration public string Value { get; set; } Property Value Type Description System.String"
  },
  "api/PlayGen.SUGAR.Contracts.RewardResponse.html": {
    "href": "api/PlayGen.SUGAR.Contracts.RewardResponse.html",
    "title": "Class RewardResponse | SUGAR",
    "keywords": "Class RewardResponse Encapsulates the reward given for completing an achievement or skill. Inheritance System.Object RewardResponse Namespace : PlayGen.SUGAR.Contracts Assembly : PlayGen.SUGAR.Contracts.dll Syntax public class RewardResponse : object Examples JSON { Key : \"Reward Key\", DataType : \"Float\", Value : \"10.5\" } Properties EvaluationDataCategory EvaluationDataCategory of the value for this EvaluationData. Declaration public EvaluationDataCategory? EvaluationDataCategory { get; set; } Property Value Type Description System.Nullable < EvaluationDataCategory > EvaluationDataKey The key which will be stored in EvaluationData. Declaration public string EvaluationDataKey { get; set; } Property Value Type Description System.String EvaluationDataType EvaluationDataType of the value for this EvaluationData. Declaration public EvaluationDataType? EvaluationDataType { get; set; } Property Value Type Description System.Nullable < EvaluationDataType > Id The unqiue identifier for this type. Declaration public int Id { get; set; } Property Value Type Description System.Int32 Value The value of the EvaluationData. Declaration public string Value { get; set; } Property Value Type Description System.String"
  },
  "api/PlayGen.SUGAR.Contracts.RewardUpdateRequest.html": {
    "href": "api/PlayGen.SUGAR.Contracts.RewardUpdateRequest.html",
    "title": "Class RewardUpdateRequest | SUGAR",
    "keywords": "Class RewardUpdateRequest Encapsulates the reward given for completing an achievement or skill. Inheritance System.Object RewardUpdateRequest Namespace : PlayGen.SUGAR.Contracts Assembly : PlayGen.SUGAR.Contracts.dll Syntax public class RewardUpdateRequest : object Examples JSON { Key : \"Reward Key\", DataType : \"Float\", Value : \"10.5\" } Properties EvaluationDataCategory EvaluationDataCategory of the value for this EvaluationData. Declaration public EvaluationDataCategory? EvaluationDataCategory { get; set; } Property Value Type Description System.Nullable < EvaluationDataCategory > EvaluationDataKey The key which will be stored in EvaluationData. Declaration public string EvaluationDataKey { get; set; } Property Value Type Description System.String EvaluationDataType EvaluationDataType of the value for this EvaluationData. Declaration public EvaluationDataType? EvaluationDataType { get; set; } Property Value Type Description System.Nullable < EvaluationDataType > Id The unqiue identifier for this type. Declaration public int? Id { get; set; } Property Value Type Description System.Nullable < System.Int32 > Value The value of the EvaluationData. Declaration public string Value { get; set; } Property Value Type Description System.String Extension Methods RewardExtensions.ToModel(RewardUpdateRequest)"
  },
  "api/PlayGen.SUGAR.Server.Authentication.Extensions.ClaimsExtensions.html": {
    "href": "api/PlayGen.SUGAR.Server.Authentication.Extensions.ClaimsExtensions.html",
    "title": "Class ClaimsExtensions | SUGAR",
    "keywords": "Class ClaimsExtensions Inheritance System.Object ClaimsExtensions Namespace : PlayGen.SUGAR.Server.Authentication.Extensions Assembly : PlayGen.SUGAR.Server.Authentication.dll Syntax public static class ClaimsExtensions : object Methods GetGameId(IHeaderDictionary) Declaration public static int GetGameId(this IHeaderDictionary headers) Parameters Type Name Description IHeaderDictionary headers Returns Type Description System.Int32 GetSessionId(IHeaderDictionary) Declaration public static int GetSessionId(this IHeaderDictionary headers) Parameters Type Name Description IHeaderDictionary headers Returns Type Description System.Int32 GetUserId(IHeaderDictionary) Declaration public static int GetUserId(this IHeaderDictionary headers) Parameters Type Name Description IHeaderDictionary headers Returns Type Description System.Int32 TryGetGameId(IHeaderDictionary, out Int32) Declaration public static bool TryGetGameId(this IHeaderDictionary headers, out int gameId) Parameters Type Name Description IHeaderDictionary headers System.Int32 gameId Returns Type Description System.Boolean TryGetSessionId(IHeaderDictionary, out Int32) Declaration public static bool TryGetSessionId(this IHeaderDictionary headers, out int sessionId) Parameters Type Name Description IHeaderDictionary headers System.Int32 sessionId Returns Type Description System.Boolean TryGetUserId(IHeaderDictionary, out Int32) Declaration public static bool TryGetUserId(this IHeaderDictionary headers, out int userId) Parameters Type Name Description IHeaderDictionary headers System.Int32 userId Returns Type Description System.Boolean"
  },
  "api/PlayGen.SUGAR.Server.EntityFramework.EntityConfigs.RewardConfig.html": {
    "href": "api/PlayGen.SUGAR.Server.EntityFramework.EntityConfigs.RewardConfig.html",
    "title": "Class RewardConfig | SUGAR",
    "keywords": "Class RewardConfig Inheritance System.Object RewardConfig Namespace : PlayGen.SUGAR.Server.EntityFramework.EntityConfigs Assembly : PlayGen.SUGAR.Server.EntityFramework.dll Syntax public class RewardConfig : IEntityTypeConfiguration<Reward> Methods Configure(EntityTypeBuilder<Reward>) Declaration public void Configure(EntityTypeBuilder<Reward> builder) Parameters Type Name Description EntityTypeBuilder < Reward > builder"
  },
  "api/PlayGen.SUGAR.Server.EntityFramework.EntityConfigs.RoleClaimConfig.html": {
    "href": "api/PlayGen.SUGAR.Server.EntityFramework.EntityConfigs.RoleClaimConfig.html",
    "title": "Class RoleClaimConfig | SUGAR",
    "keywords": "Class RoleClaimConfig Inheritance System.Object RoleClaimConfig Namespace : PlayGen.SUGAR.Server.EntityFramework.EntityConfigs Assembly : PlayGen.SUGAR.Server.EntityFramework.dll Syntax public class RoleClaimConfig : IEntityTypeConfiguration<RoleClaim> Methods Configure(EntityTypeBuilder<RoleClaim>) Declaration public void Configure(EntityTypeBuilder<RoleClaim> builder) Parameters Type Name Description EntityTypeBuilder < RoleClaim > builder"
  },
  "api/PlayGen.SUGAR.Server.EntityFramework.EntityConfigs.SentEvaluationNotificationConfig.html": {
    "href": "api/PlayGen.SUGAR.Server.EntityFramework.EntityConfigs.SentEvaluationNotificationConfig.html",
    "title": "Class SentEvaluationNotificationConfig | SUGAR",
    "keywords": "Class SentEvaluationNotificationConfig Inheritance System.Object SentEvaluationNotificationConfig Namespace : PlayGen.SUGAR.Server.EntityFramework.EntityConfigs Assembly : PlayGen.SUGAR.Server.EntityFramework.dll Syntax public class SentEvaluationNotificationConfig : IEntityTypeConfiguration<SentEvaluationNotification> Methods Configure(EntityTypeBuilder<SentEvaluationNotification>) Declaration public void Configure(EntityTypeBuilder<SentEvaluationNotification> builder) Parameters Type Name Description EntityTypeBuilder < SentEvaluationNotification > builder"
  },
  "api/PlayGen.SUGAR.Server.EntityFramework.Extensions.html": {
    "href": "api/PlayGen.SUGAR.Server.EntityFramework.Extensions.html",
    "title": "Namespace PlayGen.SUGAR.Server.EntityFramework.Extensions | SUGAR",
    "keywords": "Namespace PlayGen.SUGAR.Server.EntityFramework.Extensions Classes ActorDataExtensions ContextExtensions DbSetExtensions Functionality missing from EF.Core that was available in EF 6 EvaluationDataExtensions MatchExtensions SUGARContextSeedExtensions"
  },
  "api/PlayGen.SUGAR.Server.EntityFramework.Migrations.GenericRelationships.html": {
    "href": "api/PlayGen.SUGAR.Server.EntityFramework.Migrations.GenericRelationships.html",
    "title": "Class GenericRelationships | SUGAR",
    "keywords": "Class GenericRelationships Inheritance System.Object GenericRelationships Namespace : PlayGen.SUGAR.Server.EntityFramework.Migrations Assembly : PlayGen.SUGAR.Server.EntityFramework.dll Syntax public class GenericRelationships : Migration Methods BuildTargetModel(ModelBuilder) Declaration protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters Type Name Description ModelBuilder modelBuilder Down(MigrationBuilder) Declaration protected override void Down(MigrationBuilder migrationBuilder) Parameters Type Name Description MigrationBuilder migrationBuilder Up(MigrationBuilder) Declaration protected override void Up(MigrationBuilder migrationBuilder) Parameters Type Name Description MigrationBuilder migrationBuilder"
  },
  "api/PlayGen.SUGAR.Server.EntityFramework.Migrations.InitialCreate.html": {
    "href": "api/PlayGen.SUGAR.Server.EntityFramework.Migrations.InitialCreate.html",
    "title": "Class InitialCreate | SUGAR",
    "keywords": "Class InitialCreate Inheritance System.Object InitialCreate Namespace : PlayGen.SUGAR.Server.EntityFramework.Migrations Assembly : PlayGen.SUGAR.Server.EntityFramework.dll Syntax public class InitialCreate : Migration Methods BuildTargetModel(ModelBuilder) Declaration protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters Type Name Description ModelBuilder modelBuilder Down(MigrationBuilder) Declaration protected override void Down(MigrationBuilder migrationBuilder) Parameters Type Name Description MigrationBuilder migrationBuilder Up(MigrationBuilder) Declaration protected override void Up(MigrationBuilder migrationBuilder) Parameters Type Name Description MigrationBuilder migrationBuilder"
  },
  "api/PlayGen.SUGAR.Server.EntityFramework.Migrations.MemberCountAndAllianceCount.html": {
    "href": "api/PlayGen.SUGAR.Server.EntityFramework.Migrations.MemberCountAndAllianceCount.html",
    "title": "Class MemberCountAndAllianceCount | SUGAR",
    "keywords": "Class MemberCountAndAllianceCount Inheritance System.Object MemberCountAndAllianceCount Namespace : PlayGen.SUGAR.Server.EntityFramework.Migrations Assembly : PlayGen.SUGAR.Server.EntityFramework.dll Syntax public class MemberCountAndAllianceCount : Migration Methods BuildTargetModel(ModelBuilder) Declaration protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters Type Name Description ModelBuilder modelBuilder Down(MigrationBuilder) Declaration protected override void Down(MigrationBuilder migrationBuilder) Parameters Type Name Description MigrationBuilder migrationBuilder Up(MigrationBuilder) Declaration protected override void Up(MigrationBuilder migrationBuilder) Parameters Type Name Description MigrationBuilder migrationBuilder"
  },
  "api/PlayGen.SUGAR.Server.WebAPI.Controllers.ActorDataController.html": {
    "href": "api/PlayGen.SUGAR.Server.WebAPI.Controllers.ActorDataController.html",
    "title": "Class ActorDataController | SUGAR",
    "keywords": "Class ActorDataController Web Controller that facilitates ActorData specific operations. Inheritance System.Object ActorDataController Namespace : PlayGen.SUGAR.Server.WebAPI.Controllers Assembly : PlayGen.SUGAR.Server.WebAPI.dll Syntax public class ActorDataController : Controller Constructors ActorDataController(ActorDataController, IAuthorizationService) Declaration public ActorDataController(ActorDataController actorDataCoreController, IAuthorizationService authorizationService) Parameters Type Name Description ActorDataController actorDataCoreController IAuthorizationService authorizationService Methods Add(EvaluationDataRequest) Create a new ActorData record. Example Usage: POST api/actordata Declaration public Task<IActionResult> Add(EvaluationDataRequest newData) Parameters Type Name Description EvaluationDataRequest newData EvaluationDataRequest object that holds the details of the new ActorData. Returns Type Description Task < IActionResult > A EvaluationDataResponse containing the new ActorData details. Get(Nullable<Int32>, Nullable<Int32>, String[]) Find a list of all ActorData that match the , and provided. Example Usage: GET api/actordata?actorId=1&gameId=1&key=key1&key=key2 Declaration public Task<IActionResult> Get(int? actorId, int? gameId, string[] key) Parameters Type Name Description System.Nullable < System.Int32 > actorId ID of a User/Group. System.Nullable < System.Int32 > gameId ID of a Game. System.String [] key Array of Key names. Returns Type Description Task < IActionResult > A list of EvaluationDataResponse which match the search criteria."
  },
  "api/PlayGen.SUGAR.Common.Authorization.html": {
    "href": "api/PlayGen.SUGAR.Common.Authorization.html",
    "title": "Namespace PlayGen.SUGAR.Common.Authorization | SUGAR",
    "keywords": "Namespace PlayGen.SUGAR.Common.Authorization Classes AuthorizationName Platform Enums AuthorizationAction AuthorizationEntity ClaimScope"
  },
  "api/PlayGen.SUGAR.Common.Exceptions.html": {
    "href": "api/PlayGen.SUGAR.Common.Exceptions.html",
    "title": "Namespace PlayGen.SUGAR.Common.Exceptions | SUGAR",
    "keywords": "Namespace PlayGen.SUGAR.Common.Exceptions Classes SUGARException"
  },
  "api/PlayGen.SUGAR.Contracts.AccountRequest.html": {
    "href": "api/PlayGen.SUGAR.Contracts.AccountRequest.html",
    "title": "Class AccountRequest | SUGAR",
    "keywords": "Class AccountRequest Encapsulates log-in details. Inheritance System.Object AccountRequest Namespace : PlayGen.SUGAR.Contracts Assembly : PlayGen.SUGAR.Contracts.dll Syntax public class AccountRequest : object Examples JSON { Name : \"User Name\", Password : \"Their Password\", SourceToken : \"SUGAR\" } Properties IssueLoginToken Whether the reqyest should return a login token for use in later logins Declaration public bool IssueLoginToken { get; set; } Property Value Type Description System.Boolean Name The user's log-in name. Declaration public string Name { get; set; } Property Value Type Description System.String Password The user's password. Declaration public string Password { get; set; } Property Value Type Description System.String SourceToken The source from which the user is trying to log-in. Declaration public string SourceToken { get; set; } Property Value Type Description System.String Extension Methods AccountExtensions.ToModel(AccountRequest)"
  },
  "api/PlayGen.SUGAR.Contracts.AccountResponse.html": {
    "href": "api/PlayGen.SUGAR.Contracts.AccountResponse.html",
    "title": "Class AccountResponse | SUGAR",
    "keywords": "Class AccountResponse Encapsulates user and token details at log-in. Inheritance System.Object AccountResponse Namespace : PlayGen.SUGAR.Contracts Assembly : PlayGen.SUGAR.Contracts.dll Syntax public class AccountResponse : object Examples JSON { User : { Id : 1, Name : \"User Name\" } } Properties LoginToken Login token set if account request asks for IssueLoginToken Declaration public string LoginToken { get; set; } Property Value Type Description System.String User ActorResponse object containing the user details. Declaration public UserResponse User { get; set; } Property Value Type Description UserResponse"
  },
  "api/PlayGen.SUGAR.Server.Core.Authorization.html": {
    "href": "api/PlayGen.SUGAR.Server.Core.Authorization.html",
    "title": "Namespace PlayGen.SUGAR.Server.Core.Authorization | SUGAR",
    "keywords": "Namespace PlayGen.SUGAR.Server.Core.Authorization Classes AuthorizationHandler AuthorizationHandlerWithNull AuthorizationHandlerWithoutEntity ClaimController"
  },
  "api/PlayGen.SUGAR.Server.Core.Controllers.AccountController.html": {
    "href": "api/PlayGen.SUGAR.Server.Core.Controllers.AccountController.html",
    "title": "Class AccountController | SUGAR",
    "keywords": "Class AccountController Inheritance System.Object AccountController Namespace : PlayGen.SUGAR.Server.Core.Controllers Assembly : PlayGen.SUGAR.Server.Core.dll Syntax public class AccountController : object Constructors AccountController(ILogger<AccountController>, AccountController, AccountSourceController, UserController, ActorRoleController) Declaration public AccountController(ILogger<AccountController> logger, AccountController accountDbController, AccountSourceController accountSourceCoreController, UserController userCoreController, ActorRoleController actorRoleController) Parameters Type Name Description ILogger < AccountController > logger AccountController accountDbController AccountSourceController accountSourceCoreController UserController userCoreController ActorRoleController actorRoleController Methods Authenticate(Account, String) Declaration public Account Authenticate(Account toVerify, string sourceToken) Parameters Type Name Description Account toVerify System.String sourceToken Returns Type Description Account AuthenticateToken(Account, String) Declaration public Account AuthenticateToken(Account toVerify, string sourceToken) Parameters Type Name Description Account toVerify System.String sourceToken Returns Type Description Account Create(Account, String) Declaration public Account Create(Account toRegister, string sourceToken) Parameters Type Name Description Account toRegister System.String sourceToken Returns Type Description Account Delete(Int32) Declaration public void Delete(int id) Parameters Type Name Description System.Int32 id Get(Int32) Declaration public Account Get(int actorId) Parameters Type Name Description System.Int32 actorId Returns Type Description Account GetByUser(Int32) Declaration public Account GetByUser(int userId) Parameters Type Name Description System.Int32 userId Returns Type Description Account"
  },
  "api/PlayGen.SUGAR.Server.Core.Controllers.RewardController.html": {
    "href": "api/PlayGen.SUGAR.Server.Core.Controllers.RewardController.html",
    "title": "Class RewardController | SUGAR",
    "keywords": "Class RewardController Inheritance System.Object CriteriaEvaluator RewardController Inherited Members CriteriaEvaluator.RelationshipCoreController CriteriaEvaluator.ContextFactory CriteriaEvaluator.EvaluationDataLogger CriteriaEvaluator.IsCriteriaSatisified(Int32, Int32, List<EvaluationCriteria>, ActorType, EvaluationType) CriteriaEvaluator.Evaluate(Int32, Int32, EvaluationCriteria, ActorType, EvaluationType) CriteriaEvaluator.EvaluateLong(Int32, Int32, EvaluationCriteria) CriteriaEvaluator.EvaluateFloat(Int32, Int32, EvaluationCriteria) CriteriaEvaluator.EvaluateString(Int32, Int32, EvaluationCriteria) CriteriaEvaluator.EvaluateBool(Int32, Int32, EvaluationCriteria) CriteriaEvaluator.EvaluateManyLong(Int32, List<Int32>, EvaluationCriteria) CriteriaEvaluator.EvaluateManyFloat(Int32, List<Int32>, EvaluationCriteria) CriteriaEvaluator.EvaluateManyString(Int32, List<Int32>, EvaluationCriteria) CriteriaEvaluator.EvaluateManyBool(Int32, List<Int32>, EvaluationCriteria) CriteriaEvaluator.CompareValues<T>(T, T, ComparisonType, EvaluationDataType) Namespace : PlayGen.SUGAR.Server.Core.Controllers Assembly : PlayGen.SUGAR.Server.Core.dll Syntax public class RewardController : CriteriaEvaluator Constructors RewardController(ILogger<RewardController>, ILogger<EvaluationDataController>, SUGARContextFactory, RelationshipController) Declaration public RewardController(ILogger<RewardController> logger, ILogger<EvaluationDataController> evaluationDataLogger, SUGARContextFactory contextFactory, RelationshipController relationshipController) Parameters Type Name Description ILogger < RewardController > logger ILogger < EvaluationDataController > evaluationDataLogger SUGARContextFactory contextFactory RelationshipController relationshipController Methods AddReward(Int32, Int32, Reward) Declaration public bool AddReward(int actorId, int gameId, Reward reward) Parameters Type Name Description System.Int32 actorId System.Int32 gameId Reward reward Returns Type Description System.Boolean"
  },
  "api/PlayGen.SUGAR.Server.Core.Controllers.RoleClaimController.html": {
    "href": "api/PlayGen.SUGAR.Server.Core.Controllers.RoleClaimController.html",
    "title": "Class RoleClaimController | SUGAR",
    "keywords": "Class RoleClaimController Inheritance System.Object RoleClaimController Namespace : PlayGen.SUGAR.Server.Core.Controllers Assembly : PlayGen.SUGAR.Server.Core.dll Syntax public class RoleClaimController : object Constructors RoleClaimController(ILogger<RoleClaimController>, RoleClaimController) Declaration public RoleClaimController(ILogger<RoleClaimController> logger, RoleClaimController roleClaimDbController) Parameters Type Name Description ILogger < RoleClaimController > logger RoleClaimController roleClaimDbController Methods Create(RoleClaim) Declaration public RoleClaim Create(RoleClaim newRoleClaim) Parameters Type Name Description RoleClaim newRoleClaim Returns Type Description RoleClaim Delete(Int32, Int32) Declaration public void Delete(int roleId, int claimId) Parameters Type Name Description System.Int32 roleId System.Int32 claimId GetClaimsByRole(Int32) Declaration public List<Claim> GetClaimsByRole(int roleId) Parameters Type Name Description System.Int32 roleId Returns Type Description List < Claim > GetClaimsByRoles(List<Int32>) Declaration public List<Claim> GetClaimsByRoles(List<int> ids) Parameters Type Name Description List < System.Int32 > ids Returns Type Description List < Claim > GetRolesByClaim(Int32) Declaration public List<Role> GetRolesByClaim(int id) Parameters Type Name Description System.Int32 id Returns Type Description List < Role >"
  },
  "unity-client/api/PlayGen.SUGAR.Unity.Editor.EditGameSeedWindow.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.Editor.EditGameSeedWindow.html",
    "title": "Class EditGameSeedWindow | SUGAR",
    "keywords": "Class EditGameSeedWindow Inheritance System.Object EditGameSeedWindow Namespace : PlayGen.SUGAR.Unity.Editor Assembly : PlayGen.SUGAR.Unity.Editor.dll Syntax public class EditGameSeedWindow : EditorWindow Methods SetGameSeed(TextAsset) Declaration public void SetGameSeed(TextAsset gameSeedText) Parameters Type Name Description TextAsset gameSeedText"
  },
  "api/PlayGen.SUGAR.Client.AsyncRequestQueue.AsyncRequestController.html": {
    "href": "api/PlayGen.SUGAR.Client.AsyncRequestQueue.AsyncRequestController.html",
    "title": "Class AsyncRequestController | SUGAR",
    "keywords": "Class AsyncRequestController Inheritance System.Object AsyncRequestController Implements IAsyncRequestController IDisposable Namespace : PlayGen.SUGAR.Client.AsyncRequestQueue Assembly : PlayGen.SUGAR.Client.dll Syntax public class AsyncRequestController : object, IAsyncRequestController, IDisposable Constructors AsyncRequestController(Int32, Action) Declaration public AsyncRequestController(int timeoutMilliseconds, Action onTimeout) Parameters Type Name Description System.Int32 timeoutMilliseconds Action onTimeout Methods Clear() Declaration public void Clear() Dispose() Declaration public void Dispose() EnqueueRequest(Action, Action, Action<Exception>) Declaration public void EnqueueRequest(Action request, Action onSuccess, Action<Exception> onError) Parameters Type Name Description Action request Action onSuccess Action < Exception > onError EnqueueRequest<TResult>(Func<TResult>, Action<TResult>, Action<Exception>) Declaration public void EnqueueRequest<TResult>(Func<TResult> request, Action<TResult> onSuccess, Action<Exception> onError) Parameters Type Name Description Func <TResult> request Action <TResult> onSuccess Action < Exception > onError Type Parameters Name Description TResult Finalize() Declaration protected void Finalize() TryExecuteResponse() Declaration public bool TryExecuteResponse() Returns Type Description System.Boolean Implements IAsyncRequestController IDisposable"
  },
  "api/PlayGen.SUGAR.Client.Exceptions.html": {
    "href": "api/PlayGen.SUGAR.Client.Exceptions.html",
    "title": "Namespace PlayGen.SUGAR.Client.Exceptions | SUGAR",
    "keywords": "Namespace PlayGen.SUGAR.Client.Exceptions Classes ClientException ClientHttpException"
  },
  "api/PlayGen.SUGAR.Contracts.RelationshipRequest.html": {
    "href": "api/PlayGen.SUGAR.Contracts.RelationshipRequest.html",
    "title": "Class RelationshipRequest | SUGAR",
    "keywords": "Class RelationshipRequest Encapsulates relationship details. Inheritance System.Object RelationshipRequest Namespace : PlayGen.SUGAR.Contracts Assembly : PlayGen.SUGAR.Contracts.dll Syntax public class RelationshipRequest : object Examples JSON { RequestorId : 1, AcceptorId : 2, AutoAccept : true } Properties AcceptorId The Id of the receiving actor. Declaration public int? AcceptorId { get; set; } Property Value Type Description System.Nullable < System.Int32 > AutoAccept Whether the request should be automatically accepted. Declaration public bool AutoAccept { get; set; } Property Value Type Description System.Boolean RequestorId The Id of the requesting actor. Declaration public int? RequestorId { get; set; } Property Value Type Description System.Nullable < System.Int32 > Extension Methods RelationshipExtensions.ToRelationshipModel(RelationshipRequest)"
  },
  "api/PlayGen.SUGAR.Contracts.RoleClaimRequest.html": {
    "href": "api/PlayGen.SUGAR.Contracts.RoleClaimRequest.html",
    "title": "Class RoleClaimRequest | SUGAR",
    "keywords": "Class RoleClaimRequest Encapsulates roleclaim details. Inheritance System.Object RoleClaimRequest Namespace : PlayGen.SUGAR.Contracts Assembly : PlayGen.SUGAR.Contracts.dll Syntax public class RoleClaimRequest : object Examples JSON { RoleId : 1, ClaimId : 1 } Properties ClaimId The ID of the claim related to this roleclaim. Declaration public int? ClaimId { get; set; } Property Value Type Description System.Nullable < System.Int32 > RoleId The ID of the role related to this roleclaim. Declaration public int? RoleId { get; set; } Property Value Type Description System.Nullable < System.Int32 > Extension Methods RoleClaimExtensions.ToModel(RoleClaimRequest)"
  },
  "api/PlayGen.SUGAR.Contracts.RoleClaimResponse.html": {
    "href": "api/PlayGen.SUGAR.Contracts.RoleClaimResponse.html",
    "title": "Class RoleClaimResponse | SUGAR",
    "keywords": "Class RoleClaimResponse Encapsulates roleclaim details from the server. Inheritance System.Object RoleClaimResponse Namespace : PlayGen.SUGAR.Contracts Assembly : PlayGen.SUGAR.Contracts.dll Syntax public class RoleClaimResponse : object Examples JSON { RoleId : 1, ClaimId : 1 } Properties ClaimId The ID of the claim related to this roleclaim. Declaration public int ClaimId { get; set; } Property Value Type Description System.Int32 RoleId The ID of the role related to this roleclaim. Declaration public int RoleId { get; set; } Property Value Type Description System.Int32"
  },
  "api/PlayGen.SUGAR.Server.WebAPI.Startup.html": {
    "href": "api/PlayGen.SUGAR.Server.WebAPI.Startup.html",
    "title": "Class Startup | SUGAR",
    "keywords": "Class Startup Inheritance System.Object Startup Namespace : PlayGen.SUGAR.Server.WebAPI Assembly : PlayGen.SUGAR.Server.WebAPI.dll Syntax public class Startup : object Constructors Startup(IConfiguration, IHostingEnvironment) Declaration public Startup(IConfiguration configuration, IHostingEnvironment env) Parameters Type Name Description IConfiguration configuration IHostingEnvironment env Properties Configuration Declaration public IConfiguration Configuration { get; } Property Value Type Description IConfiguration Environment Declaration public IHostingEnvironment Environment { get; } Property Value Type Description IHostingEnvironment Methods Configure(IApplicationBuilder, IHostingEnvironment, ILoggerFactory) Declaration public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory) Parameters Type Name Description IApplicationBuilder app IHostingEnvironment env ILoggerFactory loggerFactory ConfigureServices(IServiceCollection) Declaration public void ConfigureServices(IServiceCollection services) Parameters Type Name Description IServiceCollection services"
  },
  "unity-client/api/PlayGen.SUGAR.Unity.Editor.SetEditorAutoLogin.StringValue.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.Editor.SetEditorAutoLogin.StringValue.html",
    "title": "Class SetEditorAutoLogin.StringValue | SUGAR",
    "keywords": "Class SetEditorAutoLogin.StringValue Inheritance System.Object SetEditorAutoLogin.AutoLoginOption SetEditorAutoLogin.StringValue Inherited Members SetEditorAutoLogin.AutoLoginOption.Label SetEditorAutoLogin.AutoLoginOption.Key SetEditorAutoLogin.AutoLoginOption.SugarRefName SetEditorAutoLogin.AutoLoginOption.Required SetEditorAutoLogin.AutoLoginOption.AutoLoginPrefix SetEditorAutoLogin.AutoLoginOption.DependsOnValue Namespace : PlayGen.SUGAR.Unity.Editor Assembly : PlayGen.SUGAR.Unity.Editor.dll Syntax public class StringValue : SetEditorAutoLogin.AutoLoginOption Constructors StringValue(String) Declaration public StringValue(string value) Parameters Type Name Description System.String value StringValue(String, String, String, String, String, Boolean, Boolean, String) Declaration public StringValue(string label, string key, string sugarRefName, string autoLoginPrefix, string dependsOnValue = \"\", bool required = false, bool hidden = false, string value = \"\") Parameters Type Name Description System.String label System.String key System.String sugarRefName System.String autoLoginPrefix System.String dependsOnValue System.Boolean required System.Boolean hidden System.String value Fields Hidden Declaration public bool Hidden Field Value Type Description System.Boolean Value Declaration public string Value Field Value Type Description System.String"
  },
  "unity-client/api/PlayGen.SUGAR.Unity.Editor.SetEditorAutoLogin.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.Editor.SetEditorAutoLogin.html",
    "title": "Class SetEditorAutoLogin | SUGAR",
    "keywords": "Class SetEditorAutoLogin Inheritance System.Object SetEditorAutoLogin Namespace : PlayGen.SUGAR.Unity.Editor Assembly : PlayGen.SUGAR.Unity.Editor.dll Syntax public static class SetEditorAutoLogin : object Fields AutoLoginOptions Declaration public static List<SetEditorAutoLogin.AutoLoginOption> AutoLoginOptions Field Value Type Description List < SetEditorAutoLogin.AutoLoginOption > Methods DependentValue(String) Declaration public static bool DependentValue(string dependingValueKey) Parameters Type Name Description System.String dependingValueKey Returns Type Description System.Boolean SetAutoLogIn() Declaration public static void SetAutoLogIn()"
  },
  "api/PlayGen.SUGAR.Server.EntityFramework.Controllers.EvaluationDataController.html": {
    "href": "api/PlayGen.SUGAR.Server.EntityFramework.Controllers.EvaluationDataController.html",
    "title": "Class EvaluationDataController | SUGAR",
    "keywords": "Class EvaluationDataController Inheritance System.Object DbController EvaluationDataController Inherited Members DbController.ContextFactory Namespace : PlayGen.SUGAR.Server.EntityFramework.Controllers Assembly : PlayGen.SUGAR.Server.EntityFramework.dll Syntax public class EvaluationDataController : DbController Constructors EvaluationDataController(SUGARContextFactory) Declaration public EvaluationDataController(SUGARContextFactory contextFactory) Parameters Type Name Description SUGARContextFactory contextFactory EvaluationDataController(SUGARContextFactory, EvaluationDataCategory) Declaration public EvaluationDataController(SUGARContextFactory contextFactory, EvaluationDataCategory category) Parameters Type Name Description SUGARContextFactory contextFactory EvaluationDataCategory category Methods CountKeys(Int32, Int32, String, EvaluationDataType, Nullable<DateTime>, Nullable<DateTime>) Declaration public int CountKeys(int gameId, int actorId, string key, EvaluationDataType evaluationDataType, DateTime? start = null, DateTime? end = null) Parameters Type Name Description System.Int32 gameId System.Int32 actorId System.String key EvaluationDataType evaluationDataType System.Nullable < DateTime > start System.Nullable < DateTime > end Returns Type Description System.Int32 Create(List<EvaluationData>) Declaration public void Create(List<EvaluationData> datas) Parameters Type Name Description List < EvaluationData > datas Create(EvaluationData) Declaration public EvaluationData Create(EvaluationData data) Parameters Type Name Description EvaluationData data Returns Type Description EvaluationData Get(ICollection<Int32>) Declaration public List<EvaluationData> Get(ICollection<int> ids) Parameters Type Name Description ICollection < System.Int32 > ids Returns Type Description List < EvaluationData > Get(Int32, ICollection<String>) Declaration public List<EvaluationData> Get(int entityId, ICollection<string> keys = null) Parameters Type Name Description System.Int32 entityId ICollection < System.String > keys Returns Type Description List < EvaluationData > Get(Int32, Int32, ICollection<String>) Declaration public List<EvaluationData> Get(int gameId, int actorId, ICollection<string> keys = null) Parameters Type Name Description System.Int32 gameId System.Int32 actorId ICollection < System.String > keys Returns Type Description List < EvaluationData > Get(Int32, Int32, Nullable<Int32>, ICollection<String>) Declaration public List<EvaluationData> Get(int gameId, int actorId, int? entityId = null, ICollection<string> keys = null) Parameters Type Name Description System.Int32 gameId System.Int32 actorId System.Nullable < System.Int32 > entityId ICollection < System.String > keys Returns Type Description List < EvaluationData > GetActorData(Int32) Declaration public List<EvaluationData> GetActorData(int actorId) Parameters Type Name Description System.Int32 actorId Returns Type Description List < EvaluationData > GetGameActors(Int32) Declaration public List<int> GetGameActors(int gameId) Parameters Type Name Description System.Int32 gameId Returns Type Description List < System.Int32 > GetGameKeyActors(Int32, String, EvaluationDataType, Nullable<DateTime>, Nullable<DateTime>) Declaration public List<int> GetGameKeyActors(int gameId, string key, EvaluationDataType evaluationDataType, DateTime? start = null, DateTime? end = null) Parameters Type Name Description System.Int32 gameId System.String key EvaluationDataType evaluationDataType System.Nullable < DateTime > start System.Nullable < DateTime > end Returns Type Description List < System.Int32 > GetGameKeys(Int32) Declaration public List<KeyValuePair<string, EvaluationDataType>> GetGameKeys(int gameId) Parameters Type Name Description System.Int32 gameId Returns Type Description List < KeyValuePair < System.String , EvaluationDataType >> KeyExists(Int32, Int32, String, EvaluationDataType, Nullable<DateTime>, Nullable<DateTime>) Declaration public bool KeyExists(int gameId, int actorId, string key, EvaluationDataType evaluationDataType, DateTime? start, DateTime? end) Parameters Type Name Description System.Int32 gameId System.Int32 actorId System.String key EvaluationDataType evaluationDataType System.Nullable < DateTime > start System.Nullable < DateTime > end Returns Type Description System.Boolean List(Int32, Int32, String, EvaluationDataType, Nullable<DateTime>, Nullable<DateTime>) Declaration public List<EvaluationData> List(int gameId, int actorId, string key, EvaluationDataType evaluationDataType, DateTime? start = null, DateTime? end = null) Parameters Type Name Description System.Int32 gameId System.Int32 actorId System.String key EvaluationDataType evaluationDataType System.Nullable < DateTime > start System.Nullable < DateTime > end Returns Type Description List < EvaluationData > Query(SUGARContext, Int32, Int32, String, EvaluationDataType, Nullable<DateTime>, Nullable<DateTime>) Declaration public IQueryable<EvaluationData> Query(SUGARContext context, int gameId, int actorId, string key, EvaluationDataType evaluationDataType, DateTime? start = null, DateTime? end = null) Parameters Type Name Description SUGARContext context System.Int32 gameId System.Int32 actorId System.String key EvaluationDataType evaluationDataType System.Nullable < DateTime > start System.Nullable < DateTime > end Returns Type Description IQueryable < EvaluationData > SumFloat(Int32, Int32, String, Nullable<DateTime>, Nullable<DateTime>) Declaration public float SumFloat(int gameId, int actorId, string key, DateTime? start = null, DateTime? end = null) Parameters Type Name Description System.Int32 gameId System.Int32 actorId System.String key System.Nullable < DateTime > start System.Nullable < DateTime > end Returns Type Description System.Single SumLong(Int32, Int32, String, Nullable<DateTime>, Nullable<DateTime>) Declaration public long SumLong(int gameId, int actorId, string key, DateTime? start = null, DateTime? end = null) Parameters Type Name Description System.Int32 gameId System.Int32 actorId System.String key System.Nullable < DateTime > start System.Nullable < DateTime > end Returns Type Description System.Int64 TryGetEarliest(Int32, Int32, String, out EvaluationData, EvaluationDataType, Nullable<DateTime>, Nullable<DateTime>) Declaration public bool TryGetEarliest(int gameId, int actorId, string key, out EvaluationData value, EvaluationDataType evaluationDataType, DateTime? start = null, DateTime? end = null) Parameters Type Name Description System.Int32 gameId System.Int32 actorId System.String key EvaluationData value EvaluationDataType evaluationDataType System.Nullable < DateTime > start System.Nullable < DateTime > end Returns Type Description System.Boolean TryGetLatest(Int32, Int32, String, out EvaluationData, EvaluationDataType, Nullable<DateTime>, Nullable<DateTime>) Declaration public bool TryGetLatest(int gameId, int actorId, string key, out EvaluationData value, EvaluationDataType evaluationDataType, DateTime? start = null, DateTime? end = null) Parameters Type Name Description System.Int32 gameId System.Int32 actorId System.String key EvaluationData value EvaluationDataType evaluationDataType System.Nullable < DateTime > start System.Nullable < DateTime > end Returns Type Description System.Boolean TryGetMax(Int32, Int32, String, out EvaluationData, EvaluationDataType, Nullable<DateTime>, Nullable<DateTime>) Declaration public bool TryGetMax(int gameId, int actorId, string key, out EvaluationData value, EvaluationDataType evaluationDataType, DateTime? start = null, DateTime? end = null) Parameters Type Name Description System.Int32 gameId System.Int32 actorId System.String key EvaluationData value EvaluationDataType evaluationDataType System.Nullable < DateTime > start System.Nullable < DateTime > end Returns Type Description System.Boolean TryGetMin(Int32, Int32, String, out EvaluationData, EvaluationDataType, Nullable<DateTime>, Nullable<DateTime>) Declaration public bool TryGetMin(int gameId, int actorId, string key, out EvaluationData value, EvaluationDataType evaluationDataType, DateTime? start = null, DateTime? end = null) Parameters Type Name Description System.Int32 gameId System.Int32 actorId System.String key EvaluationData value EvaluationDataType evaluationDataType System.Nullable < DateTime > start System.Nullable < DateTime > end Returns Type Description System.Boolean Update(EvaluationData) Declaration public EvaluationData Update(EvaluationData updatedData) Parameters Type Name Description EvaluationData updatedData Returns Type Description EvaluationData"
  },
  "api/PlayGen.SUGAR.Server.EntityFramework.Controllers.GameController.html": {
    "href": "api/PlayGen.SUGAR.Server.EntityFramework.Controllers.GameController.html",
    "title": "Class GameController | SUGAR",
    "keywords": "Class GameController Inheritance System.Object DbController GameController Inherited Members DbController.ContextFactory Namespace : PlayGen.SUGAR.Server.EntityFramework.Controllers Assembly : PlayGen.SUGAR.Server.EntityFramework.dll Syntax public class GameController : DbController Constructors GameController(SUGARContextFactory) Declaration public GameController(SUGARContextFactory contextFactory) Parameters Type Name Description SUGARContextFactory contextFactory Methods Create(Game, SUGARContext) Declaration public Game Create(Game game, SUGARContext context = null) Parameters Type Name Description Game game SUGARContext context Returns Type Description Game Delete(Int32) Declaration public void Delete(int id) Parameters Type Name Description System.Int32 id Get() Declaration public List<Game> Get() Returns Type Description List < Game > Get(Int32) Declaration public Game Get(int id) Parameters Type Name Description System.Int32 id Returns Type Description Game Search(String) Declaration public List<Game> Search(string name) Parameters Type Name Description System.String name Returns Type Description List < Game > Update(Game) Declaration public void Update(Game game) Parameters Type Name Description Game game"
  },
  "api/PlayGen.SUGAR.Server.EntityFramework.Controllers.GroupController.html": {
    "href": "api/PlayGen.SUGAR.Server.EntityFramework.Controllers.GroupController.html",
    "title": "Class GroupController | SUGAR",
    "keywords": "Class GroupController Inheritance System.Object DbController GroupController Inherited Members DbController.ContextFactory Namespace : PlayGen.SUGAR.Server.EntityFramework.Controllers Assembly : PlayGen.SUGAR.Server.EntityFramework.dll Syntax public class GroupController : DbController Constructors GroupController(SUGARContextFactory) Declaration public GroupController(SUGARContextFactory contextFactory) Parameters Type Name Description SUGARContextFactory contextFactory Methods Create(Group, SUGARContext) Declaration public Group Create(Group group, SUGARContext context = null) Parameters Type Name Description Group group SUGARContext context Returns Type Description Group Delete(Int32) Declaration public void Delete(int id) Parameters Type Name Description System.Int32 id Get() Declaration public List<Group> Get() Returns Type Description List < Group > Get(Int32) Declaration public Group Get(int id) Parameters Type Name Description System.Int32 id Returns Type Description Group Get(String) Declaration public List<Group> Get(string name) Parameters Type Name Description System.String name Returns Type Description List < Group > Update(Group) Declaration public void Update(Group group) Parameters Type Name Description Group group"
  },
  "api/PlayGen.SUGAR.Server.EntityFramework.EntityConfigs.EvaluationCriteriaConfig.html": {
    "href": "api/PlayGen.SUGAR.Server.EntityFramework.EntityConfigs.EvaluationCriteriaConfig.html",
    "title": "Class EvaluationCriteriaConfig | SUGAR",
    "keywords": "Class EvaluationCriteriaConfig Inheritance System.Object EvaluationCriteriaConfig Namespace : PlayGen.SUGAR.Server.EntityFramework.EntityConfigs Assembly : PlayGen.SUGAR.Server.EntityFramework.dll Syntax public class EvaluationCriteriaConfig : IEntityTypeConfiguration<EvaluationCriteria> Methods Configure(EntityTypeBuilder<EvaluationCriteria>) Declaration public void Configure(EntityTypeBuilder<EvaluationCriteria> builder) Parameters Type Name Description EntityTypeBuilder < EvaluationCriteria > builder"
  },
  "api/PlayGen.SUGAR.Server.EntityFramework.EntityConfigs.ActorClaimConfig.html": {
    "href": "api/PlayGen.SUGAR.Server.EntityFramework.EntityConfigs.ActorClaimConfig.html",
    "title": "Class ActorClaimConfig | SUGAR",
    "keywords": "Class ActorClaimConfig Inheritance System.Object ActorClaimConfig Namespace : PlayGen.SUGAR.Server.EntityFramework.EntityConfigs Assembly : PlayGen.SUGAR.Server.EntityFramework.dll Syntax public class ActorClaimConfig : IEntityTypeConfiguration<ActorClaim> Methods Configure(EntityTypeBuilder<ActorClaim>) Declaration public void Configure(EntityTypeBuilder<ActorClaim> builder) Parameters Type Name Description EntityTypeBuilder < ActorClaim > builder"
  },
  "api/PlayGen.SUGAR.Server.EntityFramework.EntityConfigs.ActorRoleConfig.html": {
    "href": "api/PlayGen.SUGAR.Server.EntityFramework.EntityConfigs.ActorRoleConfig.html",
    "title": "Class ActorRoleConfig | SUGAR",
    "keywords": "Class ActorRoleConfig Inheritance System.Object ActorRoleConfig Namespace : PlayGen.SUGAR.Server.EntityFramework.EntityConfigs Assembly : PlayGen.SUGAR.Server.EntityFramework.dll Syntax public class ActorRoleConfig : IEntityTypeConfiguration<ActorRole> Methods Configure(EntityTypeBuilder<ActorRole>) Declaration public void Configure(EntityTypeBuilder<ActorRole> builder) Parameters Type Name Description EntityTypeBuilder < ActorRole > builder"
  },
  "api/PlayGen.SUGAR.Server.Model.ActorClaim.html": {
    "href": "api/PlayGen.SUGAR.Server.Model.ActorClaim.html",
    "title": "Class ActorClaim | SUGAR",
    "keywords": "Class ActorClaim Inheritance System.Object ActorClaim Namespace : PlayGen.SUGAR.Server.Model Assembly : PlayGen.SUGAR.Server.Model.dll Syntax public class ActorClaim : IEquatable<ActorClaim> Properties Actor Declaration public Actor Actor { get; set; } Property Value Type Description Actor ActorId Declaration public int ActorId { get; set; } Property Value Type Description System.Int32 Claim Declaration public Claim Claim { get; set; } Property Value Type Description Claim ClaimId Declaration public int ClaimId { get; set; } Property Value Type Description System.Int32 EntityId Declaration public int EntityId { get; set; } Property Value Type Description System.Int32 Id Declaration public int Id { get; set; } Property Value Type Description System.Int32 Methods Equals(ActorClaim) Declaration public bool Equals(ActorClaim other) Parameters Type Name Description ActorClaim other Returns Type Description System.Boolean"
  },
  "api/PlayGen.SUGAR.Server.Model.ActorData.html": {
    "href": "api/PlayGen.SUGAR.Server.Model.ActorData.html",
    "title": "Class ActorData | SUGAR",
    "keywords": "Class ActorData Inheritance System.Object ActorData Implements IModificationHistory Namespace : PlayGen.SUGAR.Server.Model Assembly : PlayGen.SUGAR.Server.Model.dll Syntax public class ActorData : object, IModificationHistory Properties ActorId Declaration public int ActorId { get; set; } Property Value Type Description System.Int32 DateCreated Declaration public DateTime DateCreated { get; set; } Property Value Type Description DateTime DateModified Declaration public DateTime DateModified { get; set; } Property Value Type Description DateTime EvaluationDataType Declaration public EvaluationDataType EvaluationDataType { get; set; } Property Value Type Description EvaluationDataType GameId Declaration public int GameId { get; set; } Property Value Type Description System.Int32 Id Declaration public int Id { get; set; } Property Value Type Description System.Int32 Key Declaration public string Key { get; set; } Property Value Type Description System.String Value Declaration public string Value { get; set; } Property Value Type Description System.String Implements IModificationHistory"
  },
  "api/PlayGen.SUGAR.Server.WebAPI.Extensions.ActorRoleExtensions.html": {
    "href": "api/PlayGen.SUGAR.Server.WebAPI.Extensions.ActorRoleExtensions.html",
    "title": "Class ActorRoleExtensions | SUGAR",
    "keywords": "Class ActorRoleExtensions Inheritance System.Object ActorRoleExtensions Namespace : PlayGen.SUGAR.Server.WebAPI.Extensions Assembly : PlayGen.SUGAR.Server.WebAPI.dll Syntax public static class ActorRoleExtensions : object Methods ToContract(ActorRole) Declaration public static ActorRoleResponse ToContract(this ActorRole actorRoleModel) Parameters Type Name Description ActorRole actorRoleModel Returns Type Description ActorRoleResponse ToContractList(IEnumerable<ActorRole>) Declaration public static IEnumerable<ActorRoleResponse> ToContractList(this IEnumerable<ActorRole> actorRoleModels) Parameters Type Name Description IEnumerable < ActorRole > actorRoleModels Returns Type Description IEnumerable < ActorRoleResponse > ToModel(ActorRoleRequest) Declaration public static ActorRole ToModel(this ActorRoleRequest actorRoleContract) Parameters Type Name Description ActorRoleRequest actorRoleContract Returns Type Description ActorRole"
  },
  "api/PlayGen.SUGAR.Server.WebAPI.Extensions.ClaimExtensions.html": {
    "href": "api/PlayGen.SUGAR.Server.WebAPI.Extensions.ClaimExtensions.html",
    "title": "Class ClaimExtensions | SUGAR",
    "keywords": "Class ClaimExtensions Inheritance System.Object ClaimExtensions Namespace : PlayGen.SUGAR.Server.WebAPI.Extensions Assembly : PlayGen.SUGAR.Server.WebAPI.dll Syntax public static class ClaimExtensions : object Methods ToContract(Claim) Declaration public static ClaimResponse ToContract(this Claim claimModel) Parameters Type Name Description Claim claimModel Returns Type Description ClaimResponse ToContractList(IEnumerable<Claim>) Declaration public static IEnumerable<ClaimResponse> ToContractList(this IEnumerable<Claim> claimModels) Parameters Type Name Description IEnumerable < Claim > claimModels Returns Type Description IEnumerable < ClaimResponse >"
  },
  "api/PlayGen.SUGAR.Server.WebAPI.Program.html": {
    "href": "api/PlayGen.SUGAR.Server.WebAPI.Program.html",
    "title": "Class Program | SUGAR",
    "keywords": "Class Program Inheritance System.Object Program Namespace : PlayGen.SUGAR.Server.WebAPI Assembly : PlayGen.SUGAR.Server.WebAPI.dll Syntax public class Program : object Methods BuildWebHost(String[]) Declaration public static IWebHost BuildWebHost(string[] args) Parameters Type Name Description System.String [] args Returns Type Description IWebHost Main(String[]) Declaration public static void Main(string[] args) Parameters Type Name Description System.String [] args Setup(IWebHost) Declaration public static void Setup(IWebHost host) Parameters Type Name Description IWebHost host"
  },
  "api/PlayGen.SUGAR.Server.WebAPI.Attributes.AllowAnyAPIVersion.html": {
    "href": "api/PlayGen.SUGAR.Server.WebAPI.Attributes.AllowAnyAPIVersion.html",
    "title": "Class AllowAnyAPIVersion | SUGAR",
    "keywords": "Class AllowAnyAPIVersion Attribute to mark methods that don't require matching API versions. Inheritance System.Object AllowAnyAPIVersion Namespace : PlayGen.SUGAR.Server.WebAPI.Attributes Assembly : PlayGen.SUGAR.Server.WebAPI.dll Syntax public class AllowAnyAPIVersion : Attribute"
  },
  "api/PlayGen.SUGAR.Server.WebAPI.Attributes.html": {
    "href": "api/PlayGen.SUGAR.Server.WebAPI.Attributes.html",
    "title": "Namespace PlayGen.SUGAR.Server.WebAPI.Attributes | SUGAR",
    "keywords": "Namespace PlayGen.SUGAR.Server.WebAPI.Attributes Classes AllowAnyAPIVersion Attribute to mark methods that don't require matching API versions. AllowWithoutSession ArgumentsNotNullAttribute Attributes used to flag controller actions where not null arguments may be passed."
  },
  "api/PlayGen.SUGAR.Server.WebAPI.Extensions.AccountExtensions.html": {
    "href": "api/PlayGen.SUGAR.Server.WebAPI.Extensions.AccountExtensions.html",
    "title": "Class AccountExtensions | SUGAR",
    "keywords": "Class AccountExtensions Inheritance System.Object AccountExtensions Namespace : PlayGen.SUGAR.Server.WebAPI.Extensions Assembly : PlayGen.SUGAR.Server.WebAPI.dll Syntax public static class AccountExtensions : object Methods ToContract(Account) Declaration public static AccountResponse ToContract(this Account model) Parameters Type Name Description Account model Returns Type Description AccountResponse ToModel(AccountRequest) Declaration public static Account ToModel(this AccountRequest contract) Parameters Type Name Description AccountRequest contract Returns Type Description Account"
  },
  "api/PlayGen.SUGAR.Client.UserClient.html": {
    "href": "api/PlayGen.SUGAR.Client.UserClient.html",
    "title": "Class UserClient | SUGAR",
    "keywords": "Class UserClient Controller that facilitates User specific operations. Inheritance System.Object ClientBase UserClient Inherited Members ClientBase.AsyncRequestController ClientBase.EvaluationNotifications ClientBase.SerializerSettings ClientBase.EnableEvaluationNotifications(Boolean) ClientBase.ClearSessionData() ClientBase.AreUriParamsValid(Object[]) ClientBase.GetUriBuilder(String, Object[]) ClientBase.Post<TRequest, TResponse>(String, TRequest, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Post<TRequest>(String, TRequest, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Post<TResponse>(String, Object, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Put<TRequest, TResponse>(String, TRequest, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Put<TRequest>(String, TRequest, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.PostPut<TResponse>(String, String, Dictionary<String, String>, Object, IEnumerable<HttpStatusCode>) ClientBase.PostPut(String, String, Dictionary<String, String>, Object, IEnumerable<HttpStatusCode>) ClientBase.Get<TResponse>(String, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Get(String, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Delete<TResponse>(String, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Delete(String, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.GetDelete<TResponse>(String, String, Dictionary<String, String>, IEnumerable<HttpStatusCode>) ClientBase.GetDelete(String, String, Dictionary<String, String>, IEnumerable<HttpStatusCode>) Namespace : PlayGen.SUGAR.Client Assembly : PlayGen.SUGAR.Client.dll Syntax public class UserClient : ClientBase Constructors UserClient(String, IHttpHandler, Dictionary<String, String>, Dictionary<String, String>, IAsyncRequestController, EvaluationNotifications) Declaration public UserClient(string baseAddress, IHttpHandler httpHandler, Dictionary<string, string> constantHeaders, Dictionary<string, string> sessionHeaders, IAsyncRequestController asyncRequestController, EvaluationNotifications evaluationNotifications) Parameters Type Name Description System.String baseAddress IHttpHandler httpHandler Dictionary < System.String , System.String > constantHeaders Dictionary < System.String , System.String > sessionHeaders IAsyncRequestController asyncRequestController EvaluationNotifications evaluationNotifications Methods Get(Int32) Get User that matches provided. Declaration public UserResponse Get(int id) Parameters Type Name Description System.Int32 id User id. Returns Type Description UserResponse UserResponse which matches search criteria. Get(String, Boolean) Get a list of Users that match provided. Declaration public IEnumerable<UserResponse> Get(string name, bool exactMatch = false) Parameters Type Name Description System.String name Array of User names. System.Boolean exactMatch Match the name exactly. Returns Type Description IEnumerable < UserResponse > A list of UserResponse which match the search criteria. GetAsync(Int32, Action<UserResponse>, Action<Exception>) Declaration public void GetAsync(int id, Action<UserResponse> onSuccess, Action<Exception> onError) Parameters Type Name Description System.Int32 id Action < UserResponse > onSuccess Action < Exception > onError GetAsync(String, Action<IEnumerable<UserResponse>>, Action<Exception>) Declaration public void GetAsync(string name, Action<IEnumerable<UserResponse>> onSuccess, Action<Exception> onError) Parameters Type Name Description System.String name Action < IEnumerable < UserResponse >> onSuccess Action < Exception > onError Update(Int32, UserRequest) Update an existing User. Declaration public UserResponse Update(int id, UserRequest user) Parameters Type Name Description System.Int32 id Id of the existing User. UserRequest user UserRequest object that holds the details of the User. Returns Type Description UserResponse UpdateAsync(Int32, UserRequest, Action, Action<Exception>) Declaration public void UpdateAsync(int id, UserRequest user, Action onSuccess, Action<Exception> onError) Parameters Type Name Description System.Int32 id UserRequest user Action onSuccess Action < Exception > onError"
  },
  "api/PlayGen.SUGAR.Common.Authorization.ClaimScope.html": {
    "href": "api/PlayGen.SUGAR.Common.Authorization.ClaimScope.html",
    "title": "Enum ClaimScope | SUGAR",
    "keywords": "Enum ClaimScope Namespace : PlayGen.SUGAR.Common.Authorization Assembly : PlayGen.SUGAR.Common.dll Syntax public enum ClaimScope : int Fields Name Description Account Game Global Group Role User Extension Methods AuthorizationExtensions.Key()"
  },
  "api/PlayGen.SUGAR.Common.EvaluationType.html": {
    "href": "api/PlayGen.SUGAR.Common.EvaluationType.html",
    "title": "Enum EvaluationType | SUGAR",
    "keywords": "Enum EvaluationType Enum for selecting the category of evaluation being stored or looked for. Namespace : PlayGen.SUGAR.Common Assembly : PlayGen.SUGAR.Common.dll Syntax public enum EvaluationType : int Fields Name Description Achievement Achievement evaluation type Skill Skill evaluation type Extension Methods EvaluationExtensions.ToEvaluationDataCategory()"
  },
  "api/PlayGen.SUGAR.Common.RegexUtil.html": {
    "href": "api/PlayGen.SUGAR.Common.RegexUtil.html",
    "title": "Class RegexUtil | SUGAR",
    "keywords": "Class RegexUtil Inheritance System.Object RegexUtil Namespace : PlayGen.SUGAR.Common Assembly : PlayGen.SUGAR.Common.dll Syntax public static class RegexUtil : object Fields AlphaNumericUnderscoreNotEmpty Declaration public const string AlphaNumericUnderscoreNotEmpty = null Field Value Type Description System.String AlphaNumericUnderscoreNotEmptyRegex Declaration public static Regex AlphaNumericUnderscoreNotEmptyRegex Field Value Type Description Regex Methods IsAlphaNumericUnderscoreNotEmpty(String) Declaration public static bool IsAlphaNumericUnderscoreNotEmpty(string check) Parameters Type Name Description System.String check Returns Type Description System.Boolean"
  },
  "api/PlayGen.SUGAR.Server.Authentication.Extensions.AuthorizationTokenExtensions.html": {
    "href": "api/PlayGen.SUGAR.Server.Authentication.Extensions.AuthorizationTokenExtensions.html",
    "title": "Class AuthorizationTokenExtensions | SUGAR",
    "keywords": "Class AuthorizationTokenExtensions Inheritance System.Object AuthorizationTokenExtensions Namespace : PlayGen.SUGAR.Server.Authentication.Extensions Assembly : PlayGen.SUGAR.Server.Authentication.dll Syntax public static class AuthorizationTokenExtensions : object Methods GetClaimDateTime(IHeaderDictionary, String) Declaration public static DateTime GetClaimDateTime(this IHeaderDictionary headers, string type) Parameters Type Name Description IHeaderDictionary headers System.String type Returns Type Description DateTime GetClaimInt(IHeaderDictionary, String) Declaration public static int GetClaimInt(this IHeaderDictionary headers, string type) Parameters Type Name Description IHeaderDictionary headers System.String type Returns Type Description System.Int32 GetClaimLong(IHeaderDictionary, String) Declaration public static long GetClaimLong(this IHeaderDictionary headers, string type) Parameters Type Name Description IHeaderDictionary headers System.String type Returns Type Description System.Int64 TryGetClaim(IHeaderDictionary, String, out DateTime) Declaration public static bool TryGetClaim(this IHeaderDictionary headers, string type, out DateTime value) Parameters Type Name Description IHeaderDictionary headers System.String type DateTime value Returns Type Description System.Boolean TryGetClaim(IHeaderDictionary, String, out Int32) Declaration public static bool TryGetClaim(this IHeaderDictionary headers, string type, out int value) Parameters Type Name Description IHeaderDictionary headers System.String type System.Int32 value Returns Type Description System.Boolean TryGetClaim(IHeaderDictionary, String, out Int64) Declaration public static bool TryGetClaim(this IHeaderDictionary headers, string type, out long value) Parameters Type Name Description IHeaderDictionary headers System.String type System.Int64 value Returns Type Description System.Boolean"
  },
  "api/PlayGen.SUGAR.Server.Core.Authorization.AuthorizationHandler.html": {
    "href": "api/PlayGen.SUGAR.Server.Core.Authorization.AuthorizationHandler.html",
    "title": "Class AuthorizationHandler | SUGAR",
    "keywords": "Class AuthorizationHandler Inheritance System.Object AuthorizationHandler Namespace : PlayGen.SUGAR.Server.Core.Authorization Assembly : PlayGen.SUGAR.Server.Core.dll Syntax public class AuthorizationHandler : AuthorizationHandler<AuthorizationRequirement, int> Constructors AuthorizationHandler(ActorClaimController, ClaimController) Declaration public AuthorizationHandler(ActorClaimController actorClaimDbController, ClaimController claimDbController) Parameters Type Name Description ActorClaimController actorClaimDbController ClaimController claimDbController Methods HandleRequirementAsync(AuthorizationHandlerContext, AuthorizationRequirement, Int32) Declaration protected override Task HandleRequirementAsync(AuthorizationHandlerContext context, AuthorizationRequirement requirement, int entityId) Parameters Type Name Description AuthorizationHandlerContext context AuthorizationRequirement requirement System.Int32 entityId Returns Type Description Task"
  },
  "api/PlayGen.SUGAR.Server.Core.Authorization.AuthorizationHandlerWithNull.html": {
    "href": "api/PlayGen.SUGAR.Server.Core.Authorization.AuthorizationHandlerWithNull.html",
    "title": "Class AuthorizationHandlerWithNull | SUGAR",
    "keywords": "Class AuthorizationHandlerWithNull Inheritance System.Object AuthorizationHandlerWithNull Namespace : PlayGen.SUGAR.Server.Core.Authorization Assembly : PlayGen.SUGAR.Server.Core.dll Syntax public class AuthorizationHandlerWithNull : AuthorizationHandler<AuthorizationRequirement> Constructors AuthorizationHandlerWithNull(ActorClaimController, ClaimController) Declaration public AuthorizationHandlerWithNull(ActorClaimController actorClaimDbController, ClaimController claimDbController) Parameters Type Name Description ActorClaimController actorClaimDbController ClaimController claimDbController Methods HandleRequirementAsync(AuthorizationHandlerContext, AuthorizationRequirement) Declaration protected override Task HandleRequirementAsync(AuthorizationHandlerContext context, AuthorizationRequirement requirement) Parameters Type Name Description AuthorizationHandlerContext context AuthorizationRequirement requirement Returns Type Description Task"
  },
  "api/PlayGen.SUGAR.Server.Core.Controllers.GameDataController.html": {
    "href": "api/PlayGen.SUGAR.Server.Core.Controllers.GameDataController.html",
    "title": "Class GameDataController | SUGAR",
    "keywords": "Class GameDataController Inheritance System.Object GameDataController Namespace : PlayGen.SUGAR.Server.Core.Controllers Assembly : PlayGen.SUGAR.Server.Core.dll Syntax public class GameDataController : object Constructors GameDataController(ILogger<GameDataController>, ILogger<EvaluationDataController>, SUGARContextFactory, ActorController) Declaration public GameDataController(ILogger<GameDataController> logger, ILogger<EvaluationDataController> evaluationDataLogger, SUGARContextFactory contextFactory, ActorController actorController) Parameters Type Name Description ILogger < GameDataController > logger ILogger < EvaluationDataController > evaluationDataLogger SUGARContextFactory contextFactory ActorController actorController Methods Add(List<EvaluationData>) Declaration public void Add(List<EvaluationData> evaluationData) Parameters Type Name Description List < EvaluationData > evaluationData Add(EvaluationData) Declaration public EvaluationData Add(EvaluationData newData) Parameters Type Name Description EvaluationData newData Returns Type Description EvaluationData Get(Int32, Int32, String, EvaluationDataType, LeaderboardType) Declaration public EvaluationData Get(int gameId, int actorId, string key, EvaluationDataType dataType, LeaderboardType sortType) Parameters Type Name Description System.Int32 gameId System.Int32 actorId System.String key EvaluationDataType dataType LeaderboardType sortType Returns Type Description EvaluationData Get(Int32, Int32, String[]) Declaration public List<EvaluationData> Get(int gameId, int actorId, params string[] keys) Parameters Type Name Description System.Int32 gameId System.Int32 actorId System.String [] keys Returns Type Description List < EvaluationData > GetActorData(Int32) Declaration public List<EvaluationData> GetActorData(int actorId) Parameters Type Name Description System.Int32 actorId Returns Type Description List < EvaluationData > GetGameActors(Int32) Declaration public List<Actor> GetGameActors(int gameId) Parameters Type Name Description System.Int32 gameId Returns Type Description List < Actor > GetGameKeys(Int32) Declaration public List<KeyValuePair<string, EvaluationDataType>> GetGameKeys(int gameId) Parameters Type Name Description System.Int32 gameId Returns Type Description List < KeyValuePair < System.String , EvaluationDataType >>"
  },
  "development/docker.html": {
    "href": "development/docker.html",
    "title": "Docker | SUGAR",
    "keywords": "Docker Requirements Linux or Windows with Subsytem for Linux enabled . Docker : Lowest tested version is 17. Docker Compose : Compose file format is version 2. Quick Start To run the SUGAR docker services without having to build the SUGAR image: Make sure you've got the requirements inatalled . Run the docker/docker-compose_image_deploy_map-port.bat (or .sh on linux) script. When docker has finished deploying, check that the server is running by visiting http://localhost:59400 where you should see the SUGAR documentation. This will use the latest docker image of SUGAR from the Automated Builds and create and link the database container. SUGAR Admin Interface: If you want to use the SUGAR Admin Interface on your local machine too: Download the repository . Run the relevant docker_build_and_deploy_map_ports file. Browse to the mapped url e.g: \" http://localhost:59440 \". Automated Builds Using the automated build service , Docker Hub does a build of SUGAR each time a commit is pushed to the master branch on GitHub . You can find and download the image here . Building To build and run SUGAR, run the docker/docker-compose_build_deploy script. This will build the SUGAR image using the Dockerfile in the root of the repository, and then create and link the database container. Configuration Dockerfile The Dockerfile for SUGAR is in the project root. It is built off the base image recommended by Microsoft for .NETCoreApp2.0 applications. It copies the contents of the SUGAR repository into the filesystem of the container. The container contains the necessary environment to build this project thanks to the base image provided by Microsoft. The next steps restore the NuGet packages, build the project and launch the server via the PlayGen.SUGAR.Server.WebAPI entrypoint. Docker-Compose file The SUGAR docker-compose files have been split into 3 parts: docker-compose.image.yml : this has the configuration to pull the SUGAR image from DockerHub. docker-compose.build.yml : this has the configuration to build SUGAR image from source. docker-compose.map-port.yml : this has the configuration to expose and map the sugar server to a port on the local machine. docker-compose.base.yml : this contains all the shared settings for the SUGAR container as well as the database and inter-container links. docker-compose.image.yml See the docker/docker-compose_image_deploy script. It uses this in conjunction with docker-compose.base.yml . docker-compose.build.yml See the docker/docker-compose_build_deploy script. It uses this in conjunction with docker-compose.base.yml . docker-compose.map-port.yml See the docker/docker-compose_build_deploy_map-port or docker/docker-compose_image_deploy_map-port scripts. It uses this in conjunction with the other docker compose files. This will map port 59400 of the SUGAR server container to 59400 on your local machine. Test that it has done so by going to http://localhost:59400 . docker-compose.base.yml The SUGAR compose configuration requires the sugar-mariadb container which hosts the databse. This is simply built from the mariadb image. When launching SUGAR, one of the first steps it does is to setup the database which requires it to be able to connect to the database within the sugar-mariadb container. If the database takes longer to startup than the SUGAR server, the server will attempt to connect to the database and fail. This is the reason for the wait-for-db container. It's purpose is to stay active until the database is fully initialized and ready to accept connections. This compose file along with the command sequence in the docker-compose_deploy scripts ensures that the container SUGAR is only launched after the database is ready."
  },
  "development/documentation.html": {
    "href": "development/documentation.html",
    "title": "Documentation | SUGAR",
    "keywords": "Documentation SUGAR's documentation is generated using DocFX using tripple slash code comments and Swagger to generate the REST API. Requirements DocFX Version 2.35.4.0 \"docfx\" as a command needs to be availabe via the command console for the scripts to work. SUGAR-Unity documentation pre-built Process There are various build scripts in doc/tools to build, copy and serve the docs. Tool Function all_and_serve.bat Use this test that the docs work locally on your machine all_and_copy.bat Use this to generate the docs to be hosted by the SUGAR server. Note: After generating the latest documentation it should be added to source control as it won't currently be built by the server's docker file. Gotchas DocFX Version 2.28.3.0 is known to not build metadata properly, so the version specified in requirements should be used. Unity-Client The Unity Client documentation can be bundled and hosted with the SUGAR server documentation. Requirements It requires the Unity Client repository folder to be at the same level as the SUGAR server e.g: Root sugar : the SUGAR server repository. sugar-unity : the SUGAR Unity Client repository. Process Follow this guide to build the Unity Client's documentation. Hosting Docs are built and copied to the PlayGen.SUGAR.Server.WebAPI.Server/wwwroot where they are served from."
  },
  "development/index.html": {
    "href": "development/index.html",
    "title": "Development and Deployment | SUGAR",
    "keywords": "Development and Deployment SUGAR is currently in active development and subject to change. We are committed to delivering a feature complete version of the components by the end of 2017. For upcoming features and development direction see the roadmap Source Repositories All source code is provided under the Apache License, Version 2.0 and is hosten on GitHub. We welcome pull requests for bug fixes and engagement in discussion on feature development. API Service Repository Admin Web UI Repository Unity Demo Repository API Service The SUGAR API Service is build using ASP.NET Core (MVC/WebAPI). Currently the service is built for the .NETCoreApp 2.0 target so will only run on Windows systems, however this will soon be made compatible with the cross-platform NetStandard runtimes. Building the WebAPI project produces a Windows or Linux executable that can be executed directly to run the service in a console mode for debugging, or alternatively the service can be hosted in IIS or IIS express. SUGAR is setup to also run in a windows or linux hosted docker container. See the docker section . Database The service currently uses MySQL for it's data storage, we reccomend using the MariaDB release if you are hosting your own database instance. In the near future the gameData key/value storage will most likely be migrated to a NoSQL data store, however no decision on this technology has been taken yet. Development Dependencies Visual Studio 2017 Version 15.4.5 minimum. .NET Core SDK for your platform The API documentation is generated with DocFX Building the entire solution including client assemblies has additional requirements for compatibility with Unity3D See Below IIS Hosting The server requires the .NET Core (Server Hosting) runtime URL Rewrite is reccomended to redirect HTTP requests to a HTTPS endpoint, using a web.config rewrite rule as below <rewrite> <rules> <rule name=\"HTTPS-Upgrade\" enabled=\"true\" stopProcessing=\"true\"> <match url=\"(.*)\" /> <conditions> <add input=\"{HTTPS}\" pattern=\"^OFF$\" /> </conditions> <action type=\"Redirect\" url=\"https://{HTTP_HOST}/{R:1}\" /> </rule> </rules> </rewrite> API Client The API client provides a C# interface to the RESTful API exposed by the service. The client is intended to be hosted in C# projects and in Unity3D applications. Development Dependencies JSON Serialization .NET MVC Uses the tried and tested JSON.NET library from Newtonsoft. For API consistency the C# client uses JSON.net for explicit serialization operations, however the generally released version of this library utilises System.Reflection operations that are not available in Unity's WebGL environment. This issue has been addressed by SaladLab who have produced a lightweight version of the JSON.Net library specifically for use in Unity projects ( https://github.com/SaladLab/Json.Net.Unity3D ). We have decided to use this library for the C# client regardless of the target platform as it provided all required functionality. SaladLab only currently provide this in the unitypackage format, we have packaged this for NuGet which can currently be downloaded here , however this will be published to the nuget.org package feed in the near future. For details on how to configure a local filesystem based NuGeT package feed see here . Unity Unity uses Mono in place of Microsoft's .NET implementation and provides .NET 3.5 compatibility, because of this there a number or limitations on different platforms and those that we are currently aware of are detailed below: WebClient In Unity WebGL builds the socket operations performed by the System.Net.WebClient are not available and an alternative method must be used to perform HTTP operations. This has been solved in the PlayGen.SUGAR.Client by delegating the HTTP operations to a platform specific implementation. Unity WebGL applications can use the browsers native XMLHttpRequest via external calls to a JavaScript library embedded in the project. TODO: JSLib installation instructions HTTPS Mono does not use the system certificate store and by default has no root trust certificates present causing all SSL certificates to be treated as untrusted. Mono can be configured to trust certificates from any source via the methods detailed here , however there does not currently appear to be a way to use the machines trust store by default. This issue is discussed extensively by the Unity community We have not currently arrived at a satisfactory solution with the options below being considered at present: Validate the fingerprint of specific certifictes by intercepting the validation operation as detailed here Add specific certificates corresponding to the root of trust for your instance of the API service to the mono trust store during application installation or initialization Both of these methods have limitations that undermine the security and maintenance of the system as approved certificates or fingerprints must be embedded in the application deployable. Application updates must be deployed if server certificates change. Security could be undermined if application integrity cannot be verified and binaries were tampered with by a 3rd party. Certificate revocation checks would have to be performed explicitly and could also be subject to tampering."
  },
  "unity-client/api/index.html": {
    "href": "unity-client/api/index.html",
    "title": "| SUGAR",
    "keywords": "C# API Documentation"
  },
  "development/versioning.html": {
    "href": "development/versioning.html",
    "title": "Versioning | SUGAR",
    "keywords": "Versioning The Server and Client share an API Version, used to ensure compatibility. The API Version is made up of three parts in the format Major . Minor . Build version numbers. Major : Should increment when API Breaking changes are added. Minor : Should increment for Fixes and Additions that won't cause existing clients with the same Major version to break. Build : Should increment for every build. Version compatibility is ensured by the APIVersion filter in the PlayGen.SUGAR.Server.WebAPI project. When the Client sends a request, it must include the API Version string with the key \"APIVersion\" as a header. The APIVersion is shared between Server and Client projects in PlayGen.SUGAR.Common.APIVersion."
  },
  "features/achievement.html": {
    "href": "features/achievement.html",
    "title": "Achievement | SUGAR",
    "keywords": "Achievement Achievements provide a flexible and simple way to increase user engagement, tracking their actions within and across multiple games. Achievements may be viewed as goals that individual or multiple actors can acquire through meeting one or more criteria. The criteria is flexible and can be written by the game developer or provided by the platform based on any game specific action. Achievements can be binary or incremental, ie. (complete/not complete) or have levels or percentages of progression toward their completion. They can be global, across all games, or associated with a single game. Note Both Achievements and Skills build on \"Evaluations\" which may contain a multitude of \"EvaluationCriteria\", specifiying the conditions that need to be satisfied for this specific Evaluation to be considered complete. Features Add/Update/Delete achievements Search for achievements by Id/Game/Name/Actor API Client AchievementClient Contracts EvaluationCriteriaCreateRequest EvaluationCriteriaUpdateRequest EvaluationCriteriaResponse EvaluationProgressResponse EvaluationCreateRequest EvaluationUpdateRequest EvaluationResponse EvaluationDataType CriteriaQueryType ComparisonType ActorType CriteriaScope Examples Specifying an achievement This example will describe how to implement the 'Slay 10 Enemies!' achievement. An achievement must be specified with an EvaluationCreateRequest with a list of EvaluationCriteriaCreateRequest that will be evalutated against to determine progress. All 'EnemiesSlain' keys will be checked in gameData and whether the sum of their values is greater than or equal to 10. public SUGARClient sugarClient = new SUGARClient(BaseUri); private AchievementClient _achievementClient; private int _gameId; private int _userId; private void SetUpAchievement() { // create instance of the achievement client _achievementClient = sugarClient.Achievement; // create an AchievementCriteria list var achievementCriteria = new List<EvaluationCriteriaCreateRequest>() { new EvaluationCriteriaCreateRequest() { DataType = GameDataType.Long, Value = \"10\", Key = \"EnemiesSlain\", CriteriaQueryType = CriteriaQueryType.Sum, ComparisonType = ComparisonType.GreaterOrEqual, Scope = CriteriaScope.Actor } }; // place the criteria inside an AchievementRequest var achievementRequest = new EvaluationCreateRequest() { GameId = _gameId, Name = \"Slay 10 Enemies!\", ActorType = ActorType.User, Token = \"slay_10_enemies\", CompletionCriteria = EvaluationCriteria }; // create the achievement _achievementClient.Create(EvaluationCreateRequest); } Submitting data for when somthing which may be used to evaluate progress towards an Achievement An achievement uses keys in GameData that match its EvaluationCriteriaCreateRequest . This data is submitted at points in the game which demonstrate progress towards the achievement (as well as other uses). private void SlayEnemies(int quantity) { // *Enemy Slaying Code* // // create instance of GameDataClient var gameDataClient = sugarClient.GameData; // create GameDataRequest var gameDataRequest = new GameDataRequest() { GameId = _gameId, ActorId = _userId, GameDataType = GameDataType.Long, Value = quantity, Key = \"EnemiesSlain\" }; // add the GameData gameDataClient.Add(gameDataRequest); } Automatically recieve achievemnt progress completion notifications: Enable and use automatic notifications: _achievementClient.EnableNotifications(true); And then poll to see if any skills have been recieved. EvaluationNotification notification; if(_achievementClient.TryGetPendingNotification(out notification)) { // There was a penging achievement notification, so do something with it Log.Info($\"Got achievement notification: {notification.Name} \" + $\"with progress: {notification.Progress}\"); } Requesting specific achievement progress using the AchievementClient and specifying the GameId, ActorId and Token, returns an EvaluationProgressResponse object for that Actor's progress towards the achievement in that game. private float CheckAchievementProgress() { // Check the user's progress towards the achievements in the specified game var achievementProgressResponse = _achievementClient.GetAchievementProgress ( \"slay_10_enemies\", _gameId, _userId ); // Output the progress return achivementProgressResponse.Progress; } Roadmap Portable achievement system. Many game networks such as the Google play services, Apple gamkits, Microsoft game centre, Facebook game services and Steam Works offer achievements. Integrating multiple achievement systems into a game is time consuming. Additionally platform providers regularly update their APIs, creating a head-ache for keeping up-to-date with multiple systems. The achievement system will provide the ability for the actors’ achievement to be recorded automatically against other 3rd party systems. Challenge system. Achievement system will be extended by adding temporal (time based) and ownership component. This extension will be referred to as Challenge. Challenges may be seen as achievements that can be suggested to actors, gifted by one actor to another, accepted or rejected by an actor, as well as tracked to see if actors attempted or abandoned them."
  },
  "features/actor.html": {
    "href": "features/actor.html",
    "title": "Actor | SUGAR",
    "keywords": "Actor An Actor can represent a Users or a Group . Where the term Actor is used, one may substitute User or Group."
  },
  "features/evaluationData.html": {
    "href": "features/evaluationData.html",
    "title": "EvaluationData | SUGAR",
    "keywords": "EvaluationData EvaluationData is a storage system, following a key-value structure. It is used by SUGAR features and provides flexibility in providing custom game-specific storage solutions. EvaluationData provides storage for Achievement , Skills , Resources , Matches and GameData . EvaluationData is queried by Achievement , Leaderboard and Skills in their evaluations."
  },
  "features/game.html": {
    "href": "features/game.html",
    "title": "Game | SUGAR",
    "keywords": "Game A game is an individual application as defined by the platform. A single instance of the platform has the capacity to service multiple games. This allows for users to take part in multiple of games under the same login and to potentially share resource across games depending on the game design. Features CRUD Game CRUD Game Metadata Game Name Game Description Game Skills (Skills) Search Game (ID/Name/Actor) API Client GameClient Contracts GameRequest GameResponse Examples Create a game Creating a game using the GameClient 's Create function, passing a GameRequest object as the parameter. This example will be used to create a game with the name \"Thrones\" and store its Id from the returned GameResponse . public SUGARClient sugarClient = new SUGARClient(BaseUri); private GameClient _gameClient; private int _gameId; private void CreateGame() { // create instance of the game client _gameClient = sugarClient.Game; // create a GameRequest var gameRequest = new GameRequest { Name = \"Thrones\" }; // create the game and store the response var gameResponse = _gameClient.Create(gameRequest); // store the id of the game for use in other features _gameId = gameResponse.Id; } Retreiving a game Checking if a Game exists or storing the id of the Game prior to allowing the user to play may be vital. This is done using GameClient 's Get function and passing the name of the game to match. private int CheckGame() { // check for the game and store the responses var gameResponses = _gameClient.Get(\"Thrones\"); int id = -1; foreach (response in gameResponses) { // check if the name matches the desired game exactly if (response.Name == \"Thrones\") { // store the game's id id = response.Id; } } return id; }"
  },
  "features/gameData.html": {
    "href": "features/gameData.html",
    "title": "GameData | SUGAR",
    "keywords": "GameData GameData provides a method of recording and querying key value pairs of data specific to a certain Game and optional Actor . Features CRUD Resources Search Resources (ID/Name/Actor/Relationship) Gift resource from one actor to another Features CRD GameData Search GameData (by ID/Game/Actor/Skill) GameData Categories General Data - All information that does not fit into any other category. Example - A Users gaining 10 points in level 2. Resources - Long-only data which can be transferred to and from Actor within the system. Example - A user collecting 10 gold, a consumable item within the game. Achievements - Stored completion of all EvaluationCriteriaCreateRequest for an achievement. Example - A user meeting the criteria for the achievement \"Score 10,000 points\" in a game. Skills - Stored completion of all EvaluationCriteriaCreateRequest for an skill. Example - A user meeting the criteria for the \"Social\" skill in a game. API Client GameDataClient Contracts EvaluationDataRequest EvaluationDataResponse CriteriaQueryType Examples Submitting custom GameData Custom GameData is submitted using the GameDataClient 's Add function with a EvaluationDataRequest as the parameter. This explains how to track the number of dragon eggs hatched by the user, specifying \"EggHatched\" as the key. public SUGARClient sugarClient = new SUGARClient(BaseUri); private GameDataClient _gameDataClient; private int _gameId; private int _userId; private void OnEggHatched() { // create instance of GameDataClient var gameDataClient = sugarClient.GameData; // create GameDataRequest var gameDataRequest = new GameDataRequest() { GameId = _gameId, ActorId = _userId, GameDataType = GameDataType.Long, Value = \"1\", Key = \"EggHatched\" }; // add the GameData gameDataClient.Add(gameDataRequest); } Querying for GameData GameData is retreived using the GameDataClient 's Get function with the ActorId and GameId you want to query as parameters. The parameters also takes a list of keys you want to find entries for in gameData. This example shows how to retrieve the user's \"EggHatched\" EvaluationDataResponse objects and count them. private long GetEggsHatched() { // add the GameData var gameDataResponses = gameDataClient.Get ( _actorId, _gameId, new string[] { \"EggHatched\" } ); long totalClicks = 0; // count values from each GameDataResponse foreach (var response in gameDataResponses) { totalClicks += long.Parse(response.Value); } return totalClicks; }"
  },
  "features/group.html": {
    "href": "features/group.html",
    "title": "Group | SUGAR",
    "keywords": "Group Groups are actors representing collection of actors. They may be individual or multiple game persistent. Groups can be moderated through administrator tools or users, or set up and managed through the game as described by the game designers. Relationships describe which actors belong to which groups. Groups can have associated achievements, which can be set for all members of a group to complete. Actors can join, leave or add another actor to a group. Features CRUD Groups CRUD Group Metadata Group Name Group Description Group Icon Update Group Membership Search Group (ID/name/Actor) API Client GroupClient Contracts ActorResponse ActorRequest Examples Create a group This example will show how to create a group called \"Wildlings\" using the GroupClient 's Create function, passing an ActorRequest as the parameter and storing the group's id returned inside the ActorResponse object. public SUGARClient sugarClient = new SUGARClient(BaseUri); private GroupClient _groupClient; private int _groupId; private void CreateGroup() { // create instance of the game client _groupClient = sugarClient.Group; // create an ActorRequest var actorRequest = new ActorRequest { Name = \"Wildlings\" }; // create the group and store the response var actorResponse = _groupClient.Create(actorRequest); // store the id of the game for use in other functions _groupId = actorResponse.Id; } Retreiving a game Checking if a Group exists or finding the id of a Group may be desired functionalities. This is done using GroupClient 's Get function and passing the name of the group to match. private bool CheckGroupExists() { // check for the game and store the responses var actorResponses = _groupClient.Get(\"Wildlings\"); foreach (response in actorResponses) { // check if the name matches the desired game exactly if (response.Name == \"Wildlings\") { Console.WriteLine(\"Sorry, the group name has been taken, try another one\"); return false; } } return true; } Roadmap Groups Alliance. Provide the ability for relationship between groups. To form an <xref:alliance> Group leader. Providing the ability for individual actors to control the group membership, to add or remove other actors. Extended group achievements. Provide the ability to set the parameters such as number of actors required to meet the achievement criteria before it’s considered complete."
  },
  "features/index.html": {
    "href": "features/index.html",
    "title": "Feature Overview | SUGAR",
    "keywords": "Feature Overview This section provides detailed description of SUGAR’s features. The high level features of SUGAR in the current version (July 2016) can be grouped under : Game : Individual instance of application. Actor : Individuals or groups using the system. User : Individual user of the system. Group : Group of actors. Relationship : Connections between two or more actors. Achievement : Tasks accomplishable by actors, either binary or incrementally. Skill : Represent a players proficiency or ability. Leaderboard : Comparison of measurements between actors, resources, skills. EvaluationData : Storage system for game and system objects. GameData : Game specific data storage. Resource : Transferable and consumable item storage. Matches : Matches and match specific data storage. Roadmap See Roadmap for new features being implemented for future releases."
  },
  "features/leaderboard.html": {
    "href": "features/leaderboard.html",
    "title": "Leaderboard | SUGAR",
    "keywords": "Leaderboard Leaderboards provide a visual comparison tool for measurements of resources or objects associated with actors. A wide variety of leaderboards are supported including those based achievement or resource based on individual, group or single and multiple games. Leaderboards can utilise any GameData , Actor , Skill or Resource . Features Generate a leaderboard by: Game / Resource / Skill / Actor ActorType (Group, Player) Key (from GameData, Resource, Actor, Skill) Aggregation of values by: Frequency Summation Earliest/Latest occurrence Highest/Lowest overall occurrence Filter results by threshold values (e.g. top 20 or around current player's rank) or Relationships API Client LeaderboardClient Contracts LeaderboardRequest LeaderboardResponse LeaderboardStandingsRequest LeaderboardStandingsResponse LeaderboardType LeaderboardFilterType EvaluationDataType CriteriaScope ActorType Examples Create a leaderboard This example shows how to create a leaderboard which will display the highest rankings for the combined total of kingdoms the players have conquered. This uses LeaderboardClient 's Create function, passing a LeaderboardRequest as the parameter. This request will specify the identifier token \"MOST_KINGDOMS_CONQUERED\", key for which to check in GameData \"KingdomsConquered\" and LeaderboardType Cumulative to add all the values of every entry matching the key. The code will then store the Token of the leaderboard from the LeaderboardResponse for later use. public SUGARClient sugarClient = new SUGARClient(BaseUri); private LeaderboardClient _leaderboardClient; private int _gameId; private string _leaderboardToken; private void CreateLeaderboard() { // create instance of the leaderboard client _leaderboardClient = sugarClient.Leaderboard; // create a LeaderboardRequest var leaderboardRequest = new LeaderboardRequest { GameId = _gameId, Name = \"Most Kingdoms Conquered\", Token = \"MOST_KINGDOMS_CONQUERED\", Key = \"KingdomsConquered\", ActorType = ActorType.User, GameDataType = GameDataType.Long, CriteriaScope = CriteriaScope.Actor, LeaderboardType = LeaderboardType.Cumulative }; // create the leaderboard and store the response var leaderboardResponse = _leaderboardClient.Create(leaderboardRequest); // store the token of the leaderboard for use in other functions _leaderboardToken = leaderboardResponse.Token; } Get standings for a leaderboard To display the leaderboard inside the game, the current standings of the leaderboard must be retreived. The LeaderboardClient 's CreateGetLeaderboardStandings function is called by passing a LeaderboardStandingsRequest object as the parameter, which specifies filters for the returned results. This example will retreive the 8 rankings nearest to the player by setting the LeaderboardFilterType to Near, the limit to 8 and offset as 0. The returned LeaderboardStandingsResponse contains all the data to populate the visual representation of the leaderboard. private void GetLeaderboardStadings() { // create a LeaderboardStandingsRequest var leaderboardStandingsRequest = new LeaderboardStandingsRequest { LeaderboardToken = _leaderboardToken, GameId = _gameId, ActorId = _userId, LeaderboardFilterType = LeaderboardFilterType.Near, PageLimit = 8, PageOffset = 0 }; // retreive the standings and store the responses var leaderboardStandingsResponse = _leaderboardClient.CreateGetLeaderboardStandings(leaderboardStandingReqeusts); // output the leaderboard foreach (var standing in leaderboardStandings) { Console.WriteLine(standing.Ranking.ToString() + \" | \" + standing.ActorName + \" | Conquered: \" + standing.Value); } }"
  },
  "features/match.html": {
    "href": "features/match.html",
    "title": "Matches | SUGAR",
    "keywords": "Matches A match is an entity with a start time, end time, game and creator. It can have various data attrubuted to it via the MatchData mechanism. Features CRUD Match Search Matches with filters: game, creator, start time, end time Add and Get Match specific data API Client MatchClient Contracts MatchResponse WebAPI MatchController Examples Create a match public SUGARClient sugarClient = new SUGARClient(BaseUri); private MatchClient _matchClient; private int _gameId; private void CreateMatch() { // create instance of the match client _matchClient = sugarClient.Match; // create the match and store the response var matchResponse = _matchClient.Create(); // store the id of the match for use in other features _matchId = matchResponse.Id; } Starting a match private MatchResponse StartMatch(int matchId) { // check for the match and store the response var matchResponse = _matchClient.Get(matchId); // Start the match matchResponse = _matchClient?.Start(matchResponse.Id); return matchResponse: } Ending a match private MatchResponse EndMatch(int matchId) { // check for the match and store the response var matchResponse = _matchClient.Get(matchId); // End the match matchResponse = _matchClient?.End(matchResponse.Id); return matchResponse: } Adding match data private EvaluationDataResponse AddMatchData(int matchId, int userId) { var matchResponse = _matchClient.Get(matchId); var matchData = SUGARClient.Match.AddData(new EvaluationDataRequest { RelatedEntityId = matchResponse.Id, GameId = matchResponse.Game.Id, CreatingActorId = userId, EvaluationDataType = EvaluationDataType.Long, Key = \"MyMatchScore\", Value = 100 }); return matchData: } Getting match data private EvaluationDataResponse GetAllMatchData(int matchId) { var matchResponse = _matchClient.Get(matchId); var allDataForMatch = SUGARClient.Match.GetData(matchId); return allDataForMatch: }"
  },
  "features/relationship.html": {
    "href": "features/relationship.html",
    "title": "Relationship | SUGAR",
    "keywords": "Relationship Relationships are connections between two or more entities. For example a user belonging to a group or a user being friends or following another user. Relationships may follow a step by step process depending on the use case, for example in adding a ‘friend’, the relationship is initially stored as a request from the requester to the receiver until accepted by the receiver. Whereas the receiver may also refuse or block the request. Features CRUD Relationship CRUD Relationship request Search Relationship (ID/Actor) API Client GroupMemberClient UserFriendClient AllianceClient Contracts RelationshipStatusUpdate RelationshipRequest RelationshipResponse ActorResponse Examples Adding a User to a Group A Group can be joined by an actor. This will create a user to group relationship request. In this example, we will set the AutoAccept property in the RelationshipRequest object to true, so the relationship will be stored directly as a user to group relationship. The joined group's id is then extracted from the RelationshipResponse . public SUGARClient sugarClient = new SUGARClient(BaseUri); private GroupMemberClient _groupMemberClient; private int _userId; private int _groupId; private void JoinGroup(int groupId) { // create instance of the group member client _groupMemberClient = sugarClient.GroupMember; // create a RelationshipRequest var relationshipRequest = new RelationshipRequest { AcceptorId = groupId, RequestorId = _userId, AutoAccept = true }; // create the member request and store the response var relationshipResponse = _groupMemberClient.CreateMemberRequest(relationshipRequest); // store the id of the group for use in other functions _groupId = relationshipResponse.AcceptorId; } Leaving a group A user to group relationship status can be updated using a RelationshipStatusUpdate with the GroupMemberClient 's UpdateMember function. This example shows the user leaving the group joined in the previous example. Calling the function automatically breaks the relationship between the group and player if there is one, without the need of passing the additional Accepted property in the RelationshipStatusUpdate. private void LeaveGroup() { // create a RelationshipStatusUpdate var relationshipStatusUpdate = new RelationshipStatusUpdate { AcceptorId = _groupId, RequestorId = _userId }; // create the member request and store the response _groupMemberClient.UpdateMember(relationshipStatusUpdate); } Adding a friend Works identically to joining a group, except creating user to user relationships and using the UserFriendClient . public SUGARClient sugarClient = new SUGARClient(BaseUri); private UserFriendClient _userFriendClient; private int _userId; private int _friendId; private void JoinGroup(int targetUserId) { // create instance of the user friend client _userFriendClient = sugarClient.UserFriend; // create a RelationshipRequest var relationshipRequest = new RelationshipRequest { AcceptorId = targetUserId, RequestorId = _userId, AutoAccept = true }; // create the friend request and store the response var relationshipResponse = _userFriendClient.CreateFriendRequest(relationshipRequest); // store the id of the group for use in other functions _friendId = relationshipResponse.AcceptorId; } Removing a friend Like leaving a group, removing a friend updates the user to user relationship using a RelationshipStatusUpdate with UserFriendClient 's UpdateFriend function. private void RemoveFriend() { // create a RelationshipStatusUpdate var relationshipStatusUpdate = new RelationshipStatusUpdate { AcceptorId = _friendId, RequestorId = _userId, Accepted = true }; // create the member request and store the response _userFriendClient.UpdateFriend(relationshipStatusUpdate); } Creating an alliance Two Groups can be joined together in an alliance. This will create a group to group relationship request. In this example, we will set the AutoAccept property in the <xref:PlayGen.SUGAR.Contracts.Shared.RelationshipRequest> object to true, so the relationship will be stored directly as a group to group relationship. The joined group's id is then extracted from the <xref:PlayGen.SUGAR.Contracts.Shared.RelationshipResponse>. public SUGARClient sugarClient = new SUGARClient(BaseUri); private AllianceClient _allianceClient; private int _requestorGroupId; private int _acceptorGroupId; private void CreateAlliance(int groupId) { // create instance of the Alliance client _allianceClient = sugarClient.Alliance; // create a RelationshipRequest var relationshipRequest = new RelationshipRequest { RequestorId = _requestorGroupId, AcceptorId = _acceptorGroupId, AutoAccept = true }; // create the member request and store the response var relationshipResponse = _allianceClient.CreateAlliance(relationshipRequest); // store the id of the group for use in other functions _acceptorGroupId = relationshipResponse.AcceptorId; } Breaking an alliance A group to group relationship status can be updated using a <xref:PlayGen.SUGAR.Contracts.Shared.RelationshipStatusUpdate> with the AllianceClient 's UpdateAlliance function. This example shows the user breaking the alliance created in the previous example. Calling the function automatically breaks the relationship between the two groups if there is one, without the need of passing the additional Accepted property in the RelationshipStatusUpdate. private void BreakAlliance() { // create a RelationshipStatusUpdate var relationshipStatusUpdate = new RelationshipStatusUpdate { AcceptorId = _acceptorGroupId, RequestorId = _requestorGroupId }; // create the member request and store the response _allianceClient.UpdateAlliance(relationshipStatusUpdate); }"
  },
  "features/resource.html": {
    "href": "features/resource.html",
    "title": "Resources | SUGAR",
    "keywords": "Resources Resources provide a flexible set of game objects which may be associated with actors. Resources may represent or track such objects as scores, experience points, in-game currency or in-game items. They may be earned, spent, gifted or otherwise associated. Resource provide the ability for inventories to be assigned to individual or group actors. Resources are game objects which are obtained and exchanged by players. They may be consumable or permanent. Examples of resources include in-game currency, items, gifts and tools. A resource can be set to exist outside a game instance, allowing exchanges from external social platforms. Modulation of resources is handled by the EvaluationData system. Resources can belong to a group, where it becomes shared by all members of that group. Features CRUD Resources Search Resources (ID/Name/Actor/Relationship) Gift resource from one actor to another API Client ResourceClient Contracts ResourceAddRequest ResourceResponse ResourceTransferRequest ResourceTransferResponse WebAPI ResourceController Examples Creating a resource The ResourceClient has an AddOrUpdate function which adds a new resource entry belonging to the user into GameData or automatically updates an existing one if a duplicate entry was to be made. The function takes a ResourceAddRequest parameter and returns a ResourceResponse . This example will show how to both add a new entry or increment a player's amount of Valyrian steel. This is done by specifying the key \"ValyrianSteel\" which will be added with a value matching the quantity to GameData. If the entry already exists, it will add the quantity to its value (or subtract if the quantity is negative). public SUGARClient sugarClient = new SUGARClient(BaseUri); private ResourceClient _resourceClient; private int _gameId; private int _userId; private void AddOrUpdateResource(int quantity) { // create instance of the resource client _resourceClient = sugarClient.Resource; // create a ResourceAddRequest var resourceAddRequest = new ResourceAddRequest { GameId = _gameId, ActorId = _userId, Key = \"ValyrianSteel\", Quantity = quantity }; // Add the resource or update an existing key _resourceClient.AddOrUpdate(resourceAddRequest); } Transfer a resource This example will show how to give Valryian to another player. The ResourceClient 's Transfer function handles this taking a ResourceTransferRequest parameter and returning a ResourceTransferResponse object. When the transfer is made, it adds the resource quantity to the target user, and subtracts it from the source user. private void TransferResource(int quantity, int targetUser) { // create a ResourceTransferRequest var resourceTransferRequest = new ResourceTransferRequest { GameId = _gameId, SenderActorId = _userId, RecipientActorId = targetUser, Key = \"ValyrianSteel\", Quantity = quantity, }; // transfer the resources from the user to the target _resourceClient.Transfer(resourceTransferRequest); } Roadmap Read/write access management for group resources Extended permissions. Proving mechanism to set ownership, and control of usage access. For example a player may own an item in the game which they can ‘lend’ to another player to use for a period, without the other player owning it. *Extended metadata. Providing mechanism to record additional metadata against resources such as being able to rate them or track a history of owners or uses. *Tradable resources Providing mechanism for actors to trade and exchange resource, including management of agreement by multiple parties through escrow system."
  },
  "features/roadmap.html": {
    "href": "features/roadmap.html",
    "title": "Roadmap | SUGAR",
    "keywords": "Roadmap This page provides an overview of upcoming development for the platform. Features Matches Track play sessions and associated data Schedule competitive/cooperative games Pre-configure player to game role mapping Provide synchronisation mechanism for match/round/session start Matchmaking Matching players based on arbitrary criteria using game data evaluation Score matching History matching Plugin external matching algorithms (to support matching functions from RAGE) Integration with Tournaments Tournaments Providing a variety of team based game dynamics, tournaments can be configured as: Round-robin Knock-out Combination of both Challenge system Issue challenges to players, groups or globally Set time and arbitary criteria restrictions on challenge eligibility Portable achievement system Integration with achievement systems on popular app stores and game distribution platforms. Rewards Resources can be awarded for participation in Matches and Tournaments. Group Permissioning Group roles with configurable permissions Group resource accessibility restrictions Group Alliance Extended Group Achievements See Group Tech Standalone API Create an offline and/or in memory GameData store and expose criteria evaluation functions. Implement state machine and game logic decisions using GameData evaluation WebSockets Add push messaging and event/message aggregation to API. ???"
  },
  "features/skill.html": {
    "href": "features/skill.html",
    "title": "Skills | SUGAR",
    "keywords": "Skills Skills represent a players proficiency or ability. SUGAR allows the game designer to define and track which skills the game is designed to teach. Such a skill is globally defined with a game-specific criteria. The criteria checks the GameData table for occurrences that serve as evidence of that skill's demonstration. Note Both Skills and Achievements build on \"Evaluations\" which may contain a multitude of \"EvaluationCriteria\", specifiying the conditions that need to be satisfied for this specific Evaluation to be considered complete. Features Get all skills Get all skills that match a name/id Get all skills associated with a particular game Get a player's performance of a particular skill Can be global or game-specific CRUD Skill CRUD Skill Metadata Search Skill (ID/name/metadata/Actor) API Client SkillClient Contracts EvaluationCriteriaCreateRequest EvaluationProgressResponse EvaluationCreateRequest EvaluationUpdateRequest EvaluationResponse EvaluationDataType CriteriaQueryType ComparisonType ActorType CriteriaScope WebAPI SkillsController Examples Create a skill Skills work identically to Achievements , utilising the same contracts and GameData . This example shows how to set up the Swordsmanship skill for a game. The skill has an [ EvaluationCriteriaCreateRequest specifying the value and ComparisonType to determine at which point the skill has been learnt, key \"Swordsmanship\" and CriteriaQueryType to sum all GameData entry values matching the key. public SUGARClient sugarClient = new SUGARClient(BaseUri); private SkillClient _skillClient; private int _gameId; private void SetUpSkill() { // create instance of the achievement client _skillClient = sugarClient.Skill; // create an EvaluationCriteria list var EvaluationCriteria = new List<EvaluationCriteria>() { new EvaluationCriteria() { DataType = GameDataType.Long, Value = \"100\", Key = \"Swordsmanship\", CriteriaQueryType = CriteriaQueryType.Sum, ComparisonType = ComparisonType.GreaterOrEqual, Scope = CriteriaScope.Actor } }; // place the criteria inside an EvaluationCreateRequest var EvaluationCreateRequest = new EvaluationCreateRequest() { GameId = _gameId, Name = \"Swordsmanship Skill!\", ActorType = ActorType.User, Token = \"swordsmanship\", CompletionCriteria = EvaluationCriteria }; // create the skill _skillClient.Create(EvaluationCreateRequest); } Submitting data for when somthing which may be used to evaluate progress towards a Skill A skill uses keys in GameData that match its EvaluationCriteriaCreateRequest . This data is submitted at points in the game which demonstrate progress towards the skill (as well as other uses). private void SwingSword() { // *Sword Swinging Code* // // create instance of GameDataClient var gameDataClient = sugarClient.GameData; // create GameDataRequest var gameDataRequest = new GameDataRequest() { GameId = _gameId, ActorId = _userId, GameDataType = GameDataType.Long, Value = \"1\", Key = \"Swordsmanship\" }; // add the GameData gameDataClient.Add(gameDataRequest); } Automatically recieve skill progress completion notifications: Enable and use automatic notifications: _skillClient.EnableNotifications(true); And then poll to see if any achievements have been recieved. EvaluationNotification notification; if(_skillClient.TryGetPendingNotification(out notification)) { // There was a penging skill notification, so do something with it Log.Info($\"Got skill notification: {notification.Name} \" + $\"with progress: {notification.Progress}\"); } Requesting specific using the SkillClient 's GetSkillProgress function and specifying the GameId, ActorId and Token returns an EvaluationProgressResponse object for that Actor's progress towards the skill in that game. private float CheckSkillProgress() { // Check the user's progress towards the achievements in the specified game var skillProgressResponse = _skillClient.GetSkillProgress ( \"swordsmanship\", _gameId, _userId ); // Output the progress return skillProgressResponse.Progress; }"
  },
  "features/user.html": {
    "href": "features/user.html",
    "title": "Users | SUGAR",
    "keywords": "Users Users are individuals interacting with the system. They may fulfil a range of roles including player, game master, game admin, teacher or system admin. Users can have metadata associated with them, such as nice name, profile image and bio. Features CRUD users Search users (name/id) CRUD user metadata User Name User Bio User profile icon API Client UserClient Contracts AchievementProgressResponse ActorRequest ActorResponse WebAPI UserController Roadmap Integration of permission system. Providing the ability to set system or game specific permission across the platform functionalities. User id mapping. Providing the ability for an individual to have multiple usernames depending on their role, or connect with one or more social media accounts for example for authentication."
  },
  "features/admin/achievement.html": {
    "href": "features/admin/achievement.html",
    "title": "Achievement | SUGAR",
    "keywords": "Achievement For more information on achievements view the documentation From a game profile, admins can create, view and edit achievemnets. The image below shows a list of achievements for a game, clicking \"View\" will expand the achievement and provide more details about the criteria and rewards Create a new achievement By selecting \"Create New Achievement\" a new page will be opened including all the fields needed for an achievement, achievements can have multiple criterias added using the \"Add Criteria\" and \"Remove Criteria\" buttons at the bottom of the screen to control the number required. Delete an existing achievement Delete button will delete the selected achievement from the table"
  },
  "features/admin/game.html": {
    "href": "features/admin/game.html",
    "title": "Games | SUGAR",
    "keywords": "Games For more information on games view the documentation The games page shows a list of all games that the admin has permission to view, from here admins can create, edit and delete games. Create new games The admin can create new games by selecting the \"Create New Game\" button which will prompt admins to add a game with a name and a description, the new game will be added to the table in alphabetical order. Game Details After selecting a game, metadata for the selected game is displayed, from which admins can make changes or delete the game. The tabs available direct to different pages to manage the game and create Game Data , Achievements , Skills , Resources and leaderboards for the current game. Creating Game Data From the Game Data tab, New game data can be added for each user by filling out the form, then can be viewed by selecting a user and loading their data Creating Game Achievements and Skills Both the Achievements and Skills tabs have the same functionality where they allow admins to view existing, create new and delete Achievements and Skills. When creating a new achievment or skill, a page will show that contains all the fields required and allows for multiple criteria to added for each achievement or skill. Creating Game Resources The resources tab allows admins to view each users resources for the current game and make any changes they wish, this tab also allows for new resources to be created for each user. Creating Game Leaderbaords Leaderboards for a game can be viewed from the leaderboards tab, from here; new leaderboards can be created, existing leaderboards can be edited, deleted or can be viewed to see actor standings. Managing Game Roles The final tab allows admins to manage which users have access to the game, by adding new accounts, more users will have permissions to make changes to this game."
  },
  "features/admin/group.html": {
    "href": "features/admin/group.html",
    "title": "Groups | SUGAR",
    "keywords": "Groups For more information on games view the documentation The groups page shows a list of groups, from which an admin can select one to see more details or create a new group Create new groups The admin can create new groups by using the \"Create new Group\" button, this will prompt a popup requesting a group name and group description to be entered for the new group, once created the group will be added to the table in alpgabetical order. Delete Details Group details are shown on the base page for each group, where metadata can be editted and the group can also be deleted Manage group members Each group can have members, the number of members currently within the group are shown on the groups page, by selecting the \"Members\" button, the admin can view the users currently in the group, remove them by selecting the remove button or add new members to the group by entering the users name into the prompt shown Manage Group Alliances Groups can have relationships with other groups, called alliances . These aliances can be managed through the \"Alliance Tab\", in a similar way to the group members functionality"
  },
  "features/admin/index.html": {
    "href": "features/admin/index.html",
    "title": "Admin Interface | SUGAR",
    "keywords": "Admin Interface The admin panel contains pages that can be used to manage games using the SUGAR engine by giving admins access to features that they can add, remove or edit Navigation between the pages in the admin panel can be seen in the Site Map"
  },
  "features/admin/leaderboard.html": {
    "href": "features/admin/leaderboard.html",
    "title": "Leaderboard | SUGAR",
    "keywords": "Leaderboard For more information on leaderboards view the documentation The leaderboards page prompts the admin to select a platform from the list of games or global leaderboards, once a platform has been selected, the user is shown the list of leaderboards that are already associated with that platform, from here the admin can: View a leaderboard Create a new leaderboard Delete a leaderboard configuration View a leaderboard If the table of leaderboards for the selected platform is not empty, selecting an existing leaderboard in the table will launch the list of actors and their standings Create a new leaderboard By selecting the \"Create New Leaderboard\" button, the admin is directed to add the required fields for a new leaderboard, including; leaderboard name, a unique token used for accessing the leaderboard outside of the admin panel, the actor type, the type of game data that is being tracked and the order the leaderboard should be shown in Delete a leaderboard configuration Delete button will delete the selected leaderboard from the table"
  },
  "features/admin/login.html": {
    "href": "features/admin/login.html",
    "title": "Login Screen | SUGAR",
    "keywords": "Login Screen By entering an account name and password, an admin panel user can: Sign in Register a new account Sign in If an account already exists, use the log in details and select the \"Sign In\" button, if successful the main page will be shown. Register a new account The admin panel will by default only have 1 user, admin. (default credentials: username: admin, password: admin). If new accounts are required, this can be done through the Create New User functionality. Main Page After successfully signing in to a new or existing account, the main page is shown, from which there is access to the rest of the admin panel as shown in the Site Map along with the option to log out in the top right of the screen. The navigation bar at the top of the screen will persisit through pages whilst logged in."
  },
  "features/admin/resource.html": {
    "href": "features/admin/resource.html",
    "title": "Resources | SUGAR",
    "keywords": "Resources For more information on resources view the documentation The resources page controls the resources for a given game and global resources After selecting a platform the admin has two options: Manage available resources Manage resources for users and groups Manage available resources The managing resources screen shows the resources assosiated with the selected platform, with the ability to add new resources or remove existing resources from the platform. Creating Resources Creating resources will show a prompt requesting the admin to enter the data related to the resource Deleting Resources Delete button will delete the selected resource from the table Manage resources for users and groups Users and groups can have a number of resources associated with a platform, this page allows admins to switch between user and group tables to manage resources of a selected actor, by selecting an actor the admin will be shown a list of the resources for the platform and the value the actor currently has for the given resource, using the text entry box, the admin can update values in the table."
  },
  "features/admin/SiteMap.html": {
    "href": "features/admin/SiteMap.html",
    "title": "Site Map | SUGAR",
    "keywords": "Site Map The site map below outlines the navigation of pages in the admin panel and the interactions that can be made on each page"
  },
  "features/admin/skill.html": {
    "href": "features/admin/skill.html",
    "title": "Skills | SUGAR",
    "keywords": "Skills For more information on skills view the documentation The skills page controls the skills for a given game and global skills by selecting from a list of games or the global skills option After selecting a platform the admin can: Create new skills Delete an existing skill Create new skills By selecting \"Create New Skill\" a new page will be opened including all the fields needed for a skill, skills can have multiple criterias added using the \"Add Criteria\" and \"Remove Criteria\" buttons at the bottom of the screen to control the number required. Delete an existing skill Delete button will delete the selected skill from the table"
  },
  "features/admin/user.html": {
    "href": "features/admin/user.html",
    "title": "Users | SUGAR",
    "keywords": "Users For more information on users view the documentation The users page allows admins to do the following actions: Create new users Manage users' friends Manage users' groups Delete users Create new users The admin can create new users by selecting the \"Create new User\" button, this will prompt a popup to show requesting a username and password to be entered for the new user, the new user will be added to the table in alphatbetical order. Manage users' actor data A user can have actor data for a game, this is managed through the \"Actor Data\" tab. By selecting a game from the drop down list and loading the data, admins will be able to see all the data saved for the current user in that game. If new actor data is needed, simply click the \"Create New Actor Data\" button and fill in the required fields Manage users' friends Each user can have friends, pending friend requests and sent friend requests, from the friends page, admins can remove accepted friends, cancel sent friend requests and accept/reject requests from other users. The 'Add Friend' button will prompt a user name to be entered, the name entered must be an existing user for the friend request to be sent Manage users' groups Each user can be a member of a group, from the groups page admins can make the user join or leave groups. The \"Add Group\" button will prompt a group name to be entered, the name entered must be an existing group for the user to join successfully Users' Details The User Details tab allows the admin to make changes to user metadata. The delete button from the details tab will delete the selected user from the table"
  },
  "features/unity/index.html": {
    "href": "features/unity/index.html",
    "title": "Unity UI Component | SUGAR",
    "keywords": "Unity UI Component The UI component is a Unity package developers can import into their Unity project to allow easy interactions with the SUGAR engine. The package includes a folder of prefabs at \"Assets/SUGAR/Prefabs\". For more details of the Unity Client see the details documentation here"
  },
  "unity-client/index.html": {
    "href": "unity-client/index.html",
    "title": "SUGAR-Unity Client | SUGAR",
    "keywords": "SUGAR-Unity Client Welcome to the documentation for the Unity Client of the SUGAR Engine. The documentation includes : Tutorials : Quick start guide to getting the SUGAR Unity Client setup in your game. Features : Detailed description of features supported by the client. Development : Description of how to help contribute to the development of the unity client."
  },
  "concepts/account.html": {
    "href": "concepts/account.html",
    "title": "Account | SUGAR",
    "keywords": "Account Accounts are used by the User's to register and login to SUGAR. Each account is associated with a user. A user may have multiple accounts but an account may only have one user. Each account stores a unique login name and password for the associated user. Features CRUD Account CRUD Account Metadata Account Name Account Password Account User (User) API Client AccountClient Contracts AccountRequest AccountResponse WebAPI AccountController"
  },
  "api/PlayGen.SUGAR.Client.MatchClient.html": {
    "href": "api/PlayGen.SUGAR.Client.MatchClient.html",
    "title": "Class MatchClient | SUGAR",
    "keywords": "Class MatchClient Controller that facilitates Match specific operations Inheritance System.Object ClientBase MatchClient Inherited Members ClientBase.AsyncRequestController ClientBase.EvaluationNotifications ClientBase.SerializerSettings ClientBase.EnableEvaluationNotifications(Boolean) ClientBase.ClearSessionData() ClientBase.AreUriParamsValid(Object[]) ClientBase.GetUriBuilder(String, Object[]) ClientBase.Post<TRequest, TResponse>(String, TRequest, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Post<TRequest>(String, TRequest, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Post<TResponse>(String, Object, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Put<TRequest, TResponse>(String, TRequest, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Put<TRequest>(String, TRequest, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.PostPut<TResponse>(String, String, Dictionary<String, String>, Object, IEnumerable<HttpStatusCode>) ClientBase.PostPut(String, String, Dictionary<String, String>, Object, IEnumerable<HttpStatusCode>) ClientBase.Get<TResponse>(String, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Get(String, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Delete<TResponse>(String, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Delete(String, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.GetDelete<TResponse>(String, String, Dictionary<String, String>, IEnumerable<HttpStatusCode>) ClientBase.GetDelete(String, String, Dictionary<String, String>, IEnumerable<HttpStatusCode>) Namespace : PlayGen.SUGAR.Client Assembly : PlayGen.SUGAR.Client.dll Syntax public class MatchClient : ClientBase Constructors MatchClient(String, IHttpHandler, Dictionary<String, String>, Dictionary<String, String>, IAsyncRequestController, EvaluationNotifications) Declaration public MatchClient(string baseAddress, IHttpHandler httpHandler, Dictionary<string, string> constantHeaders, Dictionary<string, string> sessionHeaders, IAsyncRequestController asyncRequestController, EvaluationNotifications evaluationNotifications) Parameters Type Name Description System.String baseAddress IHttpHandler httpHandler Dictionary < System.String , System.String > constantHeaders Dictionary < System.String , System.String > sessionHeaders IAsyncRequestController asyncRequestController EvaluationNotifications evaluationNotifications Methods AddData(EvaluationDataRequest) Create a new Match Data record. Declaration public EvaluationDataResponse AddData(EvaluationDataRequest data) Parameters Type Name Description EvaluationDataRequest data EvaluationDataRequest object that holds the details of the new Match Data. Returns Type Description EvaluationDataResponse A EvaluationDataResponse containing the new Match Data details. Create() Method to create a match for a game a user is currently logged into Declaration public MatchResponse Create() Returns Type Description MatchResponse CreateAndStart() Method to create a match for a game a user is currently logged into which is also started automatically. Declaration public MatchResponse CreateAndStart() Returns Type Description MatchResponse End(Int32) Ends a match for the game that the user is currently logged in for. Declaration public MatchResponse End(int matchId) Parameters Type Name Description System.Int32 matchId Returns Type Description MatchResponse GetByCreator(Int32) Get a list of matches that were created by a specific actor. Declaration public List<MatchResponse> GetByCreator(int creatorId) Parameters Type Name Description System.Int32 creatorId Returns Type Description List < MatchResponse > A list of MatchResponse GetByCreator(Int32, Nullable<DateTime>, Nullable<DateTime>) Get a list of matches that were created by a specific actor, filtered by a time range. Declaration public List<MatchResponse> GetByCreator(int creatorId, DateTime? start, DateTime? end) Parameters Type Name Description System.Int32 creatorId System.Nullable < DateTime > start System.Nullable < DateTime > end Returns Type Description List < MatchResponse > A list of MatchResponse GetByGame(Int32) Get a list of matches for a specific game. Declaration public List<MatchResponse> GetByGame(int gameId) Parameters Type Name Description System.Int32 gameId Returns Type Description List < MatchResponse > A list of MatchResponse GetByGame(Int32, Nullable<DateTime>, Nullable<DateTime>) Get a list of matches for a specific game, filtered by a time range. Declaration public List<MatchResponse> GetByGame(int gameId, DateTime? start, DateTime? end) Parameters Type Name Description System.Int32 gameId System.Nullable < DateTime > start System.Nullable < DateTime > end Returns Type Description List < MatchResponse > A list of MatchResponse GetByGameAndCreator(Int32, Int32) Get a list of matches for a specific game created by a specific actor. Declaration public List<MatchResponse> GetByGameAndCreator(int gameId, int creatorId) Parameters Type Name Description System.Int32 gameId System.Int32 creatorId Returns Type Description List < MatchResponse > A list of MatchResponse GetByGameAndCreator(Int32, Int32, Nullable<DateTime>, Nullable<DateTime>) Get a list of matches for a specific game created by a specific user, filtered by a time range. Declaration public List<MatchResponse> GetByGameAndCreator(int gameId, int creatorId, DateTime? start, DateTime? end) Parameters Type Name Description System.Int32 gameId System.Int32 creatorId System.Nullable < DateTime > start System.Nullable < DateTime > end Returns Type Description List < MatchResponse > A list of MatchResponse GetByTime(Nullable<DateTime>, Nullable<DateTime>) Get a list of matches filtered by a time range. Declaration public List<MatchResponse> GetByTime(DateTime? start, DateTime? end) Parameters Type Name Description System.Nullable < DateTime > start System.Nullable < DateTime > end Returns Type Description List < MatchResponse > A list of MatchResponse GetData(Int32, String[]) Find a list of all Match Data that match the parameters provided. Declaration public IEnumerable<EvaluationDataResponse> GetData(int matchId, string[] keys = null) Parameters Type Name Description System.Int32 matchId ID of the match. System.String [] keys Array of Key names. Returns Type Description IEnumerable < EvaluationDataResponse > A list of EvaluationDataResponse which match the search criteria. Start(Int32) Start a match for the game the user is currently logged into. Declaration public MatchResponse Start(int matchId) Parameters Type Name Description System.Int32 matchId Returns Type Description MatchResponse"
  },
  "api/PlayGen.SUGAR.Contracts.html": {
    "href": "api/PlayGen.SUGAR.Contracts.html",
    "title": "Namespace PlayGen.SUGAR.Contracts | SUGAR",
    "keywords": "Namespace PlayGen.SUGAR.Contracts Classes AccountRequest Encapsulates log-in details. AccountResponse Encapsulates user and token details at log-in. AccountSourceRequest Encapsulates log-in source details. AccountSourceResponse Encapsulates log-in source details. ActorClaimRequest Encapsulates actorclaim details. ActorClaimResponse Encapsulates actorclaim details from the server. ActorRequest Encapsulates user and group details. ActorResponse Encapsulates user and group details from the server. ActorRoleRequest Encapsulates actorrole details. ActorRoleResponse Encapsulates actorrole details from the server. ClaimResponse Encapsulates role details. EvaluationCreateRequest Encapsulates achievement/skill details. EvaluationCriteriaCreateRequest Encapsulates requirements for completing an achievement or skill. EvaluationCriteriaResponse Encapsulates requirements for completing an achievement or skill. EvaluationCriteriaUpdateRequest Encapsulates requirements for completing an achievement or skill. EvaluationDataRequest Encapsulates ActorData/EvaluationData details. EvaluationDataResponse Encapsulates ActorData/EvaluationData details from the server. EvaluationProgressResponse Encapsulates current progress to completing an achievement. EvaluationResponse Encapsulates achievement/skill details returned from the server. EvaluationUpdateRequest Encapsulates achievement/skill details. GameRequest Encapsulates game details. GameResponse Encapsulates game details from the server. GroupRequest Encapsulates group details. GroupResponse Encapsulates group details from the server. LeaderboardRequest Encapsulates leaderboard details. LeaderboardResponse Encapsulates leaderboard details returned from the server. LeaderboardStandingsRequest Encapsulates leaderboard current standings request. LeaderboardStandingsResponse Encapsulates leaderboard standings details from the database. MatchResponse Encapsulates a match entity's details from the database. RelationshipRequest Encapsulates relationship details. RelationshipResponse Encapsulates relationship details from the server. RelationshipStatusUpdate Encapsulates relationship details, including updated status of the relationship. ResourceAddRequest Encapsulates Resource Data details. ResourceResponse Encapsulates resource details from the server. ResourceTransferRequest Encapsulates Resource Transfer details. ResourceTransferResponse Encapsulates Resource Transfer details from the server. ResponseWrapper<TResponse> RewardCreateRequest Encapsulates the reward given for completing an achievement or skill. RewardResponse Encapsulates the reward given for completing an achievement or skill. RewardUpdateRequest Encapsulates the reward given for completing an achievement or skill. RoleClaimRequest Encapsulates roleclaim details. RoleClaimResponse Encapsulates roleclaim details from the server. RoleRequest Encapsulates role details. RoleResponse Encapsulates role details from the server. TokenLoginRequest UserRequest Encapsulates user details. UserResponse Encapsulates user details from the server."
  },
  "api/PlayGen.SUGAR.Server.EntityFramework.Controllers.EvaluationController.html": {
    "href": "api/PlayGen.SUGAR.Server.EntityFramework.Controllers.EvaluationController.html",
    "title": "Class EvaluationController | SUGAR",
    "keywords": "Class EvaluationController Inheritance System.Object DbController EvaluationController Inherited Members DbController.ContextFactory Namespace : PlayGen.SUGAR.Server.EntityFramework.Controllers Assembly : PlayGen.SUGAR.Server.EntityFramework.dll Syntax public class EvaluationController : DbController Constructors EvaluationController(SUGARContextFactory) Declaration public EvaluationController(SUGARContextFactory contextFactory) Parameters Type Name Description SUGARContextFactory contextFactory Methods Create(Evaluation) Declaration public Evaluation Create(Evaluation evaluation) Parameters Type Name Description Evaluation evaluation Returns Type Description Evaluation Delete(String, Int32, EvaluationType) Declaration public void Delete(string token, int gameId, EvaluationType evaluationType) Parameters Type Name Description System.String token System.Int32 gameId EvaluationType evaluationType Get() Declaration public List<Evaluation> Get() Returns Type Description List < Evaluation > Get(String, Int32, EvaluationType) Declaration public Evaluation Get(string token, int gameId, EvaluationType evaluationType) Parameters Type Name Description System.String token System.Int32 gameId EvaluationType evaluationType Returns Type Description Evaluation GetByGame(Int32) Declaration public List<Evaluation> GetByGame(int gameId) Parameters Type Name Description System.Int32 gameId Returns Type Description List < Evaluation > GetByGame(Int32, EvaluationType) Declaration public List<Evaluation> GetByGame(int gameId, EvaluationType evaluationType) Parameters Type Name Description System.Int32 gameId EvaluationType evaluationType Returns Type Description List < Evaluation > Update(Evaluation) Declaration public void Update(Evaluation evaluation) Parameters Type Name Description Evaluation evaluation"
  },
  "api/PlayGen.SUGAR.Server.EntityFramework.EntityConfigs.GroupConfig.html": {
    "href": "api/PlayGen.SUGAR.Server.EntityFramework.EntityConfigs.GroupConfig.html",
    "title": "Class GroupConfig | SUGAR",
    "keywords": "Class GroupConfig Inheritance System.Object GroupConfig Namespace : PlayGen.SUGAR.Server.EntityFramework.EntityConfigs Assembly : PlayGen.SUGAR.Server.EntityFramework.dll Syntax public class GroupConfig : IEntityTypeConfiguration<Group> Methods Configure(EntityTypeBuilder<Group>) Declaration public void Configure(EntityTypeBuilder<Group> builder) Parameters Type Name Description EntityTypeBuilder < Group > builder"
  },
  "api/PlayGen.SUGAR.Server.EntityFramework.Extensions.DbSetExtensions.html": {
    "href": "api/PlayGen.SUGAR.Server.EntityFramework.Extensions.DbSetExtensions.html",
    "title": "Class DbSetExtensions | SUGAR",
    "keywords": "Class DbSetExtensions Functionality missing from EF.Core that was available in EF 6 Inheritance System.Object DbSetExtensions Namespace : PlayGen.SUGAR.Server.EntityFramework.Extensions Assembly : PlayGen.SUGAR.Server.EntityFramework.dll Syntax public static class DbSetExtensions : object Methods IncludeAll(DbSet<Account>) Declaration public static IQueryable<Account> IncludeAll(this DbSet<Account> dbSet) Parameters Type Name Description DbSet < Account > dbSet Returns Type Description IQueryable < Account > IncludeAll(DbSet<Evaluation>) Declaration public static IQueryable<Evaluation> IncludeAll(this DbSet<Evaluation> dbSet) Parameters Type Name Description DbSet < Evaluation > dbSet Returns Type Description IQueryable < Evaluation > IncludeAll(DbSet<Group>) Declaration public static IQueryable<Group> IncludeAll(this DbSet<Group> dbSet) Parameters Type Name Description DbSet < Group > dbSet Returns Type Description IQueryable < Group > IncludeAll(DbSet<Match>) Declaration public static IQueryable<Match> IncludeAll(this DbSet<Match> dbSet) Parameters Type Name Description DbSet < Match > dbSet Returns Type Description IQueryable < Match > IncludeAll(DbSet<User>) Declaration public static IQueryable<User> IncludeAll(this DbSet<User> dbSet) Parameters Type Name Description DbSet < User > dbSet Returns Type Description IQueryable < User >"
  },
  "api/PlayGen.SUGAR.Server.Model.Claim.html": {
    "href": "api/PlayGen.SUGAR.Server.Model.Claim.html",
    "title": "Class Claim | SUGAR",
    "keywords": "Class Claim Inheritance System.Object Claim Namespace : PlayGen.SUGAR.Server.Model Assembly : PlayGen.SUGAR.Server.Model.dll Syntax public class Claim : object Properties ClaimScope Declaration public ClaimScope ClaimScope { get; set; } Property Value Type Description ClaimScope Description Declaration public string Description { get; set; } Property Value Type Description System.String Id Declaration public int Id { get; set; } Property Value Type Description System.Int32 Name Declaration public string Name { get; set; } Property Value Type Description System.String RoleClaims Declaration public virtual List<RoleClaim> RoleClaims { get; set; } Property Value Type Description List < RoleClaim >"
  },
  "api/PlayGen.SUGAR.Server.Authentication.Exceptions.ClaimNotFoundException.html": {
    "href": "api/PlayGen.SUGAR.Server.Authentication.Exceptions.ClaimNotFoundException.html",
    "title": "Class ClaimNotFoundException | SUGAR",
    "keywords": "Class ClaimNotFoundException Inheritance System.Object SUGARException ClaimNotFoundException Namespace : PlayGen.SUGAR.Server.Authentication.Exceptions Assembly : PlayGen.SUGAR.Server.Authentication.dll Syntax public class ClaimNotFoundException : SUGARException Constructors ClaimNotFoundException(String) Declaration public ClaimNotFoundException(string message) Parameters Type Name Description System.String message"
  },
  "api/PlayGen.SUGAR.Server.Authentication.Exceptions.html": {
    "href": "api/PlayGen.SUGAR.Server.Authentication.Exceptions.html",
    "title": "Namespace PlayGen.SUGAR.Server.Authentication.Exceptions | SUGAR",
    "keywords": "Namespace PlayGen.SUGAR.Server.Authentication.Exceptions Classes ClaimNotFoundException"
  },
  "api/PlayGen.SUGAR.Server.Authentication.TokenValidity.html": {
    "href": "api/PlayGen.SUGAR.Server.Authentication.TokenValidity.html",
    "title": "Enum TokenValidity | SUGAR",
    "keywords": "Enum TokenValidity Namespace : PlayGen.SUGAR.Server.Authentication Assembly : PlayGen.SUGAR.Server.Authentication.dll Syntax public enum TokenValidity : int Fields Name Description Expired Invalid Valid"
  },
  "api/PlayGen.SUGAR.Server.Authentication.html": {
    "href": "api/PlayGen.SUGAR.Server.Authentication.html",
    "title": "Namespace PlayGen.SUGAR.Server.Authentication | SUGAR",
    "keywords": "Namespace PlayGen.SUGAR.Server.Authentication Classes TokenAuthOptions TokenController Enums TokenValidity"
  },
  "api/PlayGen.SUGAR.Server.Core.Controllers.ActorRoleController.html": {
    "href": "api/PlayGen.SUGAR.Server.Core.Controllers.ActorRoleController.html",
    "title": "Class ActorRoleController | SUGAR",
    "keywords": "Class ActorRoleController Inheritance System.Object ActorRoleController Namespace : PlayGen.SUGAR.Server.Core.Controllers Assembly : PlayGen.SUGAR.Server.Core.dll Syntax public class ActorRoleController : object Constructors ActorRoleController(ILogger<ActorRoleController>, ActorRoleController, RoleController) Declaration public ActorRoleController(ILogger<ActorRoleController> logger, ActorRoleController actorRoleDbController, RoleController roleController) Parameters Type Name Description ILogger < ActorRoleController > logger ActorRoleController actorRoleDbController RoleController roleController Methods Create(ClaimScope, Int32, Int32, SUGARContext) Declaration public void Create(ClaimScope claimScope, int actorId, int entityId, SUGARContext context = null) Parameters Type Name Description ClaimScope claimScope System.Int32 actorId System.Int32 entityId SUGARContext context Create(ActorRole, SUGARContext) Declaration public ActorRole Create(ActorRole newRole, SUGARContext context = null) Parameters Type Name Description ActorRole newRole SUGARContext context Returns Type Description ActorRole Delete(Int32) Declaration public void Delete(int id) Parameters Type Name Description System.Int32 id Get(Int32) Declaration public ActorRole Get(int id) Parameters Type Name Description System.Int32 id Returns Type Description ActorRole GetActorRoles(Int32, Boolean) Declaration public List<ActorRole> GetActorRoles(int actorId, bool includeClaims = false) Parameters Type Name Description System.Int32 actorId System.Boolean includeClaims Returns Type Description List < ActorRole > GetActorRolesForEntity(Int32, Int32, ClaimScope) Declaration public List<Role> GetActorRolesForEntity(int actorId, int entityId, ClaimScope scope) Parameters Type Name Description System.Int32 actorId System.Int32 entityId ClaimScope scope Returns Type Description List < Role > GetControlled(Int32) Declaration public List<Role> GetControlled(int actorId) Parameters Type Name Description System.Int32 actorId Returns Type Description List < Role > GetRoleActors(Int32, Int32) Declaration public List<Actor> GetRoleActors(int roleId, int entityId) Parameters Type Name Description System.Int32 roleId System.Int32 entityId Returns Type Description List < Actor >"
  },
  "api/PlayGen.SUGAR.Server.Core.Controllers.EvaluationController.html": {
    "href": "api/PlayGen.SUGAR.Server.Core.Controllers.EvaluationController.html",
    "title": "Class EvaluationController | SUGAR",
    "keywords": "Class EvaluationController Inheritance System.Object CriteriaEvaluator EvaluationController Inherited Members CriteriaEvaluator.RelationshipCoreController CriteriaEvaluator.ContextFactory CriteriaEvaluator.EvaluationDataLogger CriteriaEvaluator.IsCriteriaSatisified(Int32, Int32, List<EvaluationCriteria>, ActorType, EvaluationType) CriteriaEvaluator.Evaluate(Int32, Int32, EvaluationCriteria, ActorType, EvaluationType) CriteriaEvaluator.EvaluateLong(Int32, Int32, EvaluationCriteria) CriteriaEvaluator.EvaluateFloat(Int32, Int32, EvaluationCriteria) CriteriaEvaluator.EvaluateString(Int32, Int32, EvaluationCriteria) CriteriaEvaluator.EvaluateBool(Int32, Int32, EvaluationCriteria) CriteriaEvaluator.EvaluateManyLong(Int32, List<Int32>, EvaluationCriteria) CriteriaEvaluator.EvaluateManyFloat(Int32, List<Int32>, EvaluationCriteria) CriteriaEvaluator.EvaluateManyString(Int32, List<Int32>, EvaluationCriteria) CriteriaEvaluator.EvaluateManyBool(Int32, List<Int32>, EvaluationCriteria) CriteriaEvaluator.CompareValues<T>(T, T, ComparisonType, EvaluationDataType) Namespace : PlayGen.SUGAR.Server.Core.Controllers Assembly : PlayGen.SUGAR.Server.Core.dll Syntax public class EvaluationController : CriteriaEvaluator Constructors EvaluationController(ILogger<EvaluationController>, ILogger<EvaluationDataController>, EvaluationController, RelationshipController, ActorController, RewardController, SUGARContextFactory) Declaration public EvaluationController(ILogger<EvaluationController> logger, ILogger<EvaluationDataController> evaluationDataLogger, EvaluationController evaluationDbController, RelationshipController relationshipCoreController, ActorController actorController, RewardController rewardController, SUGARContextFactory contextFactory) Parameters Type Name Description ILogger < EvaluationController > logger ILogger < EvaluationDataController > evaluationDataLogger EvaluationController evaluationDbController RelationshipController relationshipCoreController ActorController actorController RewardController rewardController SUGARContextFactory contextFactory Fields EvaluationCreatedEvent Declaration public static Action<Evaluation> EvaluationCreatedEvent Field Value Type Description Action < Evaluation > EvaluationDeletedEvent Declaration public static Action<Evaluation> EvaluationDeletedEvent Field Value Type Description Action < Evaluation > EvaluationUpdatedEvent Declaration public static Action<Evaluation> EvaluationUpdatedEvent Field Value Type Description Action < Evaluation > Methods Create(Evaluation) Declaration public Evaluation Create(Evaluation evaluation) Parameters Type Name Description Evaluation evaluation Returns Type Description Evaluation Delete(String, Int32, EvaluationType) Declaration public void Delete(string token, int gameId, EvaluationType evaluationType) Parameters Type Name Description System.String token System.Int32 gameId EvaluationType evaluationType EvaluateProgress(Evaluation, Int32) Declaration public float EvaluateProgress(Evaluation evaluation, int actorId) Parameters Type Name Description Evaluation evaluation System.Int32 actorId Returns Type Description System.Single Get() Declaration public List<Evaluation> Get() Returns Type Description List < Evaluation > Get(String, Int32, EvaluationType) Declaration public Evaluation Get(string token, int gameId, EvaluationType evaluationType) Parameters Type Name Description System.String token System.Int32 gameId EvaluationType evaluationType Returns Type Description Evaluation GetByGame(Int32) Declaration public List<Evaluation> GetByGame(int gameId) Parameters Type Name Description System.Int32 gameId Returns Type Description List < Evaluation > GetByGame(Int32, EvaluationType) Declaration public List<Evaluation> GetByGame(int gameId, EvaluationType evaluationType) Parameters Type Name Description System.Int32 gameId EvaluationType evaluationType Returns Type Description List < Evaluation > GetGameProgress(Int32, Int32, EvaluationType) Declaration public List<EvaluationProgress> GetGameProgress(int gameId, int actorId, EvaluationType evaluationType) Parameters Type Name Description System.Int32 gameId System.Int32 actorId EvaluationType evaluationType Returns Type Description List < EvaluationProgress > GetProgress(String, Int32, Int32, EvaluationType) Declaration public EvaluationProgress GetProgress(string token, int gameId, int actorId, EvaluationType evaluationType) Parameters Type Name Description System.String token System.Int32 gameId System.Int32 actorId EvaluationType evaluationType Returns Type Description EvaluationProgress IsAlreadyCompleted(Evaluation, Int32) Declaration public bool IsAlreadyCompleted(Evaluation evaluation, int actorId) Parameters Type Name Description Evaluation evaluation System.Int32 actorId Returns Type Description System.Boolean Update(Evaluation) Declaration public void Update(Evaluation evaluation) Parameters Type Name Description Evaluation evaluation"
  },
  "api/PlayGen.SUGAR.Server.Core.Controllers.RoleController.html": {
    "href": "api/PlayGen.SUGAR.Server.Core.Controllers.RoleController.html",
    "title": "Class RoleController | SUGAR",
    "keywords": "Class RoleController Inheritance System.Object RoleController Namespace : PlayGen.SUGAR.Server.Core.Controllers Assembly : PlayGen.SUGAR.Server.Core.dll Syntax public class RoleController : object Constructors RoleController(ILogger<RoleController>, RoleController, ActorRoleController) Declaration public RoleController(ILogger<RoleController> logger, RoleController roleDbController, ActorRoleController actorRoleController) Parameters Type Name Description ILogger < RoleController > logger RoleController roleDbController ActorRoleController actorRoleController Methods Create(Role, Int32) Declaration public Role Create(Role newRole, int creatorId) Parameters Type Name Description Role newRole System.Int32 creatorId Returns Type Description Role Delete(Int32) Declaration public void Delete(int id) Parameters Type Name Description System.Int32 id Get() Declaration public List<Role> Get() Returns Type Description List < Role > GetById(Int32) Declaration public Role GetById(int id) Parameters Type Name Description System.Int32 id Returns Type Description Role GetByScope(ClaimScope) Declaration public List<Role> GetByScope(ClaimScope scope) Parameters Type Name Description ClaimScope scope Returns Type Description List < Role > GetDefaultForScope(ClaimScope) Declaration public Role GetDefaultForScope(ClaimScope scope) Parameters Type Name Description ClaimScope scope Returns Type Description Role"
  },
  "api/PlayGen.SUGAR.Server.Core.Controllers.UserController.html": {
    "href": "api/PlayGen.SUGAR.Server.Core.Controllers.UserController.html",
    "title": "Class UserController | SUGAR",
    "keywords": "Class UserController Inheritance System.Object ActorController UserController Inherited Members ActorController.ActorDeletedEvent ActorController.TriggerDeletedEvent(Int32) Namespace : PlayGen.SUGAR.Server.Core.Controllers Assembly : PlayGen.SUGAR.Server.Core.dll Syntax public class UserController : ActorController Constructors UserController(ILogger<UserController>, UserController, ActorController, ActorRoleController, RelationshipController) Declaration public UserController(ILogger<UserController> logger, UserController userController, ActorController actorDbController, ActorRoleController actorRoleController, RelationshipController relationshipController) Parameters Type Name Description ILogger < UserController > logger UserController userController ActorController actorDbController ActorRoleController actorRoleController RelationshipController relationshipController Methods Create(User, SUGARContext) Declaration public User Create(User newUser, SUGARContext context = null) Parameters Type Name Description User newUser SUGARContext context Returns Type Description User Delete(Int32) Declaration public void Delete(int id) Parameters Type Name Description System.Int32 id Get() Declaration public List<User> Get() Returns Type Description List < User > Get(Int32) Declaration public User Get(int id) Parameters Type Name Description System.Int32 id Returns Type Description User Search(String, Boolean) Declaration public List<User> Search(string name, bool exactMatch) Parameters Type Name Description System.String name System.Boolean exactMatch Returns Type Description List < User > Update(User) Declaration public User Update(User user) Parameters Type Name Description User user Returns Type Description User"
  },
  "api/PlayGen.SUGAR.Common.LeaderboardType.html": {
    "href": "api/PlayGen.SUGAR.Common.LeaderboardType.html",
    "title": "Enum LeaderboardType | SUGAR",
    "keywords": "Enum LeaderboardType Enum for selecting the type and sorting order of the leaderboard being created. Namespace : PlayGen.SUGAR.Common Assembly : PlayGen.SUGAR.Common.dll Syntax public enum LeaderboardType : int Fields Name Description Count Sort by the highest count of a EvaluationData key for an actor. Cumulative Sort by the highest sum of EvaluationData values for a key for an actor. Earliest Sort by the earliest occurence of a EvaluationData key. Only the earliest 'DateCreation' is taken for each Actor. Highest Sort by the highest EvaluationData values for a key. Only the highest is taken for each Actor. Latest Sort by the most recent occurence of a EvaluationData key. Only the most recent 'DateModified' is taken for each Actor. Lowest Sort by the lowest EvaluationData values for a key. Only the lowest is taken for each Actor."
  },
  "api/PlayGen.SUGAR.Contracts.ActorClaimRequest.html": {
    "href": "api/PlayGen.SUGAR.Contracts.ActorClaimRequest.html",
    "title": "Class ActorClaimRequest | SUGAR",
    "keywords": "Class ActorClaimRequest Encapsulates actorclaim details. Inheritance System.Object ActorClaimRequest Namespace : PlayGen.SUGAR.Contracts Assembly : PlayGen.SUGAR.Contracts.dll Syntax public class ActorClaimRequest : object Examples JSON { ActorId : 1, ClaimId : 1, EntityId : 1 } Properties ActorId The ID of the actor related to this actorclaim. Declaration public int? ActorId { get; set; } Property Value Type Description System.Nullable < System.Int32 > ClaimId The ID of the claim related to this actorclaim. Declaration public int? ClaimId { get; set; } Property Value Type Description System.Nullable < System.Int32 > EntityId The ID of the entity (game, actor etc) related to this actorclaim. Declaration public int? EntityId { get; set; } Property Value Type Description System.Nullable < System.Int32 > Extension Methods ActorClaimExtensions.ToModel(ActorClaimRequest)"
  },
  "api/PlayGen.SUGAR.Contracts.EvaluationCriteriaCreateRequest.html": {
    "href": "api/PlayGen.SUGAR.Contracts.EvaluationCriteriaCreateRequest.html",
    "title": "Class EvaluationCriteriaCreateRequest | SUGAR",
    "keywords": "Class EvaluationCriteriaCreateRequest Encapsulates requirements for completing an achievement or skill. Inheritance System.Object EvaluationCriteriaCreateRequest Namespace : PlayGen.SUGAR.Contracts Assembly : PlayGen.SUGAR.Contracts.dll Syntax public class EvaluationCriteriaCreateRequest : object Examples JSON { Key : \"EvaluationData Key\", DataType : \"String\", CriteriaQueryType : \"Any\", ComparisonType : \"Equals\", Scope : \"Actor\", Value : \"EvaluationData Key Value\" } Properties ComparisonType How the target value and the actual value will be compared. Declaration public ComparisonType? ComparisonType { get; set; } Property Value Type Description System.Nullable < ComparisonType > CriteriaQueryType Which stored EvaluationData will be queried. Declaration public CriteriaQueryType? CriteriaQueryType { get; set; } Property Value Type Description System.Nullable < CriteriaQueryType > EvaluationDataCategory EvaluationDataCategory of the key which is being queried. Declaration public EvaluationDataCategory? EvaluationDataCategory { get; set; } Property Value Type Description System.Nullable < EvaluationDataCategory > EvaluationDataKey The key which will be queried against to check if criteria is met. Declaration public string EvaluationDataKey { get; set; } Property Value Type Description System.String EvaluationDataType EvaluationDataType of the key which is being queried. Declaration public EvaluationDataType? EvaluationDataType { get; set; } Property Value Type Description System.Nullable < EvaluationDataType > Scope Whether the criteria will be checked against the actor or related actors (i.e. group members, user friends). Declaration public CriteriaScope? Scope { get; set; } Property Value Type Description System.Nullable < CriteriaScope > Value The value which will compared against in order to see if the criteria has been met. Declaration public string Value { get; set; } Property Value Type Description System.String Extension Methods EvaluationCriteriaExtensions.ToModel(EvaluationCriteriaCreateRequest)"
  },
  "api/PlayGen.SUGAR.Contracts.EvaluationCriteriaResponse.html": {
    "href": "api/PlayGen.SUGAR.Contracts.EvaluationCriteriaResponse.html",
    "title": "Class EvaluationCriteriaResponse | SUGAR",
    "keywords": "Class EvaluationCriteriaResponse Encapsulates requirements for completing an achievement or skill. Inheritance System.Object EvaluationCriteriaResponse Namespace : PlayGen.SUGAR.Contracts Assembly : PlayGen.SUGAR.Contracts.dll Syntax public class EvaluationCriteriaResponse : object Examples JSON { Key : \"EvaluationData Key\", DataType : \"String\", CriteriaQueryType : \"Any\", ComparisonType : \"Equals\", Scope : \"Actor\", Value : \"EvaluationData Key Value\" } Properties ComparisonType How the target value and the actual value will be compared. Declaration public ComparisonType ComparisonType { get; set; } Property Value Type Description ComparisonType CriteriaQueryType Which stored EvaluationData will be queried. Declaration public CriteriaQueryType CriteriaQueryType { get; set; } Property Value Type Description CriteriaQueryType EvaluationDataCategory EvaluationDataCategory of the key which is being queried. Declaration public EvaluationDataCategory EvaluationDataCategory { get; set; } Property Value Type Description EvaluationDataCategory EvaluationDataKey The key which will be queried against to check if criteria is met. Declaration public string EvaluationDataKey { get; set; } Property Value Type Description System.String EvaluationDataType EvaluationDataType of the key which is being queried. Declaration public EvaluationDataType EvaluationDataType { get; set; } Property Value Type Description EvaluationDataType Id Declaration public int Id { get; set; } Property Value Type Description System.Int32 Scope Whether the criteria will be checked against the actor or related actors (i.e. group members, user friends). Declaration public CriteriaScope Scope { get; set; } Property Value Type Description CriteriaScope Value The value which will compared against in order to see if the criteria has been met. Declaration public string Value { get; set; } Property Value Type Description System.String"
  },
  "api/PlayGen.SUGAR.Contracts.MatchResponse.html": {
    "href": "api/PlayGen.SUGAR.Contracts.MatchResponse.html",
    "title": "Class MatchResponse | SUGAR",
    "keywords": "Class MatchResponse Encapsulates a match entity's details from the database. Inheritance System.Object MatchResponse Namespace : PlayGen.SUGAR.Contracts Assembly : PlayGen.SUGAR.Contracts.dll Syntax public class MatchResponse : object Properties Creator User that created the match Declaration public ActorResponse Creator { get; set; } Property Value Type Description ActorResponse Ended When the match was ended Declaration public DateTime? Ended { get; set; } Property Value Type Description System.Nullable < DateTime > Game Game that the match was in Declaration public GameResponse Game { get; set; } Property Value Type Description GameResponse Id Unique Id of the match Declaration public int Id { get; set; } Property Value Type Description System.Int32 Started When the match was started Declaration public DateTime? Started { get; set; } Property Value Type Description System.Nullable < DateTime >"
  },
  "api/PlayGen.SUGAR.Server.EntityFramework.EntityConfigs.html": {
    "href": "api/PlayGen.SUGAR.Server.EntityFramework.EntityConfigs.html",
    "title": "Namespace PlayGen.SUGAR.Server.EntityFramework.EntityConfigs | SUGAR",
    "keywords": "Namespace PlayGen.SUGAR.Server.EntityFramework.EntityConfigs Classes AccountConfig AchievementConfig ActorClaimConfig ActorConfig ActorDataConfig ActorRelationshipConfig ActorRelationshipRequestConfig ActorRoleConfig EvaluationConfig EvaluationCriteriaConfig EvaluationDataConfig GameConfig GroupConfig LeaderboardConfig RewardConfig RoleClaimConfig SentEvaluationNotificationConfig SkillConfig UserConfig"
  },
  "api/PlayGen.SUGAR.Server.EntityFramework.Exceptions.DbExceptionHandler.html": {
    "href": "api/PlayGen.SUGAR.Server.EntityFramework.Exceptions.DbExceptionHandler.html",
    "title": "Class DbExceptionHandler | SUGAR",
    "keywords": "Class DbExceptionHandler Inheritance System.Object DbExceptionHandler Namespace : PlayGen.SUGAR.Server.EntityFramework.Exceptions Assembly : PlayGen.SUGAR.Server.EntityFramework.dll Syntax public class DbExceptionHandler : object Methods Process(Exception) Declaration public Exception Process(Exception exception) Parameters Type Name Description Exception exception Returns Type Description Exception"
  },
  "api/PlayGen.SUGAR.Server.Model.SentEvaluationNotification.html": {
    "href": "api/PlayGen.SUGAR.Server.Model.SentEvaluationNotification.html",
    "title": "Class SentEvaluationNotification | SUGAR",
    "keywords": "Class SentEvaluationNotification Inheritance System.Object SentEvaluationNotification Namespace : PlayGen.SUGAR.Server.Model Assembly : PlayGen.SUGAR.Server.Model.dll Syntax public class SentEvaluationNotification : object Properties ActorId Declaration public int ActorId { get; set; } Property Value Type Description System.Int32 EvaluationId Declaration public int EvaluationId { get; set; } Property Value Type Description System.Int32 GameId Declaration public int GameId { get; set; } Property Value Type Description System.Int32 Progress Declaration public float Progress { get; set; } Property Value Type Description System.Single"
  },
  "api/PlayGen.SUGAR.Server.Model.Skill.html": {
    "href": "api/PlayGen.SUGAR.Server.Model.Skill.html",
    "title": "Class Skill | SUGAR",
    "keywords": "Class Skill Inheritance System.Object Evaluation Skill Inherited Members Evaluation.Id Evaluation.GameId Evaluation.Name Evaluation.Description Evaluation.ActorType Evaluation.Token Evaluation.EvaluationCriterias Evaluation.Rewards Namespace : PlayGen.SUGAR.Server.Model Assembly : PlayGen.SUGAR.Server.Model.dll Syntax public class Skill : Evaluation Properties EvaluationType Declaration public override EvaluationType EvaluationType { get; } Property Value Type Description EvaluationType Overrides Evaluation.EvaluationType"
  },
  "api/PlayGen.SUGAR.Server.Model.User.html": {
    "href": "api/PlayGen.SUGAR.Server.Model.User.html",
    "title": "Class User | SUGAR",
    "keywords": "Class User Inheritance System.Object Actor User Inherited Members Actor.Id Actor.Name Actor.Description Actor.Requestors Actor.Acceptors Actor.RequestAcceptors Actor.RequestRequestors Actor.GroupRelationshipCount Actor.UserRelationshipCount Namespace : PlayGen.SUGAR.Server.Model Assembly : PlayGen.SUGAR.Server.Model.dll Syntax public class User : Actor Properties ActorType Declaration public override ActorType ActorType { get; } Property Value Type Description ActorType Overrides Actor.ActorType"
  },
  "api/PlayGen.SUGAR.Server.Core.Controllers.ResourceController.html": {
    "href": "api/PlayGen.SUGAR.Server.Core.Controllers.ResourceController.html",
    "title": "Class ResourceController | SUGAR",
    "keywords": "Class ResourceController Inheritance System.Object ResourceController Namespace : PlayGen.SUGAR.Server.Core.Controllers Assembly : PlayGen.SUGAR.Server.Core.dll Syntax public class ResourceController : object Constructors ResourceController(ILogger<ResourceController>, ILogger<EvaluationDataController>, SUGARContextFactory) Declaration public ResourceController(ILogger<ResourceController> logger, ILogger<EvaluationDataController> evaluationDataLogger, SUGARContextFactory contextFactory) Parameters Type Name Description ILogger < ResourceController > logger ILogger < EvaluationDataController > evaluationDataLogger SUGARContextFactory contextFactory Methods AddQuantity(Int32, Int64) Declaration public EvaluationData AddQuantity(int resourceId, long addAmount) Parameters Type Name Description System.Int32 resourceId System.Int64 addAmount Returns Type Description EvaluationData Create(EvaluationData) Declaration public void Create(EvaluationData data) Parameters Type Name Description EvaluationData data CreateOrUpdate(Int32, Int32, String, Int64) Declaration public EvaluationData CreateOrUpdate(int gameId, int actorId, string key, long quantity) Parameters Type Name Description System.Int32 gameId System.Int32 actorId System.String key System.Int64 quantity Returns Type Description EvaluationData Get(Int32, Int32, String[]) Declaration public List<EvaluationData> Get(int gameId, int actorId, string[] keys = null) Parameters Type Name Description System.Int32 gameId System.Int32 actorId System.String [] keys Returns Type Description List < EvaluationData > Transfer(Int32, Int32, Int32, String, Int64, out EvaluationData) Declaration public EvaluationData Transfer(int gameId, int fromActorId, int toActorId, string key, long transferQuantity, out EvaluationData fromResource) Parameters Type Name Description System.Int32 gameId System.Int32 fromActorId System.Int32 toActorId System.String key System.Int64 transferQuantity EvaluationData fromResource Returns Type Description EvaluationData"
  },
  "api/PlayGen.SUGAR.Server.Core.EvaluationEvents.ProgressEvaluator.html": {
    "href": "api/PlayGen.SUGAR.Server.Core.EvaluationEvents.ProgressEvaluator.html",
    "title": "Class ProgressEvaluator | SUGAR",
    "keywords": "Class ProgressEvaluator Inheritance System.Object ProgressEvaluator Namespace : PlayGen.SUGAR.Server.Core.EvaluationEvents Assembly : PlayGen.SUGAR.Server.Core.dll Syntax public class ProgressEvaluator : object Constructors ProgressEvaluator(EvaluationController) Declaration public ProgressEvaluator(EvaluationController evaluationController) Parameters Type Name Description EvaluationController evaluationController Methods EvaluateActor(List<Evaluation>, Session) Declaration public ConcurrentProgressCache EvaluateActor(List<Evaluation> evaluations, Session session) Parameters Type Name Description List < Evaluation > evaluations Session session Returns Type Description ConcurrentProgressCache EvaluateSessions(ICollection<Session>, ICollection<Evaluation>) Declaration public ConcurrentProgressCache EvaluateSessions(ICollection<Session> sessions, ICollection<Evaluation> evaluations) Parameters Type Name Description ICollection < Session > sessions ICollection < Evaluation > evaluations Returns Type Description ConcurrentProgressCache EvaluateSessions(ICollection<Session>, Evaluation) Declaration public ConcurrentProgressCache EvaluateSessions(ICollection<Session> sessions, Evaluation evaluation) Parameters Type Name Description ICollection < Session > sessions Evaluation evaluation Returns Type Description ConcurrentProgressCache"
  },
  "api/PlayGen.SUGAR.Server.Core.EvaluationEvents.ProgressNotificationCache.html": {
    "href": "api/PlayGen.SUGAR.Server.Core.EvaluationEvents.ProgressNotificationCache.html",
    "title": "Class ProgressNotificationCache | SUGAR",
    "keywords": "Class ProgressNotificationCache Check newly evaluated progress and store notifications for values of any significance Inheritance System.Object ProgressNotificationCache Namespace : PlayGen.SUGAR.Server.Core.EvaluationEvents Assembly : PlayGen.SUGAR.Server.Core.dll Syntax public class ProgressNotificationCache : object Methods Get(Int32, Int32) Declaration public ConcurrentDictionary<int, ConcurrentDictionary<Evaluation, float>> Get(int gameId, int actorId) Parameters Type Name Description System.Int32 gameId System.Int32 actorId Returns Type Description ConcurrentDictionary < System.Int32 , ConcurrentDictionary < Evaluation , System.Single >> Remove(Int32) Declaration public bool Remove(int evaluationId) Parameters Type Name Description System.Int32 evaluationId Returns Type Description System.Boolean Remove(Int32, Int32) Declaration public bool Remove(int gameId, int actorId) Parameters Type Name Description System.Int32 gameId System.Int32 actorId Returns Type Description System.Boolean Update(ConcurrentProgressCache, Single) Declaration public void Update(ConcurrentProgressCache addProgress, float minProgress = 1F) Parameters Type Name Description ConcurrentProgressCache addProgress System.Single minProgress"
  },
  "api/PlayGen.SUGAR.Server.EntityFramework.Controllers.RoleController.html": {
    "href": "api/PlayGen.SUGAR.Server.EntityFramework.Controllers.RoleController.html",
    "title": "Class RoleController | SUGAR",
    "keywords": "Class RoleController Inheritance System.Object DbController RoleController Inherited Members DbController.ContextFactory Namespace : PlayGen.SUGAR.Server.EntityFramework.Controllers Assembly : PlayGen.SUGAR.Server.EntityFramework.dll Syntax public class RoleController : DbController Constructors RoleController(SUGARContextFactory) Declaration public RoleController(SUGARContextFactory contextFactory) Parameters Type Name Description SUGARContextFactory contextFactory Methods Create(Role) Declaration public Role Create(Role role) Parameters Type Name Description Role role Returns Type Description Role Delete(Int32) Declaration public void Delete(int id) Parameters Type Name Description System.Int32 id Get() Declaration public List<Role> Get() Returns Type Description List < Role > Get(ClaimScope) Declaration public List<Role> Get(ClaimScope scope) Parameters Type Name Description ClaimScope scope Returns Type Description List < Role > Get(Int32) Declaration public Role Get(int id) Parameters Type Name Description System.Int32 id Returns Type Description Role GetDefault(ClaimScope, SUGARContext) Declaration public Role GetDefault(ClaimScope scope, SUGARContext context = null) Parameters Type Name Description ClaimScope scope SUGARContext context Returns Type Description Role"
  },
  "api/PlayGen.SUGAR.Server.EntityFramework.Controllers.UserController.html": {
    "href": "api/PlayGen.SUGAR.Server.EntityFramework.Controllers.UserController.html",
    "title": "Class UserController | SUGAR",
    "keywords": "Class UserController Inheritance System.Object DbController UserController Inherited Members DbController.ContextFactory Namespace : PlayGen.SUGAR.Server.EntityFramework.Controllers Assembly : PlayGen.SUGAR.Server.EntityFramework.dll Syntax public class UserController : DbController Constructors UserController(SUGARContextFactory) Declaration public UserController(SUGARContextFactory contextFactory) Parameters Type Name Description SUGARContextFactory contextFactory Methods Create(User, SUGARContext) Declaration public User Create(User user, SUGARContext context = null) Parameters Type Name Description User user SUGARContext context Returns Type Description User Delete(Int32) Declaration public void Delete(int id) Parameters Type Name Description System.Int32 id Get() Declaration public List<User> Get() Returns Type Description List < User > Get(Int32) Declaration public User Get(int id) Parameters Type Name Description System.Int32 id Returns Type Description User Search(String, Boolean) Declaration public List<User> Search(string name, bool exactMatch = false) Parameters Type Name Description System.String name System.Boolean exactMatch Returns Type Description List < User > Update(User) Declaration public User Update(User user) Parameters Type Name Description User user Returns Type Description User"
  },
  "api/PlayGen.SUGAR.Server.EntityFramework.Controllers.html": {
    "href": "api/PlayGen.SUGAR.Server.EntityFramework.Controllers.html",
    "title": "Namespace PlayGen.SUGAR.Server.EntityFramework.Controllers | SUGAR",
    "keywords": "Namespace PlayGen.SUGAR.Server.EntityFramework.Controllers Classes AccountController AccountSourceController ActorClaimController ActorController ActorDataController ActorRoleController ClaimController DbController EvaluationController EvaluationDataController GameController GroupController LeaderboardController MatchController RelationshipController RoleClaimController RoleController UserController"
  },
  "api/PlayGen.SUGAR.Server.EntityFramework.EntityConfigs.AccountConfig.html": {
    "href": "api/PlayGen.SUGAR.Server.EntityFramework.EntityConfigs.AccountConfig.html",
    "title": "Class AccountConfig | SUGAR",
    "keywords": "Class AccountConfig Inheritance System.Object AccountConfig Namespace : PlayGen.SUGAR.Server.EntityFramework.EntityConfigs Assembly : PlayGen.SUGAR.Server.EntityFramework.dll Syntax public class AccountConfig : IEntityTypeConfiguration<Account> Methods Configure(EntityTypeBuilder<Account>) Declaration public void Configure(EntityTypeBuilder<Account> builder) Parameters Type Name Description EntityTypeBuilder < Account > builder"
  },
  "api/PlayGen.SUGAR.Server.EntityFramework.EntityConfigs.LeaderboardConfig.html": {
    "href": "api/PlayGen.SUGAR.Server.EntityFramework.EntityConfigs.LeaderboardConfig.html",
    "title": "Class LeaderboardConfig | SUGAR",
    "keywords": "Class LeaderboardConfig Inheritance System.Object LeaderboardConfig Namespace : PlayGen.SUGAR.Server.EntityFramework.EntityConfigs Assembly : PlayGen.SUGAR.Server.EntityFramework.dll Syntax public class LeaderboardConfig : IEntityTypeConfiguration<Leaderboard> Methods Configure(EntityTypeBuilder<Leaderboard>) Declaration public void Configure(EntityTypeBuilder<Leaderboard> builder) Parameters Type Name Description EntityTypeBuilder < Leaderboard > builder"
  },
  "api/PlayGen.SUGAR.Server.EntityFramework.EntityConfigs.ActorRelationshipConfig.html": {
    "href": "api/PlayGen.SUGAR.Server.EntityFramework.EntityConfigs.ActorRelationshipConfig.html",
    "title": "Class ActorRelationshipConfig | SUGAR",
    "keywords": "Class ActorRelationshipConfig Inheritance System.Object ActorRelationshipConfig Namespace : PlayGen.SUGAR.Server.EntityFramework.EntityConfigs Assembly : PlayGen.SUGAR.Server.EntityFramework.dll Syntax public class ActorRelationshipConfig : IEntityTypeConfiguration<ActorRelationship> Methods Configure(EntityTypeBuilder<ActorRelationship>) Declaration public void Configure(EntityTypeBuilder<ActorRelationship> builder) Parameters Type Name Description EntityTypeBuilder < ActorRelationship > builder"
  },
  "api/PlayGen.SUGAR.Server.EntityFramework.EntityConfigs.ActorRelationshipRequestConfig.html": {
    "href": "api/PlayGen.SUGAR.Server.EntityFramework.EntityConfigs.ActorRelationshipRequestConfig.html",
    "title": "Class ActorRelationshipRequestConfig | SUGAR",
    "keywords": "Class ActorRelationshipRequestConfig Inheritance System.Object ActorRelationshipRequestConfig Namespace : PlayGen.SUGAR.Server.EntityFramework.EntityConfigs Assembly : PlayGen.SUGAR.Server.EntityFramework.dll Syntax public class ActorRelationshipRequestConfig : IEntityTypeConfiguration<ActorRelationshipRequest> Methods Configure(EntityTypeBuilder<ActorRelationshipRequest>) Declaration public void Configure(EntityTypeBuilder<ActorRelationshipRequest> builder) Parameters Type Name Description EntityTypeBuilder < ActorRelationshipRequest > builder"
  },
  "api/PlayGen.SUGAR.Server.EntityFramework.Exceptions.InvalidRelationshipException.html": {
    "href": "api/PlayGen.SUGAR.Server.EntityFramework.Exceptions.InvalidRelationshipException.html",
    "title": "Class InvalidRelationshipException | SUGAR",
    "keywords": "Class InvalidRelationshipException Inheritance System.Object InvalidRelationshipException Namespace : PlayGen.SUGAR.Server.EntityFramework.Exceptions Assembly : PlayGen.SUGAR.Server.EntityFramework.dll Syntax public class InvalidRelationshipException : Exception Constructors InvalidRelationshipException() Declaration public InvalidRelationshipException() InvalidRelationshipException(String) Declaration public InvalidRelationshipException(string message) Parameters Type Name Description System.String message InvalidRelationshipException(String, Exception) Declaration public InvalidRelationshipException(string message, Exception innerException) Parameters Type Name Description System.String message Exception innerException"
  },
  "api/PlayGen.SUGAR.Server.EntityFramework.Exceptions.MissingRecordException.html": {
    "href": "api/PlayGen.SUGAR.Server.EntityFramework.Exceptions.MissingRecordException.html",
    "title": "Class MissingRecordException | SUGAR",
    "keywords": "Class MissingRecordException Inheritance System.Object MissingRecordException Namespace : PlayGen.SUGAR.Server.EntityFramework.Exceptions Assembly : PlayGen.SUGAR.Server.EntityFramework.dll Syntax public class MissingRecordException : Exception Constructors MissingRecordException() Declaration public MissingRecordException() MissingRecordException(String) Declaration public MissingRecordException(string message) Parameters Type Name Description System.String message MissingRecordException(String, Exception) Declaration public MissingRecordException(string message, Exception inner) Parameters Type Name Description System.String message Exception inner"
  },
  "api/PlayGen.SUGAR.Server.EntityFramework.Exceptions.ReadOnlyContextException.html": {
    "href": "api/PlayGen.SUGAR.Server.EntityFramework.Exceptions.ReadOnlyContextException.html",
    "title": "Class ReadOnlyContextException | SUGAR",
    "keywords": "Class ReadOnlyContextException Inheritance System.Object ReadOnlyContextException Namespace : PlayGen.SUGAR.Server.EntityFramework.Exceptions Assembly : PlayGen.SUGAR.Server.EntityFramework.dll Syntax public class ReadOnlyContextException : Exception Constructors ReadOnlyContextException() Declaration public ReadOnlyContextException() ReadOnlyContextException(SerializationInfo, StreamingContext) Declaration protected ReadOnlyContextException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info StreamingContext context ReadOnlyContextException(String) Declaration public ReadOnlyContextException(string message) Parameters Type Name Description System.String message ReadOnlyContextException(String, Exception) Declaration public ReadOnlyContextException(string message, Exception innerException) Parameters Type Name Description System.String message Exception innerException"
  },
  "api/PlayGen.SUGAR.Server.EntityFramework.Exceptions.html": {
    "href": "api/PlayGen.SUGAR.Server.EntityFramework.Exceptions.html",
    "title": "Namespace PlayGen.SUGAR.Server.EntityFramework.Exceptions | SUGAR",
    "keywords": "Namespace PlayGen.SUGAR.Server.EntityFramework.Exceptions Classes DbExceptionHandler DuplicateRecordException DuplicateRelationshipException InvalidRelationshipException MissingRecordException ReadOnlyContextException"
  },
  "api/PlayGen.SUGAR.Server.Model.Interfaces.IModificationHistory.html": {
    "href": "api/PlayGen.SUGAR.Server.Model.Interfaces.IModificationHistory.html",
    "title": "Interface IModificationHistory | SUGAR",
    "keywords": "Interface IModificationHistory Namespace : PlayGen.SUGAR.Server.Model.Interfaces Assembly : PlayGen.SUGAR.Server.Model.dll Syntax public interface IModificationHistory Properties DateCreated Declaration DateTime DateCreated { get; set; } Property Value Type Description DateTime DateModified Declaration DateTime DateModified { get; set; } Property Value Type Description DateTime"
  },
  "api/PlayGen.SUGAR.Server.Model.Interfaces.IRelationship.html": {
    "href": "api/PlayGen.SUGAR.Server.Model.Interfaces.IRelationship.html",
    "title": "Interface IRelationship | SUGAR",
    "keywords": "Interface IRelationship Namespace : PlayGen.SUGAR.Server.Model.Interfaces Assembly : PlayGen.SUGAR.Server.Model.dll Syntax public interface IRelationship Properties AcceptorId Declaration int AcceptorId { get; set; } Property Value Type Description System.Int32 RequestorId Declaration int RequestorId { get; set; } Property Value Type Description System.Int32"
  },
  "api/PlayGen.SUGAR.Server.Model.Interfaces.html": {
    "href": "api/PlayGen.SUGAR.Server.Model.Interfaces.html",
    "title": "Namespace PlayGen.SUGAR.Server.Model.Interfaces | SUGAR",
    "keywords": "Namespace PlayGen.SUGAR.Server.Model.Interfaces Interfaces IEvaluationData IModificationHistory IRelationship"
  },
  "api/PlayGen.SUGAR.Server.Model.Leaderboard.html": {
    "href": "api/PlayGen.SUGAR.Server.Model.Leaderboard.html",
    "title": "Class Leaderboard | SUGAR",
    "keywords": "Class Leaderboard Inheritance System.Object Leaderboard Namespace : PlayGen.SUGAR.Server.Model Assembly : PlayGen.SUGAR.Server.Model.dll Syntax public class Leaderboard : object Properties ActorType Declaration public ActorType ActorType { get; set; } Property Value Type Description ActorType CriteriaScope Declaration public CriteriaScope CriteriaScope { get; set; } Property Value Type Description CriteriaScope EvaluationDataCategory Declaration public EvaluationDataCategory EvaluationDataCategory { get; set; } Property Value Type Description EvaluationDataCategory EvaluationDataKey Declaration public string EvaluationDataKey { get; set; } Property Value Type Description System.String EvaluationDataType Declaration public EvaluationDataType EvaluationDataType { get; set; } Property Value Type Description EvaluationDataType GameId Declaration public int GameId { get; set; } Property Value Type Description System.Int32 LeaderboardType Declaration public LeaderboardType LeaderboardType { get; set; } Property Value Type Description LeaderboardType Name Declaration public string Name { get; set; } Property Value Type Description System.String Token Declaration public string Token { get; set; } Property Value Type Description System.String"
  },
  "api/PlayGen.SUGAR.Server.WebAPI.Controllers.GameController.html": {
    "href": "api/PlayGen.SUGAR.Server.WebAPI.Controllers.GameController.html",
    "title": "Class GameController | SUGAR",
    "keywords": "Class GameController Web Controller that facilitates Game specific operations. Inheritance System.Object GameController Namespace : PlayGen.SUGAR.Server.WebAPI.Controllers Assembly : PlayGen.SUGAR.Server.WebAPI.dll Syntax public class GameController : Controller Constructors GameController(GameController, IAuthorizationService) Declaration public GameController(GameController gameCoreController, IAuthorizationService authorizationService) Parameters Type Name Description GameController gameCoreController IAuthorizationService authorizationService Methods Create(GameRequest) Create a new Game. Requires the Name to be unique. Example Usage: POST api/game Declaration public Task<IActionResult> Create(GameRequest newGame) Parameters Type Name Description GameRequest newGame GameRequest object that contains the details of the new Game. Returns Type Description Task < IActionResult > A GameResponse containing the new Game details. Delete(Int32) Delete Game with the ID provided. Example Usage: DELETE api/game/1 Declaration public Task<IActionResult> Delete(int id) Parameters Type Name Description System.Int32 id Game ID. Returns Type Description Task < IActionResult > Get() Get a list of all Games. Example Usage: GET api/game/list Declaration public IActionResult Get() Returns Type Description IActionResult A list of GameResponse that hold Game details. Get(String) Get a list of Games that match provided. Example Usage: GET api/game/find/game1 Declaration public IActionResult Get(string name) Parameters Type Name Description System.String name Game name Returns Type Description IActionResult A list of GameResponse which match the search criteria. GetById(Int32) Get Game that matches provided. Example Usage: GET api/game/findbyid/1 Declaration public IActionResult GetById(int id) Parameters Type Name Description System.Int32 id Game id Returns Type Description IActionResult GameResponse which matches search criteria. GetControlled() Get a list of all Games this Actor has control over. Example Usage: GET api/game/controlled Declaration public IActionResult GetControlled() Returns Type Description IActionResult A list of GameResponse that hold Game details. Update(Int32, GameRequest) Update an existing Game. Example Usage: PUT api/game/update/1 Declaration public Task<IActionResult> Update(int id, GameRequest game) Parameters Type Name Description System.Int32 id Id of the existing Game. GameRequest game GameRequest object that holds the details of the Game. Returns Type Description Task < IActionResult >"
  },
  "api/PlayGen.SUGAR.Server.WebAPI.Controllers.GameDataController.html": {
    "href": "api/PlayGen.SUGAR.Server.WebAPI.Controllers.GameDataController.html",
    "title": "Class GameDataController | SUGAR",
    "keywords": "Class GameDataController Web Controller that facilitates GameData specific operations. Inheritance System.Object GameDataController Namespace : PlayGen.SUGAR.Server.WebAPI.Controllers Assembly : PlayGen.SUGAR.Server.WebAPI.dll Syntax public class GameDataController : Controller Constructors GameDataController(GameDataController, IAuthorizationService) Declaration public GameDataController(GameDataController gameDataCoreController, IAuthorizationService authorizationService) Parameters Type Name Description GameDataController gameDataCoreController IAuthorizationService authorizationService Methods Add(EvaluationDataRequest) Create a new GameData record. Example Usage: POST api/gamedata Declaration public Task<IActionResult> Add(EvaluationDataRequest newData) Parameters Type Name Description EvaluationDataRequest newData EvaluationDataRequest object that holds the details of the new GameData. Returns Type Description Task < IActionResult > A EvaluationDataResponse containing the new GameData details. Get(Nullable<Int32>, Nullable<Int32>, String[]) Find a list of all GameData that match the , and provided. Example Usage: GET api/gamedata?actorId=1&gameId=1&key=key1&key=key2 Declaration public Task<IActionResult> Get(int? actorId, int? gameId, string[] key) Parameters Type Name Description System.Nullable < System.Int32 > actorId ID of a User/Group. System.Nullable < System.Int32 > gameId ID of a Game. System.String [] key Array of Key names. Returns Type Description Task < IActionResult > A list of EvaluationDataResponse which match the search criteria. GetByLeaderboardType(Int32, Int32, String, EvaluationDataType, LeaderboardType) Find GameData that matches the , , , and provided. Example Usage: GET api/gamedata/leaderboardType/1/1/datakey/long/highest Declaration public Task<IActionResult> GetByLeaderboardType(int actorId, int gameId, string key, EvaluationDataType dataType, LeaderboardType sortType) Parameters Type Name Description System.Int32 actorId ID of a User/Group. System.Int32 gameId ID of a Game. System.String key Array of Key names. EvaluationDataType dataType Data type of value LeaderboardType sortType Returns Type Description Task < IActionResult > GetGameActors(Int32) Find a list of all Actors that have data saved for the game provided. Example Usage: GET api/gamedata/gameactors/1 Declaration public IActionResult GetGameActors(int id) Parameters Type Name Description System.Int32 id ID of a Game. Returns Type Description IActionResult A list of ActorResponse which match the search criteria. GetGameKeys(Int32) Find a list of all GameData keys for the provided. Example Usage: GET api/gamedata/gamekeys/1 Declaration public Task<IActionResult> GetGameKeys(int id) Parameters Type Name Description System.Int32 id ID of a Game. Returns Type Description Task < IActionResult > A list of GameData keys and their EvaluationDataType that has data saved for the provided game ID"
  },
  "api/PlayGen.SUGAR.Server.WebAPI.Controllers.GroupController.html": {
    "href": "api/PlayGen.SUGAR.Server.WebAPI.Controllers.GroupController.html",
    "title": "Class GroupController | SUGAR",
    "keywords": "Class GroupController Web Controller that facilitates Group specific operations. Inheritance System.Object GroupController Namespace : PlayGen.SUGAR.Server.WebAPI.Controllers Assembly : PlayGen.SUGAR.Server.WebAPI.dll Syntax public class GroupController : Controller Constructors GroupController(GroupController, IAuthorizationService) Declaration public GroupController(GroupController groupCoreController, IAuthorizationService authorizationService) Parameters Type Name Description GroupController groupCoreController IAuthorizationService authorizationService Methods Create(GroupRequest) Create a new Group. Requires the to be unique for Groups. Example Usage: POST api/group Declaration public IActionResult Create(GroupRequest actor) Parameters Type Name Description GroupRequest actor GroupRequest object that holds the details of the new Group. Returns Type Description IActionResult A GroupResponse containing the new Group details. Delete(Int32) Delete group with the provided. Example Usage: DELETE api/group/1 Declaration public Task<IActionResult> Delete(int id) Parameters Type Name Description System.Int32 id Group ID. Returns Type Description Task < IActionResult > Get() Get a list of all Groups. Example Usage: GET api/group/list Declaration public IActionResult Get() Returns Type Description IActionResult A list of GroupResponse that hold Group details. Get(Int32) Get Group that matches provided. Example Usage: GET api/group/findbyid/1 Declaration public IActionResult Get(int id) Parameters Type Name Description System.Int32 id Group id. Returns Type Description IActionResult GroupResponse which matches search criteria. Get(String) Get a list of Groups that match provided. Example Usage: GET api/group/find/group1 Declaration public IActionResult Get(string name) Parameters Type Name Description System.String name Group name. Returns Type Description IActionResult A list of GroupResponse which match the search criteria. GetControlled() Get a list of all Groups this Actor has control over. Example Usage: GET api/group/controlled Declaration public IActionResult GetControlled() Returns Type Description IActionResult A list of GroupResponse that hold Group details. Update(Int32, GroupRequest) Update an existing Group. Example Usage: PUT api/group/update/1 Declaration public Task<IActionResult> Update(int id, GroupRequest group) Parameters Type Name Description System.Int32 id Id of the existing Group. GroupRequest group GroupRequest object that holds the details of the Group. Returns Type Description Task < IActionResult >"
  },
  "api/PlayGen.SUGAR.Server.WebAPI.Controllers.GroupMemberController.html": {
    "href": "api/PlayGen.SUGAR.Server.WebAPI.Controllers.GroupMemberController.html",
    "title": "Class GroupMemberController | SUGAR",
    "keywords": "Class GroupMemberController Web Controller that facilitates User to Group relationship specific operations. Inheritance System.Object GroupMemberController Namespace : PlayGen.SUGAR.Server.WebAPI.Controllers Assembly : PlayGen.SUGAR.Server.WebAPI.dll Syntax public class GroupMemberController : Controller Constructors GroupMemberController(RelationshipController, IAuthorizationService) Declaration public GroupMemberController(RelationshipController relationshipController, IAuthorizationService authorizationService) Parameters Type Name Description RelationshipController relationshipController IAuthorizationService authorizationService Methods CreateMemberRequest(RelationshipRequest) Create a new relationship request between the User and Group. Requires a relationship between the User and Group to not already exist. Example Usage: POST api/groupmember Declaration public Task<IActionResult> CreateMemberRequest(RelationshipRequest relationship) Parameters Type Name Description RelationshipRequest relationship RelationshipRequest object that holds the details of the new relationship request. Returns Type Description Task < IActionResult > A RelationshipResponse containing the new Relationship details. GetMemberCount(Int32) Get a count of users that have a relationship with this . Example Usage: GET api/groupmember/membercount/1 Declaration public IActionResult GetMemberCount(int groupId) Parameters Type Name Description System.Int32 groupId ID of the group. Returns Type Description IActionResult A count of members in the group that matches the search criteria. GetMemberRequests(Int32) Get a list of all Users that have relationship requests for this . Example Usage: GET api/groupmember/requests/1 Declaration public Task<IActionResult> GetMemberRequests(int groupId) Parameters Type Name Description System.Int32 groupId ID of the group. Returns Type Description Task < IActionResult > A list of ActorResponse which match the search criteria. GetMembers(Int32) Get a list of all Users that have relationships with this . Example Usage: GET api/groupmember/members/1 Declaration public IActionResult GetMembers(int groupId) Parameters Type Name Description System.Int32 groupId ID of the group. Returns Type Description IActionResult A list of ActorResponse which match the search criteria. GetSentRequests(Int32) Get a list of all Groups that have been sent relationship requests for this . Example Usage: GET api/groupmember/sentrequests/1 Declaration public Task<IActionResult> GetSentRequests(int userId) Parameters Type Name Description System.Int32 userId ID of the user. Returns Type Description Task < IActionResult > A list of ActorResponse which match the search criteria. GetUserGroups(Int32) Get a list of all Groups that have relationships with this . Example Usage: GET api/groupmember/usergroups/1 Declaration public IActionResult GetUserGroups(int userId) Parameters Type Name Description System.Int32 userId ID of the User. Returns Type Description IActionResult A list of ActorResponse which match the search criteria. UpdateMember(RelationshipStatusUpdate) Update an existing relationship between and . Requires the relationship to already exist between the User and Group. Example Usage: PUT api/groupmember Declaration public Task<IActionResult> UpdateMember(RelationshipStatusUpdate relationship) Parameters Type Name Description RelationshipStatusUpdate relationship RelationshipStatusUpdate object that holds the details of the relationship. Returns Type Description Task < IActionResult > UpdateMemberRequest(RelationshipStatusUpdate) Update an existing relationship request between and . Requires the relationship request to already exist between the User and Group. Example Usage: PUT api/groupmember/request Declaration public Task<IActionResult> UpdateMemberRequest(RelationshipStatusUpdate relationship) Parameters Type Name Description RelationshipStatusUpdate relationship RelationshipStatusUpdate object that holds the details of the relationship. Returns Type Description Task < IActionResult >"
  },
  "api/PlayGen.SUGAR.Server.WebAPI.Extensions.EvaluationCriteriaExtensions.html": {
    "href": "api/PlayGen.SUGAR.Server.WebAPI.Extensions.EvaluationCriteriaExtensions.html",
    "title": "Class EvaluationCriteriaExtensions | SUGAR",
    "keywords": "Class EvaluationCriteriaExtensions Inheritance System.Object EvaluationCriteriaExtensions Namespace : PlayGen.SUGAR.Server.WebAPI.Extensions Assembly : PlayGen.SUGAR.Server.WebAPI.dll Syntax public static class EvaluationCriteriaExtensions : object Methods ToContract(EvaluationCriteria) Declaration public static EvaluationCriteriaResponse ToContract(this EvaluationCriteria completionCriteria) Parameters Type Name Description EvaluationCriteria completionCriteria Returns Type Description EvaluationCriteriaResponse ToContractList(List<EvaluationCriteria>) Declaration public static List<EvaluationCriteriaResponse> ToContractList(this List<EvaluationCriteria> completionCriterias) Parameters Type Name Description List < EvaluationCriteria > completionCriterias Returns Type Description List < EvaluationCriteriaResponse > ToModel(EvaluationCriteriaCreateRequest) Declaration public static EvaluationCriteria ToModel(this EvaluationCriteriaCreateRequest completionCriteria) Parameters Type Name Description EvaluationCriteriaCreateRequest completionCriteria Returns Type Description EvaluationCriteria ToModel(EvaluationCriteriaUpdateRequest) Declaration public static EvaluationCriteria ToModel(this EvaluationCriteriaUpdateRequest completionCriteria) Parameters Type Name Description EvaluationCriteriaUpdateRequest completionCriteria Returns Type Description EvaluationCriteria ToModelList(List<EvaluationCriteriaCreateRequest>) Declaration public static List<EvaluationCriteria> ToModelList(this List<EvaluationCriteriaCreateRequest> completionCriterias) Parameters Type Name Description List < EvaluationCriteriaCreateRequest > completionCriterias Returns Type Description List < EvaluationCriteria > ToModelList(List<EvaluationCriteriaUpdateRequest>) Declaration public static List<EvaluationCriteria> ToModelList(this List<EvaluationCriteriaUpdateRequest> completionCriterias) Parameters Type Name Description List < EvaluationCriteriaUpdateRequest > completionCriterias Returns Type Description List < EvaluationCriteria >"
  },
  "api/PlayGen.SUGAR.Server.WebAPI.Extensions.EvaluationDataExtensions.html": {
    "href": "api/PlayGen.SUGAR.Server.WebAPI.Extensions.EvaluationDataExtensions.html",
    "title": "Class EvaluationDataExtensions | SUGAR",
    "keywords": "Class EvaluationDataExtensions Inheritance System.Object EvaluationDataExtensions Namespace : PlayGen.SUGAR.Server.WebAPI.Extensions Assembly : PlayGen.SUGAR.Server.WebAPI.dll Syntax public static class EvaluationDataExtensions : object Methods ToContract(EvaluationData) Declaration public static EvaluationDataResponse ToContract(this EvaluationData evaluationData) Parameters Type Name Description EvaluationData evaluationData Returns Type Description EvaluationDataResponse ToContractList(List<EvaluationData>) Declaration public static List<EvaluationDataResponse> ToContractList(this List<EvaluationData> models) Parameters Type Name Description List < EvaluationData > models Returns Type Description List < EvaluationDataResponse >"
  },
  "unity-client/api/PlayGen.SUGAR.Unity.Editor.SetEditorAutoLogin.AutoLoginOption.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.Editor.SetEditorAutoLogin.AutoLoginOption.html",
    "title": "Class SetEditorAutoLogin.AutoLoginOption | SUGAR",
    "keywords": "Class SetEditorAutoLogin.AutoLoginOption Inheritance System.Object SetEditorAutoLogin.AutoLoginOption SetEditorAutoLogin.BoolValue SetEditorAutoLogin.StringValue Namespace : PlayGen.SUGAR.Unity.Editor Assembly : PlayGen.SUGAR.Unity.Editor.dll Syntax public class AutoLoginOption : object Fields AutoLoginPrefix Declaration public string AutoLoginPrefix Field Value Type Description System.String DependsOnValue depends on value name must be the name of a boolean Declaration public string DependsOnValue Field Value Type Description System.String Key Declaration public string Key Field Value Type Description System.String Label Declaration public string Label Field Value Type Description System.String Required Declaration public bool Required Field Value Type Description System.Boolean SugarRefName Declaration public string SugarRefName Field Value Type Description System.String"
  },
  "unity-client/api/PlayGen.SUGAR.Unity.Editor.SetEditorAutoLogin.BoolValue.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.Editor.SetEditorAutoLogin.BoolValue.html",
    "title": "Class SetEditorAutoLogin.BoolValue | SUGAR",
    "keywords": "Class SetEditorAutoLogin.BoolValue Inheritance System.Object SetEditorAutoLogin.AutoLoginOption SetEditorAutoLogin.BoolValue Inherited Members SetEditorAutoLogin.AutoLoginOption.Label SetEditorAutoLogin.AutoLoginOption.Key SetEditorAutoLogin.AutoLoginOption.SugarRefName SetEditorAutoLogin.AutoLoginOption.Required SetEditorAutoLogin.AutoLoginOption.AutoLoginPrefix SetEditorAutoLogin.AutoLoginOption.DependsOnValue Namespace : PlayGen.SUGAR.Unity.Editor Assembly : PlayGen.SUGAR.Unity.Editor.dll Syntax public class BoolValue : SetEditorAutoLogin.AutoLoginOption Constructors BoolValue(Boolean) Declaration public BoolValue(bool value) Parameters Type Name Description System.Boolean value BoolValue(String, String, String, String, Boolean, Boolean) Declaration public BoolValue(string label, string key, string sugarRefName, string autoLoginPrefix, bool required = false, bool value = false) Parameters Type Name Description System.String label System.String key System.String sugarRefName System.String autoLoginPrefix System.Boolean required System.Boolean value Fields Value Declaration public bool Value Field Value Type Description System.Boolean"
  },
  "api/PlayGen.SUGAR.Client.EvaluationEvents.EvaluationNotification.html": {
    "href": "api/PlayGen.SUGAR.Client.EvaluationEvents.EvaluationNotification.html",
    "title": "Class EvaluationNotification | SUGAR",
    "keywords": "Class EvaluationNotification Inheritance System.Object EvaluationNotification Namespace : PlayGen.SUGAR.Client.EvaluationEvents Assembly : PlayGen.SUGAR.Client.dll Syntax public class EvaluationNotification : object Properties Actor The details of the actor whose progress was being checked. Declaration public ActorResponse Actor { get; set; } Property Value Type Description ActorResponse Description The description of the achievement/skill which progress was being checked for. Declaration public string Description { get; set; } Property Value Type Description System.String Name The name of the achievement/skill which progress was being checked for. Declaration public string Name { get; set; } Property Value Type Description System.String Progress Progress of current achievement/skill [0 to 1]. Declaration public float Progress { get; set; } Property Value Type Description System.Single Token The token of the achievement/skill which progress was being checked for. Declaration public string Token { get; set; } Property Value Type Description System.String Type Skill or Achievement Declaration public EvaluationType Type { get; set; } Property Value Type Description EvaluationType"
  },
  "api/PlayGen.SUGAR.Contracts.GroupRequest.html": {
    "href": "api/PlayGen.SUGAR.Contracts.GroupRequest.html",
    "title": "Class GroupRequest | SUGAR",
    "keywords": "Class GroupRequest Encapsulates group details. Inheritance System.Object ActorRequest GroupRequest Inherited Members ActorRequest.Name ActorRequest.Description Namespace : PlayGen.SUGAR.Contracts Assembly : PlayGen.SUGAR.Contracts.dll Syntax public class GroupRequest : ActorRequest Examples JSON { Name : \"Actor Name\" } Extension Methods GroupExtensions.ToGroupModel(GroupRequest)"
  },
  "api/PlayGen.SUGAR.Contracts.ResourceTransferRequest.html": {
    "href": "api/PlayGen.SUGAR.Contracts.ResourceTransferRequest.html",
    "title": "Class ResourceTransferRequest | SUGAR",
    "keywords": "Class ResourceTransferRequest Encapsulates Resource Transfer details. Inheritance System.Object ResourceTransferRequest Namespace : PlayGen.SUGAR.Contracts Assembly : PlayGen.SUGAR.Contracts.dll Syntax public class ResourceTransferRequest : object Properties GameId The Id of the Game which this Resource belongs to. Declaration public int? GameId { get; set; } Property Value Type Description System.Nullable < System.Int32 > Key The key of the Resource being transferred. Declaration public string Key { get; set; } Property Value Type Description System.String Quantity The amount of the Resource being transferred. Declaration public long? Quantity { get; set; } Property Value Type Description System.Nullable < System.Int64 > RecipientActorId The Id of the Actor who will receive this Resource. Declaration public int? RecipientActorId { get; set; } Property Value Type Description System.Nullable < System.Int32 > SenderActorId The Id of the Actor who will send this Resource. Declaration public int? SenderActorId { get; set; } Property Value Type Description System.Nullable < System.Int32 >"
  },
  "api/PlayGen.SUGAR.Server.Model.Account.html": {
    "href": "api/PlayGen.SUGAR.Server.Model.Account.html",
    "title": "Class Account | SUGAR",
    "keywords": "Class Account Inheritance System.Object Account Namespace : PlayGen.SUGAR.Server.Model Assembly : PlayGen.SUGAR.Server.Model.dll Syntax public class Account : object Properties AccountSource Declaration public virtual AccountSource AccountSource { get; set; } Property Value Type Description AccountSource AccountSourceId Declaration public int AccountSourceId { get; set; } Property Value Type Description System.Int32 Id Declaration public int Id { get; set; } Property Value Type Description System.Int32 Name Declaration public string Name { get; set; } Property Value Type Description System.String Password Declaration public string Password { get; set; } Property Value Type Description System.String User Declaration public virtual User User { get; set; } Property Value Type Description User UserId Declaration public int UserId { get; set; } Property Value Type Description System.Int32"
  },
  "api/PlayGen.SUGAR.Server.Model.AccountSource.html": {
    "href": "api/PlayGen.SUGAR.Server.Model.AccountSource.html",
    "title": "Class AccountSource | SUGAR",
    "keywords": "Class AccountSource Inheritance System.Object AccountSource Namespace : PlayGen.SUGAR.Server.Model Assembly : PlayGen.SUGAR.Server.Model.dll Syntax public class AccountSource : object Properties ApiSecret Declaration public string ApiSecret { get; set; } Property Value Type Description System.String AutoRegister Declaration public bool AutoRegister { get; set; } Property Value Type Description System.Boolean Description Declaration public string Description { get; set; } Property Value Type Description System.String Id Declaration public int Id { get; set; } Property Value Type Description System.Int32 RequiresPassword Declaration public bool RequiresPassword { get; set; } Property Value Type Description System.Boolean Token Declaration public string Token { get; set; } Property Value Type Description System.String UsernamePattern Declaration public string UsernamePattern { get; set; } Property Value Type Description System.String"
  },
  "api/PlayGen.SUGAR.Server.WebAPI.Controllers.AchievementsController.html": {
    "href": "api/PlayGen.SUGAR.Server.WebAPI.Controllers.AchievementsController.html",
    "title": "Class AchievementsController | SUGAR",
    "keywords": "Class AchievementsController Web Controller that facilitates Achievement specific operations. Inheritance System.Object EvaluationsController AchievementsController Inherited Members EvaluationsController._authorizationService EvaluationsController.EvaluationCoreController EvaluationsController.Get(Int32, EvaluationType) EvaluationsController.Get(String, Int32, EvaluationType) EvaluationsController.GetGameProgress(Int32, Int32, EvaluationType) EvaluationsController.GetEvaluationProgress(String, Int32, Int32, EvaluationType) EvaluationsController.Delete(String, Int32, EvaluationType) Namespace : PlayGen.SUGAR.Server.WebAPI.Controllers Assembly : PlayGen.SUGAR.Server.WebAPI.dll Syntax public class AchievementsController : EvaluationsController Constructors AchievementsController(EvaluationController, EvaluationTracker, IAuthorizationService) Declaration public AchievementsController(EvaluationController evaluationCoreController, EvaluationTracker evaluationTracker, IAuthorizationService authorizationService) Parameters Type Name Description EvaluationController evaluationCoreController EvaluationTracker evaluationTracker IAuthorizationService authorizationService Methods Create(EvaluationCreateRequest) Create a new Achievement. Requires Name to be unique to that GameId . Example Usage: POST api/achievements/create Declaration public Task<IActionResult> Create(EvaluationCreateRequest newAchievement) Parameters Type Name Description EvaluationCreateRequest newAchievement EvaluationCreateRequest object that holds the details of the new Achievement. Returns Type Description Task < IActionResult > Returns a EvaluationResponse object containing details for the newly created Achievement. Delete(String, Int32) Delete Achievement with the and provided. Example Usage: DELETE api/achievements/ACHIEVEMENT_TOKEN/1 Declaration public Task<IActionResult> Delete(string token, int gameId) Parameters Type Name Description System.String token Token of Achievement System.Int32 gameId ID of the Game the Achievement is for Returns Type Description Task < IActionResult > Get(Int32) Find a list of Achievements that match . If global is provided instead of a gameId, get all global achievements, ie. achievements that are not associated with a specific game. Example Usage: GET api/achievements/game/1/list Declaration public Task<IActionResult> Get(int gameId) Parameters Type Name Description System.Int32 gameId Game ID Returns Type Description Task < IActionResult > Returns multiple EvaluationResponse that hold Achievement details Get(String, Int32) Find an Achievement that matches and . Example Usage: GET api/achievements/find/ACHIEVEMENT_TOKEN/1 Declaration public Task<IActionResult> Get(string token, int gameId) Parameters Type Name Description System.String token Token of Achievement System.Int32 gameId ID of the Game the Achievement is for Returns Type Description Task < IActionResult > Returns EvaluationResponse that holds Achievement details GetAchievementProgress(String, Int32, Int32) Find the current progress for an Achievement for . Example Usage: GET api/achievements/ACHIEVEMENT_TOKEN/1/evaluate/1 Declaration public IActionResult GetAchievementProgress(string token, int gameId, int actorId) Parameters Type Name Description System.String token Token of Achievement System.Int32 gameId ID of the Game the Achievement is for System.Int32 actorId ID of Group/User Returns Type Description IActionResult Returns multiple EvaluationProgressResponse that hold current progress toward achievement. GetGameProgress(Int32, Int32) Find the current progress for all achievements for a for . Example Usage: GET api/achievements/game/1/evaluate/1 Declaration public IActionResult GetGameProgress(int gameId, int actorId) Parameters Type Name Description System.Int32 gameId ID of Game System.Int32 actorId ID of Group/User Returns Type Description IActionResult Returns multiple EvaluationProgressResponse that hold current progress toward achievement. Update(EvaluationUpdateRequest) Update an existing Achievement. Example Usage: PUT api/achievements/update Declaration public Task<IActionResult> Update(EvaluationUpdateRequest achievement) Parameters Type Name Description EvaluationUpdateRequest achievement EvaluationCreateRequest object that holds the details of the Achievement. Returns Type Description Task < IActionResult >"
  },
  "api/PlayGen.SUGAR.Server.WebAPI.Controllers.ActorClaimController.html": {
    "href": "api/PlayGen.SUGAR.Server.WebAPI.Controllers.ActorClaimController.html",
    "title": "Class ActorClaimController | SUGAR",
    "keywords": "Class ActorClaimController Web Controller that facilitates ActorClaim specific operations. Inheritance System.Object ActorClaimController Namespace : PlayGen.SUGAR.Server.WebAPI.Controllers Assembly : PlayGen.SUGAR.Server.WebAPI.dll Syntax public class ActorClaimController : Controller Constructors ActorClaimController(ActorClaimController, ClaimController, IAuthorizationService) Declaration public ActorClaimController(ActorClaimController actorClaimCoreController, ClaimController claimCoreController, IAuthorizationService authorizationService) Parameters Type Name Description ActorClaimController actorClaimCoreController ClaimController claimCoreController IAuthorizationService authorizationService Methods Create(ActorClaimRequest) Create a new ActorClaim. Example Usage: POST api/actorclaim Declaration public Task<IActionResult> Create(ActorClaimRequest newClaim) Parameters Type Name Description ActorClaimRequest newClaim ActorClaimRequest object that contains the details of the new ActorClaim. Returns Type Description Task < IActionResult > A ActorClaimResponse containing the new ActorClaim details. Delete(Int32) Delete ActorClaim with the ID provided. Example Usage: DELETE api/actorclaim/1 Declaration public Task<IActionResult> Delete(int id) Parameters Type Name Description System.Int32 id ActorClaim ID. Returns Type Description Task < IActionResult > GetActorClaims(Int32) Get a list of all Claims for this Actor. Example Usage: GET api/actorclaim/actor/1/ Declaration public Task<IActionResult> GetActorClaims(int id) Parameters Type Name Description System.Int32 id Returns Type Description Task < IActionResult > A list of ActorClaimResponse that hold ActorClaim details. GetClaimActors(Int32, Int32) Get a list of all Actors for this Claim and Entity. Example Usage: GET api/actorclaim/claim/1/entity/1 Declaration public Task<IActionResult> GetClaimActors(int claimId, int entityId) Parameters Type Name Description System.Int32 claimId System.Int32 entityId Returns Type Description Task < IActionResult > A list of ActorResponse that hold ActorClaim details."
  },
  "api/PlayGen.SUGAR.Contracts.ActorRoleResponse.html": {
    "href": "api/PlayGen.SUGAR.Contracts.ActorRoleResponse.html",
    "title": "Class ActorRoleResponse | SUGAR",
    "keywords": "Class ActorRoleResponse Encapsulates actorrole details from the server. Inheritance System.Object ActorRoleResponse Namespace : PlayGen.SUGAR.Contracts Assembly : PlayGen.SUGAR.Contracts.dll Syntax public class ActorRoleResponse : object Examples JSON { Id : 1, ActorId : 1, RoleId : 1, EntityId : 1 } Properties ActorId The ID of the actor related to this actorrole. Declaration public int ActorId { get; set; } Property Value Type Description System.Int32 EntityId The ID of the entity (game, actor etc) related to this actorrole. Declaration public int EntityId { get; set; } Property Value Type Description System.Int32 Id The unqiue identifier for the actorrole. Declaration public int Id { get; set; } Property Value Type Description System.Int32 RoleId The ID of the role related to this actorrole. Declaration public int RoleId { get; set; } Property Value Type Description System.Int32"
  },
  "api/PlayGen.SUGAR.Contracts.LeaderboardRequest.html": {
    "href": "api/PlayGen.SUGAR.Contracts.LeaderboardRequest.html",
    "title": "Class LeaderboardRequest | SUGAR",
    "keywords": "Class LeaderboardRequest Encapsulates leaderboard details. Inheritance System.Object LeaderboardRequest Namespace : PlayGen.SUGAR.Contracts Assembly : PlayGen.SUGAR.Contracts.dll Syntax public class LeaderboardRequest : object Examples JSON { Token : \"THE_LEADERBOARD_TOKEN\", GameId : 1, Name : \"Leaderboard Name\", Key : \"Key\", ActorType : \"User\", EvaluationDataType : \"Long\", CriteriaScope : \"Actor\", LeaderboardType : \"Highest\" } Properties ActorType The type of actor which this leaderboard is intended for. Declaration public ActorType? ActorType { get; set; } Property Value Type Description System.Nullable < ActorType > CriteriaScope Whether the criteria will be checked against the actor or relatedactors (i.e. group members, user friends). Declaration public CriteriaScope? CriteriaScope { get; set; } Property Value Type Description System.Nullable < CriteriaScope > EvaluationDataCategory The EvaluationDataCategory of the EvaluationData being checked against. Declaration public EvaluationDataCategory? EvaluationDataCategory { get; set; } Property Value Type Description System.Nullable < EvaluationDataCategory > EvaluationDataType The EvaluationDataType of the EvaluationData being checked against. Declaration public EvaluationDataType? EvaluationDataType { get; set; } Property Value Type Description System.Nullable < EvaluationDataType > GameId The Id of the Game which this leaderboards belongs to. This Id is also used when gathering EvaluationData using the Key provided. Declaration public int? GameId { get; set; } Property Value Type Description System.Nullable < System.Int32 > Key The EvaluationData key which is checked against in order to create the leaderboard standings. Declaration public string Key { get; set; } Property Value Type Description System.String LeaderboardType The method which data will be collected and sorted for this leaderboard. Declaration public LeaderboardType? LeaderboardType { get; set; } Property Value Type Description System.Nullable < LeaderboardType > Name The display name of the leaderboard. Declaration public string Name { get; set; } Property Value Type Description System.String Token A unique identifier used in development to reference the leaderboard. Declaration public string Token { get; set; } Property Value Type Description System.String Extension Methods LeaderboardExtensions.ToModel(LeaderboardRequest)"
  },
  "api/PlayGen.SUGAR.Server.Core.EvaluationEvents.StandingsRequest.html": {
    "href": "api/PlayGen.SUGAR.Server.Core.EvaluationEvents.StandingsRequest.html",
    "title": "Class StandingsRequest | SUGAR",
    "keywords": "Class StandingsRequest Inheritance System.Object StandingsRequest Namespace : PlayGen.SUGAR.Server.Core.EvaluationEvents Assembly : PlayGen.SUGAR.Server.Core.dll Syntax public class StandingsRequest : object Properties ActorId Declaration public int? ActorId { get; set; } Property Value Type Description System.Nullable < System.Int32 > DateEnd Declaration public DateTime? DateEnd { get; set; } Property Value Type Description System.Nullable < DateTime > DateStart Declaration public DateTime? DateStart { get; set; } Property Value Type Description System.Nullable < DateTime > GameId Declaration public int GameId { get; set; } Property Value Type Description System.Int32 LeaderboardFilterType Declaration public LeaderboardFilterType LeaderboardFilterType { get; set; } Property Value Type Description LeaderboardFilterType LeaderboardToken Declaration public string LeaderboardToken { get; set; } Property Value Type Description System.String MultiplePerActor Declaration public bool MultiplePerActor { get; set; } Property Value Type Description System.Boolean PageLimit Use zero to signify all Declaration public int PageLimit { get; set; } Property Value Type Description System.Int32 PageOffset Declaration public int PageOffset { get; set; } Property Value Type Description System.Int32"
  },
  "api/PlayGen.SUGAR.Server.Core.EvaluationEvents.StandingsResponse.html": {
    "href": "api/PlayGen.SUGAR.Server.Core.EvaluationEvents.StandingsResponse.html",
    "title": "Class StandingsResponse | SUGAR",
    "keywords": "Class StandingsResponse Inheritance System.Object StandingsResponse Namespace : PlayGen.SUGAR.Server.Core.EvaluationEvents Assembly : PlayGen.SUGAR.Server.Core.dll Syntax public class StandingsResponse : object Properties ActorId Declaration public int ActorId { get; set; } Property Value Type Description System.Int32 ActorName Declaration public string ActorName { get; set; } Property Value Type Description System.String Ranking Declaration public int Ranking { get; set; } Property Value Type Description System.Int32 Value Declaration public string Value { get; set; } Property Value Type Description System.String Extension Methods LeaderboardExtensions.ToContract(StandingsResponse)"
  },
  "api/PlayGen.SUGAR.Server.Core.Exceptions.html": {
    "href": "api/PlayGen.SUGAR.Server.Core.Exceptions.html",
    "title": "Namespace PlayGen.SUGAR.Server.Core.Exceptions | SUGAR",
    "keywords": "Namespace PlayGen.SUGAR.Server.Core.Exceptions Classes InvalidAccountDetailsException InvalidDataException InvalidOperationException"
  },
  "api/PlayGen.SUGAR.Server.Core.Sessions.Session.html": {
    "href": "api/PlayGen.SUGAR.Server.Core.Sessions.Session.html",
    "title": "Class Session | SUGAR",
    "keywords": "Class Session Inheritance System.Object Session Namespace : PlayGen.SUGAR.Server.Core.Sessions Assembly : PlayGen.SUGAR.Server.Core.dll Syntax public class Session : object Constructors Session(Int32, Int32) Declaration public Session(int gameId, int actorId) Parameters Type Name Description System.Int32 gameId System.Int32 actorId Properties ActorId Declaration public int ActorId { get; } Property Value Type Description System.Int32 GameId Declaration public int GameId { get; } Property Value Type Description System.Int32 Id Declaration public long Id { get; } Property Value Type Description System.Int64 LastActive Declaration public DateTime LastActive { get; } Property Value Type Description DateTime"
  },
  "api/PlayGen.SUGAR.Server.EntityFramework.Extensions.SUGARContextSeedExtensions.html": {
    "href": "api/PlayGen.SUGAR.Server.EntityFramework.Extensions.SUGARContextSeedExtensions.html",
    "title": "Class SUGARContextSeedExtensions | SUGAR",
    "keywords": "Class SUGARContextSeedExtensions Inheritance System.Object SUGARContextSeedExtensions Namespace : PlayGen.SUGAR.Server.EntityFramework.Extensions Assembly : PlayGen.SUGAR.Server.EntityFramework.dll Syntax public static class SUGARContextSeedExtensions : object Methods EnsureSeeded(SUGARContext) Declaration public static void EnsureSeeded(this SUGARContext context) Parameters Type Name Description SUGARContext context EnsureTestsSeeded(SUGARContext) Declaration public static void EnsureTestsSeeded(this SUGARContext context) Parameters Type Name Description SUGARContext context"
  },
  "api/PlayGen.SUGAR.Server.Model.ActorRelationship.html": {
    "href": "api/PlayGen.SUGAR.Server.Model.ActorRelationship.html",
    "title": "Class ActorRelationship | SUGAR",
    "keywords": "Class ActorRelationship Inheritance System.Object ActorRelationship Implements IRelationship Namespace : PlayGen.SUGAR.Server.Model Assembly : PlayGen.SUGAR.Server.Model.dll Syntax public class ActorRelationship : object, IRelationship Properties Acceptor Declaration public Actor Acceptor { get; set; } Property Value Type Description Actor AcceptorId Declaration public int AcceptorId { get; set; } Property Value Type Description System.Int32 Requestor Declaration public Actor Requestor { get; set; } Property Value Type Description Actor RequestorId Declaration public int RequestorId { get; set; } Property Value Type Description System.Int32 Implements IRelationship"
  },
  "api/PlayGen.SUGAR.Server.Model.ActorRelationshipRequest.html": {
    "href": "api/PlayGen.SUGAR.Server.Model.ActorRelationshipRequest.html",
    "title": "Class ActorRelationshipRequest | SUGAR",
    "keywords": "Class ActorRelationshipRequest Inheritance System.Object ActorRelationshipRequest Implements IRelationship Namespace : PlayGen.SUGAR.Server.Model Assembly : PlayGen.SUGAR.Server.Model.dll Syntax public class ActorRelationshipRequest : object, IRelationship Properties Acceptor Declaration public Actor Acceptor { get; set; } Property Value Type Description Actor AcceptorId Declaration public int AcceptorId { get; set; } Property Value Type Description System.Int32 Requestor Declaration public Actor Requestor { get; set; } Property Value Type Description Actor RequestorId Declaration public int RequestorId { get; set; } Property Value Type Description System.Int32 Implements IRelationship"
  },
  "api/PlayGen.SUGAR.Server.EntityFramework.EntityConfigs.EvaluationConfig.html": {
    "href": "api/PlayGen.SUGAR.Server.EntityFramework.EntityConfigs.EvaluationConfig.html",
    "title": "Class EvaluationConfig | SUGAR",
    "keywords": "Class EvaluationConfig Inheritance System.Object EvaluationConfig Namespace : PlayGen.SUGAR.Server.EntityFramework.EntityConfigs Assembly : PlayGen.SUGAR.Server.EntityFramework.dll Syntax public class EvaluationConfig : IEntityTypeConfiguration<Evaluation> Methods Configure(EntityTypeBuilder<Evaluation>) Declaration public void Configure(EntityTypeBuilder<Evaluation> builder) Parameters Type Name Description EntityTypeBuilder < Evaluation > builder"
  },
  "api/PlayGen.SUGAR.Server.EntityFramework.Exceptions.DuplicateRecordException.html": {
    "href": "api/PlayGen.SUGAR.Server.EntityFramework.Exceptions.DuplicateRecordException.html",
    "title": "Class DuplicateRecordException | SUGAR",
    "keywords": "Class DuplicateRecordException Inheritance System.Object DuplicateRecordException Namespace : PlayGen.SUGAR.Server.EntityFramework.Exceptions Assembly : PlayGen.SUGAR.Server.EntityFramework.dll Syntax public class DuplicateRecordException : Exception Constructors DuplicateRecordException() Declaration public DuplicateRecordException() DuplicateRecordException(String) Declaration public DuplicateRecordException(string message) Parameters Type Name Description System.String message DuplicateRecordException(String, Exception) Declaration public DuplicateRecordException(string message, Exception inner) Parameters Type Name Description System.String message Exception inner"
  },
  "api/PlayGen.SUGAR.Client.Development.SUGARDevelopmentClient.html": {
    "href": "api/PlayGen.SUGAR.Client.Development.SUGARDevelopmentClient.html",
    "title": "Class SUGARDevelopmentClient | SUGAR",
    "keywords": "Class SUGARDevelopmentClient Inheritance System.Object SUGARClient SUGARDevelopmentClient Inherited Members SUGARClient._baseAddress SUGARClient._httpHandler SUGARClient._persistentHeaders SUGARClient._sessionHeaders SUGARClient._asyncRequestController SUGARClient._evaluationNotifications SUGARClient._apiVersionClient SUGARClient._accountClient SUGARClient._sessionClient SUGARClient._achievementClient SUGARClient._gameClient SUGARClient._gameDataClient SUGARClient._groupClient SUGARClient._groupMemberClient SUGARClient._userClient SUGARClient._userFriendClient SUGARClient._allianceClient SUGARClient._resourceClient SUGARClient._leaderboardClient SUGARClient._skillClient SUGARClient._matchClient SUGARClient.APIVersion SUGARClient.Account SUGARClient.Session SUGARClient.Achievement SUGARClient.Game SUGARClient.GameData SUGARClient.Group SUGARClient.GroupMember SUGARClient.User SUGARClient.UserFriend SUGARClient.AllianceClient SUGARClient.Resource SUGARClient.Leaderboard SUGARClient.Skill SUGARClient.Match SUGARClient.TryExecuteResponse() Namespace : PlayGen.SUGAR.Client.Development Assembly : PlayGen.SUGAR.Client.Development.dll Syntax public class SUGARDevelopmentClient : SUGARClient Constructors SUGARDevelopmentClient(String, IHttpHandler, Boolean, Dictionary<String, String>, Dictionary<String, String>, Int32) Declaration public SUGARDevelopmentClient(string baseAddress, IHttpHandler httpHandler = null, bool asyncEnabled = true, Dictionary<string, string> persistentHeaders = null, Dictionary<string, string> sessionHeaders = null, int timeoutMilliseconds = null) Parameters Type Name Description System.String baseAddress IHttpHandler httpHandler System.Boolean asyncEnabled Dictionary < System.String , System.String > persistentHeaders Dictionary < System.String , System.String > sessionHeaders System.Int32 timeoutMilliseconds Properties Development Declaration public DevelopmentClient Development { get; } Property Value Type Description DevelopmentClient"
  },
  "api/PlayGen.SUGAR.Client.Exceptions.ClientHttpException.html": {
    "href": "api/PlayGen.SUGAR.Client.Exceptions.ClientHttpException.html",
    "title": "Class ClientHttpException | SUGAR",
    "keywords": "Class ClientHttpException Inheritance System.Object ClientHttpException Namespace : PlayGen.SUGAR.Client.Exceptions Assembly : PlayGen.SUGAR.Client.dll Syntax public class ClientHttpException : SUGARException Constructors ClientHttpException(HttpStatusCode) Declaration public ClientHttpException(HttpStatusCode statusCode) Parameters Type Name Description HttpStatusCode statusCode ClientHttpException(HttpStatusCode, String) Declaration public ClientHttpException(HttpStatusCode statusCode, string message) Parameters Type Name Description HttpStatusCode statusCode System.String message ClientHttpException(HttpStatusCode, String, Exception) Declaration public ClientHttpException(HttpStatusCode statusCode, string message, Exception innerException) Parameters Type Name Description HttpStatusCode statusCode System.String message Exception innerException Properties StatusCode Declaration public HttpStatusCode StatusCode { get; } Property Value Type Description HttpStatusCode"
  },
  "api/PlayGen.SUGAR.Client.HttpRequest.html": {
    "href": "api/PlayGen.SUGAR.Client.HttpRequest.html",
    "title": "Class HttpRequest | SUGAR",
    "keywords": "Class HttpRequest Inheritance System.Object HttpRequest Namespace : PlayGen.SUGAR.Client Assembly : PlayGen.SUGAR.Client.dll Syntax public class HttpRequest : object Properties Content Declaration public string Content { get; set; } Property Value Type Description System.String Headers Declaration public Dictionary<string, string> Headers { get; set; } Property Value Type Description Dictionary < System.String , System.String > Method Declaration public string Method { get; set; } Property Value Type Description System.String Url Declaration public string Url { get; set; } Property Value Type Description System.String"
  },
  "api/PlayGen.SUGAR.Client.SessionClient.html": {
    "href": "api/PlayGen.SUGAR.Client.SessionClient.html",
    "title": "Class SessionClient | SUGAR",
    "keywords": "Class SessionClient Controller that facilitates Session specific operations. Inheritance System.Object ClientBase SessionClient Inherited Members ClientBase.AsyncRequestController ClientBase.EvaluationNotifications ClientBase.SerializerSettings ClientBase.EnableEvaluationNotifications(Boolean) ClientBase.ClearSessionData() ClientBase.AreUriParamsValid(Object[]) ClientBase.GetUriBuilder(String, Object[]) ClientBase.Post<TRequest, TResponse>(String, TRequest, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Post<TRequest>(String, TRequest, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Post<TResponse>(String, Object, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Put<TRequest, TResponse>(String, TRequest, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Put<TRequest>(String, TRequest, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.PostPut<TResponse>(String, String, Dictionary<String, String>, Object, IEnumerable<HttpStatusCode>) ClientBase.PostPut(String, String, Dictionary<String, String>, Object, IEnumerable<HttpStatusCode>) ClientBase.Get<TResponse>(String, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Get(String, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Delete<TResponse>(String, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Delete(String, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.GetDelete<TResponse>(String, String, Dictionary<String, String>, IEnumerable<HttpStatusCode>) ClientBase.GetDelete(String, String, Dictionary<String, String>, IEnumerable<HttpStatusCode>) Namespace : PlayGen.SUGAR.Client Assembly : PlayGen.SUGAR.Client.dll Syntax public class SessionClient : ClientBase Constructors SessionClient(String, IHttpHandler, Dictionary<String, String>, Dictionary<String, String>, IAsyncRequestController, EvaluationNotifications) Declaration public SessionClient(string baseAddress, IHttpHandler httpHandler, Dictionary<string, string> constantHeaders, Dictionary<string, string> sessionHeaders, IAsyncRequestController asyncRequestController, EvaluationNotifications evaluationNotifications) Parameters Type Name Description System.String baseAddress IHttpHandler httpHandler Dictionary < System.String , System.String > constantHeaders Dictionary < System.String , System.String > sessionHeaders IAsyncRequestController asyncRequestController EvaluationNotifications evaluationNotifications Methods CreateAndLogin(Int32, AccountRequest) Declaration public AccountResponse CreateAndLogin(int gameId, AccountRequest accountRequest) Parameters Type Name Description System.Int32 gameId AccountRequest accountRequest Returns Type Description AccountResponse CreateAndLoginAsync(Int32, AccountRequest, Action<AccountResponse>, Action<Exception>) Declaration public void CreateAndLoginAsync(int gameId, AccountRequest account, Action<AccountResponse> onSuccess, Action<Exception> onError) Parameters Type Name Description System.Int32 gameId AccountRequest account Action < AccountResponse > onSuccess Action < Exception > onError Heartbeat() Declaration public void Heartbeat() HeartbeatAsync(Action, Action<Exception>) Declaration public void HeartbeatAsync(Action onSuccess, Action<Exception> onError) Parameters Type Name Description Action onSuccess Action < Exception > onError Login(Int32, AccountRequest) Logs in an account into a game based on the name and password combination. Returns a JsonWebToken used for authorization in any further calls to the API. Declaration public AccountResponse Login(int gameId, AccountRequest account) Parameters Type Name Description System.Int32 gameId ID of the game the user is logging into. AccountRequest account AccountRequest object that contains the account details provided. Returns Type Description AccountResponse A AccountResponse containing the Account details. Login(String) Declaration public AccountResponse Login(string token) Parameters Type Name Description System.String token Returns Type Description AccountResponse LoginAsync(Int32, AccountRequest, Action<AccountResponse>, Action<Exception>) Declaration public void LoginAsync(int gameId, AccountRequest account, Action<AccountResponse> onSuccess, Action<Exception> onError) Parameters Type Name Description System.Int32 gameId AccountRequest account Action < AccountResponse > onSuccess Action < Exception > onError LoginAsync(String, Action<AccountResponse>, Action<Exception>) Declaration public void LoginAsync(string authorizationToken, Action<AccountResponse> onSuccess, Action<Exception> onError) Parameters Type Name Description System.String authorizationToken Action < AccountResponse > onSuccess Action < Exception > onError Logout() Declaration public void Logout() LogoutAsync(Action, Action<Exception>) Declaration public void LogoutAsync(Action onSuccess, Action<Exception> onError) Parameters Type Name Description Action onSuccess Action < Exception > onError"
  },
  "api/PlayGen.SUGAR.Common.Authorization.AuthorizationAction.html": {
    "href": "api/PlayGen.SUGAR.Common.Authorization.AuthorizationAction.html",
    "title": "Enum AuthorizationAction | SUGAR",
    "keywords": "Enum AuthorizationAction Namespace : PlayGen.SUGAR.Common.Authorization Assembly : PlayGen.SUGAR.Common.dll Syntax public enum AuthorizationAction : int Fields Name Description Create Delete Get Update"
  },
  "api/PlayGen.SUGAR.Common.ComparisonType.html": {
    "href": "api/PlayGen.SUGAR.Common.ComparisonType.html",
    "title": "Enum ComparisonType | SUGAR",
    "keywords": "Enum ComparisonType Enum for selecting target comparison between current value and target value. Namespace : PlayGen.SUGAR.Common Assembly : PlayGen.SUGAR.Common.dll Syntax public enum ComparisonType : int Fields Name Description Equals Current and target are equal in value. Greater Current is greater in value than the target. GreaterOrEqual Current is greater than or equal to the value of the target. Less Current is less than the value of the target. LessOrEqual Current is less than or equal to the value of the target. NotEqual Current and target are not equal in value."
  },
  "api/PlayGen.SUGAR.Common.Exceptions.SUGARException.html": {
    "href": "api/PlayGen.SUGAR.Common.Exceptions.SUGARException.html",
    "title": "Class SUGARException | SUGAR",
    "keywords": "Class SUGARException Inheritance System.Object SUGARException ClaimNotFoundException InvalidDataException InvalidOperationException ClaimNotFoundException Namespace : PlayGen.SUGAR.Common.Exceptions Assembly : PlayGen.SUGAR.Common.dll Syntax public abstract class SUGARException : Exception Constructors SUGARException() Declaration protected SUGARException() SUGARException(String) Declaration protected SUGARException(string message) Parameters Type Name Description System.String message SUGARException(String, Exception) Declaration protected SUGARException(string message, Exception innerException) Parameters Type Name Description System.String message Exception innerException"
  },
  "api/PlayGen.SUGAR.Common.Web.html": {
    "href": "api/PlayGen.SUGAR.Common.Web.html",
    "title": "Namespace PlayGen.SUGAR.Common.Web | SUGAR",
    "keywords": "Namespace PlayGen.SUGAR.Common.Web Classes HeaderKeys"
  },
  "api/PlayGen.SUGAR.Server.WebAPI.Extensions.HttpContextExtensions.html": {
    "href": "api/PlayGen.SUGAR.Server.WebAPI.Extensions.HttpContextExtensions.html",
    "title": "Class HttpContextExtensions | SUGAR",
    "keywords": "Class HttpContextExtensions Inheritance System.Object HttpContextExtensions Namespace : PlayGen.SUGAR.Server.WebAPI.Extensions Assembly : PlayGen.SUGAR.Server.WebAPI.dll Syntax public static class HttpContextExtensions : object Methods GetCustomClassAttribute<T>(ActionDescriptor) Declaration public static T GetCustomClassAttribute<T>(this ActionDescriptor actionDescriptor) where T : Attribute Parameters Type Name Description ActionDescriptor actionDescriptor Returns Type Description T Type Parameters Name Description T GetCustomClassAttributes<T>(ActionDescriptor) Declaration public static IEnumerable<T> GetCustomClassAttributes<T>(this ActionDescriptor actionDescriptor) where T : Attribute Parameters Type Name Description ActionDescriptor actionDescriptor Returns Type Description IEnumerable <T> Type Parameters Name Description T GetCustomMethodAttribute<T>(ActionDescriptor) Declaration public static T GetCustomMethodAttribute<T>(this ActionDescriptor actionDescriptor) where T : Attribute Parameters Type Name Description ActionDescriptor actionDescriptor Returns Type Description T Type Parameters Name Description T GetCustomMethodAttributes<T>(ActionDescriptor) Declaration public static IEnumerable<T> GetCustomMethodAttributes<T>(this ActionDescriptor actionDescriptor) where T : Attribute Parameters Type Name Description ActionDescriptor actionDescriptor Returns Type Description IEnumerable <T> Type Parameters Name Description T GetSessionId(HttpContext) Declaration public static int GetSessionId(this HttpContext context) Parameters Type Name Description HttpContext context Returns Type Description System.Int32"
  },
  "api/PlayGen.SUGAR.Server.WebAPI.Extensions.LeaderboardExtensions.html": {
    "href": "api/PlayGen.SUGAR.Server.WebAPI.Extensions.LeaderboardExtensions.html",
    "title": "Class LeaderboardExtensions | SUGAR",
    "keywords": "Class LeaderboardExtensions Inheritance System.Object LeaderboardExtensions Namespace : PlayGen.SUGAR.Server.WebAPI.Extensions Assembly : PlayGen.SUGAR.Server.WebAPI.dll Syntax public static class LeaderboardExtensions : object Methods ToContract(Leaderboard) Declaration public static LeaderboardResponse ToContract(this Leaderboard leaderboardModel) Parameters Type Name Description Leaderboard leaderboardModel Returns Type Description LeaderboardResponse ToContract(StandingsResponse) Declaration public static LeaderboardStandingsResponse ToContract(this StandingsResponse standingsCore) Parameters Type Name Description StandingsResponse standingsCore Returns Type Description LeaderboardStandingsResponse ToContractList(IEnumerable<Leaderboard>) Declaration public static IEnumerable<LeaderboardResponse> ToContractList(this IEnumerable<Leaderboard> leaderboardModels) Parameters Type Name Description IEnumerable < Leaderboard > leaderboardModels Returns Type Description IEnumerable < LeaderboardResponse > ToContractList(IEnumerable<StandingsResponse>) Declaration public static IEnumerable<LeaderboardStandingsResponse> ToContractList(this IEnumerable<StandingsResponse> standingsCores) Parameters Type Name Description IEnumerable < StandingsResponse > standingsCores Returns Type Description IEnumerable < LeaderboardStandingsResponse > ToCore(LeaderboardStandingsRequest) Declaration public static StandingsRequest ToCore(this LeaderboardStandingsRequest standingsContract) Parameters Type Name Description LeaderboardStandingsRequest standingsContract Returns Type Description StandingsRequest ToModel(LeaderboardRequest) Declaration public static Leaderboard ToModel(this LeaderboardRequest leaderboardContract) Parameters Type Name Description LeaderboardRequest leaderboardContract Returns Type Description Leaderboard"
  },
  "api/PlayGen.SUGAR.Server.WebAPI.Extensions.MatchExtensions.html": {
    "href": "api/PlayGen.SUGAR.Server.WebAPI.Extensions.MatchExtensions.html",
    "title": "Class MatchExtensions | SUGAR",
    "keywords": "Class MatchExtensions Inheritance System.Object MatchExtensions Namespace : PlayGen.SUGAR.Server.WebAPI.Extensions Assembly : PlayGen.SUGAR.Server.WebAPI.dll Syntax public static class MatchExtensions : object Methods ToContract(Match) Declaration public static MatchResponse ToContract(this Match model) Parameters Type Name Description Match model Returns Type Description MatchResponse ToContractList(List<Match>) Declaration public static List<MatchResponse> ToContractList(this List<Match> models) Parameters Type Name Description List < Match > models Returns Type Description List < MatchResponse > ToMatchDataModel(EvaluationDataRequest) Declaration public static EvaluationData ToMatchDataModel(this EvaluationDataRequest contract) Parameters Type Name Description EvaluationDataRequest contract Returns Type Description EvaluationData"
  },
  "unity-client/api/PlayGen.SUGAR.Unity.AccountUnityClient.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.AccountUnityClient.html",
    "title": "Class AccountUnityClient | SUGAR",
    "keywords": "Class AccountUnityClient Use this to Sign In, Register, Logout and manage other account functionality Inheritance System.Object AccountUnityClient Namespace : PlayGen.SUGAR.Unity Assembly : PlayGen.SUGAR.Unity.dll Syntax public class AccountUnityClient : MonoBehaviour Properties HasInterface Declaration public bool HasInterface { get; } Property Value Type Description System.Boolean Has an interface been provided for this Unity Client in the current orientation HasSavedLogin Declaration public bool HasSavedLogin { get; } Property Value Type Description System.Boolean Whether there are login details that were saved by a previously using \"remember me\". IsActive Declaration public bool IsActive { get; } Property Value Type Description System.Boolean Is there an interface and if so is it currently active Methods DisplayLogInPanel(Action<Boolean>) Displays interface if provided and allowAutoLogin is false. Attempts automatic sign in using provided details if allowAutoLogin is true. Declaration public virtual void DisplayLogInPanel(Action<bool> success) Parameters Type Name Description Action < System.Boolean > success Whether the user successfully signed in. Remarks allowAutoLogin is set to false after automatic sign in is first attempted. If there is no interface provided callback will return false Hide() Hide the AccountPanel game object Declaration public virtual void Hide() Logout(Action<Boolean>) Sign out the currently signed in user. Declaration public virtual void Logout(Action<bool> success) Parameters Type Name Description Action < System.Boolean > success Whether the currently signed in user successfully signed out. Remarks If no user is currently signed in, callback returns false"
  },
  "unity-client/api/PlayGen.SUGAR.Unity.ActorResponseAllowableActions.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.ActorResponseAllowableActions.html",
    "title": "Class ActorResponseAllowableActions | SUGAR",
    "keywords": "Class ActorResponseAllowableActions ActorResponse with additional information on if the current user can add and remove them. Inheritance System.Object ActorResponseAllowableActions Namespace : PlayGen.SUGAR.Unity Assembly : PlayGen.SUGAR.Unity.dll Syntax public class ActorResponseAllowableActions : object Constructors ActorResponseAllowableActions(ActorResponse, Boolean, Boolean) Declaration public ActorResponseAllowableActions(ActorResponse actor, bool add, bool remove) Parameters Type Name Description ActorResponse actor System.Boolean add System.Boolean remove Properties Actor ActorResponse contains the actor ID and Name. Declaration public ActorResponse Actor { get; set; } Property Value Type Description ActorResponse CanAdd Can the currently signed in user add or accept a request from this actor? Declaration public bool CanAdd { get; set; } Property Value Type Description System.Boolean CanRemove Can the currently signed in user remove or reject a request from this actor? Declaration public bool CanRemove { get; set; } Property Value Type Description System.Boolean"
  },
  "unity-client/api/PlayGen.SUGAR.Unity.BaseAccountInterface.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.BaseAccountInterface.html",
    "title": "Class BaseAccountInterface | SUGAR",
    "keywords": "Class BaseAccountInterface Base abstract class for controlling the interface related to Account functionality. Inheritance System.Object BaseAccountInterface Namespace : PlayGen.SUGAR.Unity Assembly : PlayGen.SUGAR.Unity.dll Syntax public abstract class BaseAccountInterface : MonoBehaviour Fields _closeButton Button used to disable this object. Can be left null. Declaration protected Button _closeButton Field Value Type Description Button _errorText Text object which displays errors if/when they occur. Can be left null. Declaration protected Text _errorText Field Value Type Description Text _loginButton Button used to trigger attempting to sign in. Can be left null. Declaration protected Button _loginButton Field Value Type Description Button _name Input field used for providing usernames. Required. Declaration protected InputField _name Field Value Type Description InputField _password Input field used for providing passwords. Required. Declaration protected InputField _password Field Value Type Description InputField _registerButton Button used to trigger attempting to register a new account. Can be left null. Declaration protected Button _registerButton Field Value Type Description Button _rememberMeToggle Toggle used to enable/disable remembering the next signed in user's details for future sessions. Can be left null. Declaration protected Toggle _rememberMeToggle Field Value Type Description Toggle Methods Awake() Base Awake method adds onClick listeners for the login, register and close buttons. Declaration protected virtual void Awake()"
  },
  "unity-client/api/PlayGen.SUGAR.Unity.GameDataUnityClient.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.GameDataUnityClient.html",
    "title": "Class GameDataUnityClient | SUGAR",
    "keywords": "Class GameDataUnityClient Use this to GET and POST data related to the game. Inheritance System.Object GameDataUnityClient Namespace : PlayGen.SUGAR.Unity Assembly : PlayGen.SUGAR.Unity.dll Syntax public class GameDataUnityClient : object Methods Get(Action<IEnumerable<EvaluationDataResponse>>, String[]) Get GameData for the currently signed in user for this game. Declaration public void Get(Action<IEnumerable<EvaluationDataResponse>> success, string[] keys = null) Parameters Type Name Description Action < IEnumerable < EvaluationDataResponse >> success Callback with a list of gathered EvaluationDataResponse results. System.String [] keys Optional Keys to search and return values for. (default: null) GetCount(String, EvaluationDataType, Action<EvaluationDataResponse>) Get the count of recorded values for the currently signed in user for the key and dataType provided. Declaration public void GetCount(string key, EvaluationDataType dataType, Action<EvaluationDataResponse> success) Parameters Type Name Description System.String key Name of the GameData key. EvaluationDataType dataType EvaluationDataType of the GameData. Action < EvaluationDataResponse > success Callback which contains the gathered result. GetCumulative(String, EvaluationDataType, Action<EvaluationDataResponse>) Get the cumulative value for the currently signed in user for the key and dataType provided. Declaration public void GetCumulative(string key, EvaluationDataType dataType, Action<EvaluationDataResponse> success) Parameters Type Name Description System.String key Name of the GameData key. EvaluationDataType dataType EvaluationDataType of the GameData. Action < EvaluationDataResponse > success Callback which contains the gathered result. Remarks EvaluationDataType should be a type that can be added together, eg. Long GetEarliest(String, EvaluationDataType, Action<EvaluationDataResponse>) Get the earliest recorded data for the currently signed in user for the key and dataType provided. Declaration public void GetEarliest(string key, EvaluationDataType dataType, Action<EvaluationDataResponse> success) Parameters Type Name Description System.String key Name of the GameData key. EvaluationDataType dataType EvaluationDataType of the GameData. Action < EvaluationDataResponse > success Callback which contains the gathered result. GetHighest(String, EvaluationDataType, Action<EvaluationDataResponse>) Get the data related to the highest value recorded for the currently signed in user for the key and dataType provided. Declaration public void GetHighest(string key, EvaluationDataType dataType, Action<EvaluationDataResponse> success) Parameters Type Name Description System.String key Name of the GameData key. EvaluationDataType dataType EvaluationDataType of the GameData. Action < EvaluationDataResponse > success Callback which contains the gathered result. GetLatest(String, EvaluationDataType, Action<EvaluationDataResponse>) Get the latest recorded data for the currently signed in user for the key and dataType provided. Declaration public void GetLatest(string key, EvaluationDataType dataType, Action<EvaluationDataResponse> success) Parameters Type Name Description System.String key Name of the GameData key. EvaluationDataType dataType EvaluationDataType of the GameData. Action < EvaluationDataResponse > success Callback which contains the gathered result. GetLowest(String, EvaluationDataType, Action<EvaluationDataResponse>) Get the data related to the lowest value recorded for the currently signed in user for the key and dataType provided. Declaration public void GetLowest(string key, EvaluationDataType dataType, Action<EvaluationDataResponse> success) Parameters Type Name Description System.String key Name of the GameData key. EvaluationDataType dataType EvaluationDataType of the GameData. Action < EvaluationDataResponse > success Callback which contains the gathered result. Send(String, Boolean, Action<Boolean>) Record GameData with EvaluationDataType Bool with the key and value provided. Declaration public void Send(string key, bool value, Action<bool> success = null) Parameters Type Name Description System.String key Name of the GameData key. System.Boolean value The Bool value that'll be recorded. Action < System.Boolean > success Optional Callback returns whther the data was sent successfully (default: null) Send(String, Int64, Action<Boolean>) Record GameData with EvaluationDataType Long with the key and value provided. Declaration public void Send(string key, long value, Action<bool> success = null) Parameters Type Name Description System.String key Name of the GameData key. System.Int64 value The Long value that'll be recorded. Action < System.Boolean > success Optional Callback returns whther the data was sent successfully (default: null) Send(String, Single, Action<Boolean>) Record GameData with EvaluationDataType Float with the key and value provided. Declaration public void Send(string key, float value, Action<bool> success = null) Parameters Type Name Description System.String key Name of the GameData key. System.Single value The Float value that'll be recorded. Action < System.Boolean > success Optional Callback returns whther the data was sent successfully (default: null) Send(String, String, Action<Boolean>) Record GameData with EvaluationDataType String with the key and value provided. Declaration public void Send(string key, string value, Action<bool> success = null) Parameters Type Name Description System.String key Name of the GameData key. System.String value The String value that'll be recorded. Action < System.Boolean > success Optional Callback returns whther the data was sent successfully (default: null)"
  },
  "unity-client/api/PlayGen.SUGAR.Unity.GroupMemberUnityClient.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.GroupMemberUnityClient.html",
    "title": "Class GroupMemberUnityClient | SUGAR",
    "keywords": "Class GroupMemberUnityClient Use this for actions related to group member lists. Inheritance System.Object BaseUnityClient < BaseGroupMemberInterface > GroupMemberUnityClient Inherited Members BaseUnityClient<BaseGroupMemberInterface>._landscapeInterface BaseUnityClient<BaseGroupMemberInterface>._portraitInterface BaseUnityClient<BaseGroupMemberInterface>._interface BaseUnityClient<BaseGroupMemberInterface>.HasInterface BaseUnityClient<BaseGroupMemberInterface>.IsActive BaseUnityClient<BaseGroupMemberInterface>.Update() BaseUnityClient<BaseGroupMemberInterface>.Hide() Namespace : PlayGen.SUGAR.Unity Assembly : PlayGen.SUGAR.Unity.dll Syntax public class GroupMemberUnityClient : BaseUnityClient<BaseGroupMemberInterface> Properties CurrentGroup Declaration public ActorResponse CurrentGroup { get; } Property Value Type Description ActorResponse Currently selected/displayed group. Members Declaration public List<ActorResponseAllowableActions> Members { get; } Property Value Type Description List < ActorResponseAllowableActions > Members for the current group. Methods AddFriend(Int32, Boolean) Send group request to user with id provided. Declaration public void AddFriend(int id, bool reload = true) Parameters Type Name Description System.Int32 id The group id System.Boolean reload Whether the UI should reload on complete Display(ActorResponse) Sets current group and gathers member list for that group. Displays UI interface if provided. Declaration public void Display(ActorResponse group) Parameters Type Name Description ActorResponse group The group which should be set to CurrentGroup"
  },
  "api/PlayGen.SUGAR.Server.Core.Exceptions.InvalidDataException.html": {
    "href": "api/PlayGen.SUGAR.Server.Core.Exceptions.InvalidDataException.html",
    "title": "Class InvalidDataException | SUGAR",
    "keywords": "Class InvalidDataException Inheritance System.Object SUGARException InvalidDataException Namespace : PlayGen.SUGAR.Server.Core.Exceptions Assembly : PlayGen.SUGAR.Server.Core.dll Syntax public class InvalidDataException : SUGARException Constructors InvalidDataException() Declaration public InvalidDataException() InvalidDataException(String) Declaration public InvalidDataException(string message) Parameters Type Name Description System.String message InvalidDataException(String, Exception) Declaration public InvalidDataException(string message, Exception innerException) Parameters Type Name Description System.String message Exception innerException"
  },
  "api/PlayGen.SUGAR.Server.Core.Exceptions.InvalidOperationException.html": {
    "href": "api/PlayGen.SUGAR.Server.Core.Exceptions.InvalidOperationException.html",
    "title": "Class InvalidOperationException | SUGAR",
    "keywords": "Class InvalidOperationException Inheritance System.Object SUGARException InvalidOperationException Namespace : PlayGen.SUGAR.Server.Core.Exceptions Assembly : PlayGen.SUGAR.Server.Core.dll Syntax public class InvalidOperationException : SUGARException Constructors InvalidOperationException() Declaration public InvalidOperationException() InvalidOperationException(String) Declaration public InvalidOperationException(string message) Parameters Type Name Description System.String message InvalidOperationException(String, Exception) Declaration public InvalidOperationException(string message, Exception innerException) Parameters Type Name Description System.String message Exception innerException"
  },
  "api/PlayGen.SUGAR.Server.EntityFramework.Controllers.AccountController.html": {
    "href": "api/PlayGen.SUGAR.Server.EntityFramework.Controllers.AccountController.html",
    "title": "Class AccountController | SUGAR",
    "keywords": "Class AccountController Inheritance System.Object DbController AccountController Inherited Members DbController.ContextFactory Namespace : PlayGen.SUGAR.Server.EntityFramework.Controllers Assembly : PlayGen.SUGAR.Server.EntityFramework.dll Syntax public class AccountController : DbController Constructors AccountController(SUGARContextFactory) Declaration public AccountController(SUGARContextFactory contextFactory) Parameters Type Name Description SUGARContextFactory contextFactory Methods Create(Account) Declaration public Account Create(Account account) Parameters Type Name Description Account account Returns Type Description Account Delete(Int32) Declaration public void Delete(int id) Parameters Type Name Description System.Int32 id Get(Int32) Declaration public Account Get(int actorId) Parameters Type Name Description System.Int32 actorId Returns Type Description Account Get(String[], Int32) Declaration public List<Account> Get(string[] names, int sourceId) Parameters Type Name Description System.String [] names System.Int32 sourceId Returns Type Description List < Account > GetByUser(Int32) Declaration public Account GetByUser(int userId) Parameters Type Name Description System.Int32 userId Returns Type Description Account"
  },
  "api/PlayGen.SUGAR.Server.EntityFramework.Controllers.AccountSourceController.html": {
    "href": "api/PlayGen.SUGAR.Server.EntityFramework.Controllers.AccountSourceController.html",
    "title": "Class AccountSourceController | SUGAR",
    "keywords": "Class AccountSourceController Inheritance System.Object DbController AccountSourceController Inherited Members DbController.ContextFactory Namespace : PlayGen.SUGAR.Server.EntityFramework.Controllers Assembly : PlayGen.SUGAR.Server.EntityFramework.dll Syntax public class AccountSourceController : DbController Constructors AccountSourceController(SUGARContextFactory) Declaration public AccountSourceController(SUGARContextFactory contextFactory) Parameters Type Name Description SUGARContextFactory contextFactory Methods Create(AccountSource) Declaration public AccountSource Create(AccountSource source) Parameters Type Name Description AccountSource source Returns Type Description AccountSource Delete(Int32) Declaration public void Delete(int id) Parameters Type Name Description System.Int32 id Get() Declaration public List<AccountSource> Get() Returns Type Description List < AccountSource > Get(Int32) Declaration public AccountSource Get(int id) Parameters Type Name Description System.Int32 id Returns Type Description AccountSource Get(String) Declaration public AccountSource Get(string token) Parameters Type Name Description System.String token Returns Type Description AccountSource Update(AccountSource) Declaration public void Update(AccountSource source) Parameters Type Name Description AccountSource source"
  },
  "api/PlayGen.SUGAR.Server.EntityFramework.Controllers.ActorClaimController.html": {
    "href": "api/PlayGen.SUGAR.Server.EntityFramework.Controllers.ActorClaimController.html",
    "title": "Class ActorClaimController | SUGAR",
    "keywords": "Class ActorClaimController Inheritance System.Object DbController ActorClaimController Inherited Members DbController.ContextFactory Namespace : PlayGen.SUGAR.Server.EntityFramework.Controllers Assembly : PlayGen.SUGAR.Server.EntityFramework.dll Syntax public class ActorClaimController : DbController Constructors ActorClaimController(SUGARContextFactory) Declaration public ActorClaimController(SUGARContextFactory contextFactory) Parameters Type Name Description SUGARContextFactory contextFactory Methods Create(ActorClaim) Declaration public ActorClaim Create(ActorClaim actorClaim) Parameters Type Name Description ActorClaim actorClaim Returns Type Description ActorClaim Delete(Int32) Declaration public void Delete(int id) Parameters Type Name Description System.Int32 id Get(Int32) Declaration public ActorClaim Get(int id) Parameters Type Name Description System.Int32 id Returns Type Description ActorClaim GetActorClaims(Int32) Declaration public List<ActorClaim> GetActorClaims(int actorId) Parameters Type Name Description System.Int32 actorId Returns Type Description List < ActorClaim > GetActorClaimsForEntity(Int32, Int32, ClaimScope) Declaration public List<Claim> GetActorClaimsForEntity(int actorId, int entityId, ClaimScope scope) Parameters Type Name Description System.Int32 actorId System.Int32 entityId ClaimScope scope Returns Type Description List < Claim > GetClaimActors(Int32, Int32) Declaration public List<Actor> GetClaimActors(int claimId, int entityId) Parameters Type Name Description System.Int32 claimId System.Int32 entityId Returns Type Description List < Actor >"
  },
  "api/PlayGen.SUGAR.Server.EntityFramework.Controllers.ActorController.html": {
    "href": "api/PlayGen.SUGAR.Server.EntityFramework.Controllers.ActorController.html",
    "title": "Class ActorController | SUGAR",
    "keywords": "Class ActorController Inheritance System.Object DbController ActorController Inherited Members DbController.ContextFactory Namespace : PlayGen.SUGAR.Server.EntityFramework.Controllers Assembly : PlayGen.SUGAR.Server.EntityFramework.dll Syntax public class ActorController : DbController Constructors ActorController(SUGARContextFactory) Declaration public ActorController(SUGARContextFactory contextFactory) Parameters Type Name Description SUGARContextFactory contextFactory Methods Create(Actor) Declaration public void Create(Actor actor) Parameters Type Name Description Actor actor Delete(Int32) Declaration public void Delete(int id) Parameters Type Name Description System.Int32 id Get() Declaration public List<Actor> Get() Returns Type Description List < Actor > Get(Int32) Declaration public Actor Get(int id) Parameters Type Name Description System.Int32 id Returns Type Description Actor"
  },
  "api/PlayGen.SUGAR.Server.WebAPI.Controllers.RoleController.html": {
    "href": "api/PlayGen.SUGAR.Server.WebAPI.Controllers.RoleController.html",
    "title": "Class RoleController | SUGAR",
    "keywords": "Class RoleController Web Controller that facilitates Role specific operations. Inheritance System.Object RoleController Namespace : PlayGen.SUGAR.Server.WebAPI.Controllers Assembly : PlayGen.SUGAR.Server.WebAPI.dll Syntax public class RoleController : Controller Constructors RoleController(RoleController, IAuthorizationService) Declaration public RoleController(RoleController roleCoreController, IAuthorizationService authorizationService) Parameters Type Name Description RoleController roleCoreController IAuthorizationService authorizationService Methods Create(RoleRequest) Create a new Role. Requires the Name to be unique. Example Usage: POST api/role Declaration public Task<IActionResult> Create(RoleRequest newRole) Parameters Type Name Description RoleRequest newRole RoleRequest object that contains the details of the new Role. Returns Type Description Task < IActionResult > A RoleResponse containing the new Role details. Delete(Int32) Delete Role with the ID provided. Example Usage: DELETE api/role/1 Declaration public Task<IActionResult> Delete(int id) Parameters Type Name Description System.Int32 id Role ID. Returns Type Description Task < IActionResult > Get() Get a list of all Roles. Example Usage: GET api/role/list Declaration public Task<IActionResult> Get() Returns Type Description Task < IActionResult > A list of RoleResponse that hold Role details. GetByScope(String) Get a list of all Roles for the scope with this name. Example Usage: GET api/role/scope/game Declaration public Task<IActionResult> GetByScope(string name) Parameters Type Name Description System.String name Returns Type Description Task < IActionResult > A list of RoleResponse that hold Role details. GetDefaultForScope(String) Get default Role for the scope with this name. Example Usage: GET api/role/scopedefault/game Declaration public Task<IActionResult> GetDefaultForScope(string name) Parameters Type Name Description System.String name Returns Type Description Task < IActionResult > A RoleResponse that holds Role details."
  },
  "api/PlayGen.SUGAR.Server.WebAPI.Controllers.SessionController.html": {
    "href": "api/PlayGen.SUGAR.Server.WebAPI.Controllers.SessionController.html",
    "title": "Class SessionController | SUGAR",
    "keywords": "Class SessionController Web Controller that facilitates session specific operations. Inheritance System.Object SessionController Namespace : PlayGen.SUGAR.Server.WebAPI.Controllers Assembly : PlayGen.SUGAR.Server.WebAPI.dll Syntax public class SessionController : Controller Constructors SessionController(AccountController, AccountSourceController, TokenController, SessionTracker) Declaration public SessionController(AccountController accountCoreController, AccountSourceController accountSourceController, TokenController tokenController, SessionTracker sessionTracker) Parameters Type Name Description AccountController accountCoreController AccountSourceController accountSourceController TokenController tokenController SessionTracker sessionTracker Methods CreateAndLogin(AccountRequest) Creates a new account and login that account. Example Usage: POST api/createandloginplatform Declaration public IActionResult CreateAndLogin(AccountRequest accountRequest) Parameters Type Name Description AccountRequest accountRequest AccountRequest object that contains the account details provided. Returns Type Description IActionResult A AccountResponse containing the Account details. CreateAndLogin(Int32, AccountRequest) Creates a new account and login that account. Example Usage: POST api/1/createandlogingame Declaration public IActionResult CreateAndLogin(int gameId, AccountRequest accountRequest) Parameters Type Name Description System.Int32 gameId Optional Id of the game the account is logging in for. AccountRequest accountRequest AccountRequest object that contains the account details provided. Returns Type Description IActionResult A AccountResponse containing the Account details. Heartbeat() Heartbeat method to keep the specific session alive. Calling it within a server defined interval will notify the server that the session is still active. Declaration public IActionResult Heartbeat() Returns Type Description IActionResult Login(AccountRequest) Logs in an account based on the name and password combination. Returns a JsonWebToken used for authorization in any further calls to the API. Example Usage: POST api/loginplatform Declaration public IActionResult Login(AccountRequest accountRequest) Parameters Type Name Description AccountRequest accountRequest AccountRequest object that contains the account details provided. Returns Type Description IActionResult A AccountResponse containing the Account details. Login(Int32, AccountRequest) Logs in an account based on the name and password combination. Returns a JsonWebToken used for authorization in any further calls to the API. Example Usage: POST api/1/logingame Declaration public IActionResult Login(int gameId, AccountRequest accountRequest) Parameters Type Name Description System.Int32 gameId Optional Id of the game the account is logging in for. AccountRequest accountRequest AccountRequest object that contains the account details provided. Optional IssueLoginToken will return a token to remember login for future use Returns Type Description IActionResult A AccountResponse containing the Account details. LoginToken(TokenLoginRequest) Login to the game using a provided token Declaration public IActionResult LoginToken(TokenLoginRequest tokenLogin) Parameters Type Name Description TokenLoginRequest tokenLogin The login token receievd from a previous successful login, if requested Returns Type Description IActionResult Logout() Logs out the currently logged in account, ending it's session and removing the authorization token. Declaration public IActionResult Logout() Returns Type Description IActionResult"
  },
  "api/PlayGen.SUGAR.Server.Model.Evaluation.html": {
    "href": "api/PlayGen.SUGAR.Server.Model.Evaluation.html",
    "title": "Class Evaluation | SUGAR",
    "keywords": "Class Evaluation Inheritance System.Object Evaluation Achievement Skill Namespace : PlayGen.SUGAR.Server.Model Assembly : PlayGen.SUGAR.Server.Model.dll Syntax public abstract class Evaluation : object Properties ActorType Declaration public ActorType ActorType { get; set; } Property Value Type Description ActorType Description Declaration public string Description { get; set; } Property Value Type Description System.String EvaluationCriterias Declaration public virtual List<EvaluationCriteria> EvaluationCriterias { get; set; } Property Value Type Description List < EvaluationCriteria > EvaluationType Declaration public abstract EvaluationType EvaluationType { get; } Property Value Type Description EvaluationType GameId Declaration public int GameId { get; set; } Property Value Type Description System.Int32 Id Declaration public int Id { get; set; } Property Value Type Description System.Int32 Name Declaration public string Name { get; set; } Property Value Type Description System.String Rewards Declaration public virtual List<Reward> Rewards { get; set; } Property Value Type Description List < Reward > Token Declaration public string Token { get; set; } Property Value Type Description System.String"
  },
  "api/PlayGen.SUGAR.Server.Model.EvaluationCriteria.html": {
    "href": "api/PlayGen.SUGAR.Server.Model.EvaluationCriteria.html",
    "title": "Class EvaluationCriteria | SUGAR",
    "keywords": "Class EvaluationCriteria Inheritance System.Object EvaluationCriteria Namespace : PlayGen.SUGAR.Server.Model Assembly : PlayGen.SUGAR.Server.Model.dll Syntax public class EvaluationCriteria : object Properties ComparisonType Declaration public ComparisonType ComparisonType { get; set; } Property Value Type Description ComparisonType CriteriaQueryType Declaration public CriteriaQueryType CriteriaQueryType { get; set; } Property Value Type Description CriteriaQueryType Evaluation Declaration public Evaluation Evaluation { get; set; } Property Value Type Description Evaluation EvaluationDataCategory Declaration public EvaluationDataCategory EvaluationDataCategory { get; set; } Property Value Type Description EvaluationDataCategory EvaluationDataKey Declaration public string EvaluationDataKey { get; set; } Property Value Type Description System.String EvaluationDataType Declaration public EvaluationDataType EvaluationDataType { get; set; } Property Value Type Description EvaluationDataType EvaluationId Declaration public int EvaluationId { get; set; } Property Value Type Description System.Int32 Id Declaration public int Id { get; set; } Property Value Type Description System.Int32 Scope Declaration public CriteriaScope Scope { get; set; } Property Value Type Description CriteriaScope Value Declaration public string Value { get; set; } Property Value Type Description System.String"
  },
  "api/PlayGen.SUGAR.Server.Model.Match.html": {
    "href": "api/PlayGen.SUGAR.Server.Model.Match.html",
    "title": "Class Match | SUGAR",
    "keywords": "Class Match Inheritance System.Object Match Namespace : PlayGen.SUGAR.Server.Model Assembly : PlayGen.SUGAR.Server.Model.dll Syntax public class Match : object Properties Creator Declaration public virtual User Creator { get; set; } Property Value Type Description User CreatorId Declaration public int CreatorId { get; set; } Property Value Type Description System.Int32 Data Declaration public virtual List<EvaluationData> Data { get; set; } Property Value Type Description List < EvaluationData > Ended Declaration public DateTime? Ended { get; set; } Property Value Type Description System.Nullable < DateTime > Game Declaration public virtual Game Game { get; set; } Property Value Type Description Game GameId Declaration public int GameId { get; set; } Property Value Type Description System.Int32 Id Declaration public int Id { get; set; } Property Value Type Description System.Int32 Started Declaration public DateTime? Started { get; set; } Property Value Type Description System.Nullable < DateTime >"
  },
  "api/PlayGen.SUGAR.Server.Model.Reward.html": {
    "href": "api/PlayGen.SUGAR.Server.Model.Reward.html",
    "title": "Class Reward | SUGAR",
    "keywords": "Class Reward Inheritance System.Object Reward Namespace : PlayGen.SUGAR.Server.Model Assembly : PlayGen.SUGAR.Server.Model.dll Syntax public class Reward : object Properties Evaluation Declaration public Evaluation Evaluation { get; set; } Property Value Type Description Evaluation EvaluationDataCategory Declaration public EvaluationDataCategory EvaluationDataCategory { get; set; } Property Value Type Description EvaluationDataCategory EvaluationDataKey Declaration public string EvaluationDataKey { get; set; } Property Value Type Description System.String EvaluationDataType Declaration public EvaluationDataType EvaluationDataType { get; set; } Property Value Type Description EvaluationDataType EvaluationId Declaration public int EvaluationId { get; set; } Property Value Type Description System.Int32 Id Declaration public int Id { get; set; } Property Value Type Description System.Int32 Value Declaration public string Value { get; set; } Property Value Type Description System.String"
  },
  "api/PlayGen.SUGAR.Server.Model.Role.html": {
    "href": "api/PlayGen.SUGAR.Server.Model.Role.html",
    "title": "Class Role | SUGAR",
    "keywords": "Class Role Inheritance System.Object Role Namespace : PlayGen.SUGAR.Server.Model Assembly : PlayGen.SUGAR.Server.Model.dll Syntax public class Role : object Properties ClaimScope Declaration public ClaimScope ClaimScope { get; set; } Property Value Type Description ClaimScope Default Declaration public bool Default { get; set; } Property Value Type Description System.Boolean Id Declaration public int Id { get; set; } Property Value Type Description System.Int32 Name Declaration public string Name { get; set; } Property Value Type Description System.String RoleClaims Declaration public virtual List<RoleClaim> RoleClaims { get; set; } Property Value Type Description List < RoleClaim >"
  },
  "api/PlayGen.SUGAR.Server.Model.RoleClaim.html": {
    "href": "api/PlayGen.SUGAR.Server.Model.RoleClaim.html",
    "title": "Class RoleClaim | SUGAR",
    "keywords": "Class RoleClaim Inheritance System.Object RoleClaim Namespace : PlayGen.SUGAR.Server.Model Assembly : PlayGen.SUGAR.Server.Model.dll Syntax public class RoleClaim : object Properties Claim Declaration public Claim Claim { get; set; } Property Value Type Description Claim ClaimId Declaration public int ClaimId { get; set; } Property Value Type Description System.Int32 Role Declaration public Role Role { get; set; } Property Value Type Description Role RoleId Declaration public int RoleId { get; set; } Property Value Type Description System.Int32"
  },
  "api/PlayGen.SUGAR.Server.WebAPI.Controllers.LeaderboardsController.html": {
    "href": "api/PlayGen.SUGAR.Server.WebAPI.Controllers.LeaderboardsController.html",
    "title": "Class LeaderboardsController | SUGAR",
    "keywords": "Class LeaderboardsController Web Controller that facilitates Leaderboard specific operations. Inheritance System.Object LeaderboardsController Namespace : PlayGen.SUGAR.Server.WebAPI.Controllers Assembly : PlayGen.SUGAR.Server.WebAPI.dll Syntax public class LeaderboardsController : Controller Constructors LeaderboardsController(LeaderboardController, IAuthorizationService) Declaration public LeaderboardsController(LeaderboardController leaderboardController, IAuthorizationService authorizationService) Parameters Type Name Description LeaderboardController leaderboardController IAuthorizationService authorizationService Methods Create(LeaderboardRequest) Create a new Leaderboard. Requires Name and Token to be unique to that GameId . Example Usage: POST api/leaderboards/create Declaration public Task<IActionResult> Create(LeaderboardRequest newLeaderboard) Parameters Type Name Description LeaderboardRequest newLeaderboard LeaderboardRequest object that holds the details of the new Leaderboard. Returns Type Description Task < IActionResult > Returns a LeaderboardResponse object containing details for the newly created Leaderboard. Delete(String, Int32) Delete Leaderboard with the and provided. Example Usage: DELETE api/leaderboards/LEADERBOARD_TOKEN/1 Declaration public Task<IActionResult> Delete(string token, int gameId) Parameters Type Name Description System.String token Token of Leaderboard System.Int32 gameId ID of the Game the Leaderboard is for Returns Type Description Task < IActionResult > Get(Int32) Find a list of leaderboards that match . If global is provided instead of a gameId, get all global leaderboards, ie. leaderboards that are not associated with a specific game. Example Usage: GET api/leaderboards/game/1/list Declaration public IActionResult Get(int gameId) Parameters Type Name Description System.Int32 gameId Game ID Returns Type Description IActionResult Returns multiple LeaderboardResponse that hold Leaderboard details Get(String, Int32) Find a single leaderboard matching the token and gameId. Example Usage: GET api/leaderboards/LEADERBOARD_TOKEN/1 Declaration public IActionResult Get(string token, int gameId) Parameters Type Name Description System.String token Token System.Int32 gameId Returns Type Description IActionResult Returns a single LeaderboardResponse that holds Leaderboard details GetLeaderboardStandings(LeaderboardStandingsRequest) Get the standings for a Leaderboard using a LeaderboardStandingsRequest . Example Usage: POST api/leaderboards/standings Declaration public IActionResult GetLeaderboardStandings(LeaderboardStandingsRequest leaderboardDetails) Parameters Type Name Description LeaderboardStandingsRequest leaderboardDetails LeaderboardStandingsRequest object that holds the details that are wanted from the Leaderboard. Returns Type Description IActionResult Returns multiple LeaderboardStandingsResponse that hold actor positions in the leaderboard. Update(LeaderboardRequest) Update an existing Leaderboard. Example Usage: PUT api/leaderboards/update Declaration public Task<IActionResult> Update(LeaderboardRequest leaderboard) Parameters Type Name Description LeaderboardRequest leaderboard LeaderboardRequest object that holds the details of the Leaderboard. Returns Type Description Task < IActionResult >"
  },
  "api/PlayGen.SUGAR.Server.WebAPI.Controllers.MatchController.html": {
    "href": "api/PlayGen.SUGAR.Server.WebAPI.Controllers.MatchController.html",
    "title": "Class MatchController | SUGAR",
    "keywords": "Class MatchController Web controller that facillitates Match specific operations. Inheritance System.Object MatchController Namespace : PlayGen.SUGAR.Server.WebAPI.Controllers Assembly : PlayGen.SUGAR.Server.WebAPI.dll Syntax public class MatchController : Controller Constructors MatchController(MatchController, IAuthorizationService) Declaration public MatchController(MatchController matchCoreController, IAuthorizationService authorizationService) Parameters Type Name Description MatchController matchCoreController IAuthorizationService authorizationService Methods Add(EvaluationDataRequest) Create a new GameData record. Example Usage: POST api/match/1/data Declaration public Task<IActionResult> Add(EvaluationDataRequest newData) Parameters Type Name Description EvaluationDataRequest newData EvaluationDataRequest object that holds the details of the new Match Data. Returns Type Description Task < IActionResult > A EvaluationDataResponse containing the new Match Data details. Create() Method to create a match for a game a user is currently logged into Example Usage: GET api/match/create Declaration public Task<IActionResult> Create() Returns Type Description Task < IActionResult > The newly created MatchResponse Create(Int32) Method for admins to creates a match for a game they are not logged into. Example Usage: GET api/match/create/1 Declaration public Task<IActionResult> Create(int gameId) Parameters Type Name Description System.Int32 gameId Returns Type Description Task < IActionResult > The newly created MatchResponse CreateAndStart() Method to create a match for a game a user is currently logged into which is also started automatically. Example Usage: GET api/match/create Declaration public Task<IActionResult> CreateAndStart() Returns Type Description Task < IActionResult > The newly created MatchResponse End(Int32) Ends a match for the game that the user is currently logged in for. Example Usage: GET api/match/1/end Declaration public Task<IActionResult> End(int matchId) Parameters Type Name Description System.Int32 matchId Returns Type Description Task < IActionResult > MatchResponse End(Int32, Int32) Method for admins to end a match for a game they are not logged into. Example Usage: GET api/match/1/end Declaration public Task<IActionResult> End(int gameId, int matchId) Parameters Type Name Description System.Int32 gameId System.Int32 matchId Returns Type Description Task < IActionResult > MatchResponse Get(Int32, String[]) Find a list of all MatchData that match the input parameters. Example Usage: GET api/match/1/data Declaration public IActionResult Get(int matchId, string[] keys) Parameters Type Name Description System.Int32 matchId Id of a User/Group. System.String [] keys Array of Key names. Returns Type Description IActionResult A list of EvaluationDataResponse which match the search criteria. GetByCreator(Int32) Get a list of matches that were created by a specific actor. Example Usage: GET api/match/creator/1 Declaration public IActionResult GetByCreator(int creatorId) Parameters Type Name Description System.Int32 creatorId Returns Type Description IActionResult A list of MatchResponse GetByCreator(Int32, Nullable<DateTime>, Nullable<DateTime>) Get a list of matches that were created by a specific actor, filtered by a time range. Example Usage: GET api/match/creator/1/2016-12-20T15:40:30/2016-12-20T16:50:40 Declaration public IActionResult GetByCreator(int creatorId, DateTime? start, DateTime? end) Parameters Type Name Description System.Int32 creatorId System.Nullable < DateTime > start System.Nullable < DateTime > end Returns Type Description IActionResult A list of MatchResponse GetByGame(Int32) Get a list of matches for a specific game. Example Usage: GET api/match/game/1 Declaration public IActionResult GetByGame(int gameId) Parameters Type Name Description System.Int32 gameId Returns Type Description IActionResult A list of MatchResponse GetByGame(Int32, Nullable<DateTime>, Nullable<DateTime>) Get a list of matches for a specific game, filtered by a time range. Example Usage: GET api/match/game/1/2016-12-20T15:40:30/2016-12-20T16:50:40 Declaration public IActionResult GetByGame(int gameId, DateTime? start, DateTime? end) Parameters Type Name Description System.Int32 gameId System.Nullable < DateTime > start System.Nullable < DateTime > end Returns Type Description IActionResult A list of MatchResponse GetByGameAndCreator(Int32, Int32) Get a list of matches for a specific game created by a specific actor. Example Usage: GET api/match/game/1/creator/1 Declaration public IActionResult GetByGameAndCreator(int gameId, int creatorId) Parameters Type Name Description System.Int32 gameId System.Int32 creatorId Returns Type Description IActionResult A list of MatchResponse GetByGameAndCreator(Int32, Int32, Nullable<DateTime>, Nullable<DateTime>) Get a list of matches for a specific game created by a specific user, filtered by a time range. Example Usage: GET api/match/game/1/creator/1/2016-12-20T15:40:30/2016-12-20T16:50:40 Declaration public IActionResult GetByGameAndCreator(int gameId, int creatorId, DateTime? start, DateTime? end) Parameters Type Name Description System.Int32 gameId System.Int32 creatorId System.Nullable < DateTime > start System.Nullable < DateTime > end Returns Type Description IActionResult A list of MatchResponse GetByTime(Nullable<DateTime>, Nullable<DateTime>) Get a list of matches filtered by a time range. Example Usage: GET api/match/2016-12-20T15:40:30/2016-12-20T16:50:40 Declaration public IActionResult GetByTime(DateTime? start, DateTime? end) Parameters Type Name Description System.Nullable < DateTime > start System.Nullable < DateTime > end Returns Type Description IActionResult A list of MatchResponse Start(Int32) Start a match for the game the user is currently logged into. Example Usage: GET api/match/1/start Declaration public Task<IActionResult> Start(int matchId) Parameters Type Name Description System.Int32 matchId Returns Type Description Task < IActionResult > MatchResponse"
  },
  "api/PlayGen.SUGAR.Server.WebAPI.Controllers.ResourceController.html": {
    "href": "api/PlayGen.SUGAR.Server.WebAPI.Controllers.ResourceController.html",
    "title": "Class ResourceController | SUGAR",
    "keywords": "Class ResourceController Web Controller that facilitates UserData specific operations. Inheritance System.Object ResourceController Namespace : PlayGen.SUGAR.Server.WebAPI.Controllers Assembly : PlayGen.SUGAR.Server.WebAPI.dll Syntax public class ResourceController : Controller Constructors ResourceController(ResourceController, IAuthorizationService) Declaration public ResourceController(ResourceController resourceController, IAuthorizationService authorizationService) Parameters Type Name Description ResourceController resourceController IAuthorizationService authorizationService Methods AddOrUpdate(ResourceAddRequest) Creates or updates a Resource record. Example Usage: POST api/resource Declaration public Task<IActionResult> AddOrUpdate(ResourceAddRequest resourceRequest) Parameters Type Name Description ResourceAddRequest resourceRequest ResourceAddRequest object that holds the details of the ResourceData. Returns Type Description Task < IActionResult > A ResourceResponse containing the new Resource details. Get(Nullable<Int32>, Nullable<Int32>, String[]) Find a list of all Resources filtered by the , and provided. Example Usage: GET api/resource?actorId=1&gameId=1&key=key1&key=key2 Declaration public Task<IActionResult> Get(int? gameId, int? actorId, string[] keys) Parameters Type Name Description System.Nullable < System.Int32 > gameId ID of a Game. System.Nullable < System.Int32 > actorId ID of a User/Group. System.String [] keys Optional array of Key names to filter results by. Returns Type Description Task < IActionResult > A list of ResourceResponse which match the search criteria. Transfer(ResourceTransferRequest) Transfers a quantity of a specific resource. Example Usage: Post api/resource/transfer Declaration public Task<IActionResult> Transfer(ResourceTransferRequest transferRequest) Parameters Type Name Description ResourceTransferRequest transferRequest ResourceTransferRequest object that holds the details of the resoruce transfer. Returns Type Description Task < IActionResult > A ResourceTransferResponse containing the modified resources."
  },
  "api/PlayGen.SUGAR.Server.WebAPI.Controllers.RoleClaimController.html": {
    "href": "api/PlayGen.SUGAR.Server.WebAPI.Controllers.RoleClaimController.html",
    "title": "Class RoleClaimController | SUGAR",
    "keywords": "Class RoleClaimController Web Controller that facilitates RoleClaim specific operations. Inheritance System.Object RoleClaimController Namespace : PlayGen.SUGAR.Server.WebAPI.Controllers Assembly : PlayGen.SUGAR.Server.WebAPI.dll Syntax public class RoleClaimController : Controller Constructors RoleClaimController(RoleClaimController, ClaimController, RoleController, ActorClaimController, IAuthorizationService) Declaration public RoleClaimController(RoleClaimController roleClaimCoreController, ClaimController claimController, RoleController roleController, ActorClaimController actorClaimController, IAuthorizationService authorizationService) Parameters Type Name Description RoleClaimController roleClaimCoreController ClaimController claimController RoleController roleController ActorClaimController actorClaimController IAuthorizationService authorizationService Methods Create(RoleClaimRequest) Create a new RoleClaim. Example Usage: POST api/roleclaim Declaration public Task<IActionResult> Create(RoleClaimRequest newRoleClaim) Parameters Type Name Description RoleClaimRequest newRoleClaim RoleClaimRequest object that contains the details of the new RoleClaim. Returns Type Description Task < IActionResult > A RoleClaimResponse containing the new RoleClaim details. Delete(Int32, Int32) Delete RoleClaim with the ID provided. Example Usage: DELETE api/roleclaim/role/1/claim/1 Declaration public Task<IActionResult> Delete(int roleId, int claimId) Parameters Type Name Description System.Int32 roleId Role ID. System.Int32 claimId Claim ID. Returns Type Description Task < IActionResult > GetRoleClaims(Int32) Get a list of all Claims for this Role. Example Usage: GET api/roleclaim/role/1 Declaration public Task<IActionResult> GetRoleClaims(int id) Parameters Type Name Description System.Int32 id Returns Type Description Task < IActionResult > A list of ClaimResponse that hold Claim details."
  },
  "api/PlayGen.SUGAR.Server.WebAPI.Extensions.RelationshipExtensions.html": {
    "href": "api/PlayGen.SUGAR.Server.WebAPI.Extensions.RelationshipExtensions.html",
    "title": "Class RelationshipExtensions | SUGAR",
    "keywords": "Class RelationshipExtensions Inheritance System.Object RelationshipExtensions Namespace : PlayGen.SUGAR.Server.WebAPI.Extensions Assembly : PlayGen.SUGAR.Server.WebAPI.dll Syntax public static class RelationshipExtensions : object Methods ToContract(ActorRelationship) Declaration public static RelationshipResponse ToContract(this ActorRelationship relationshipModel) Parameters Type Name Description ActorRelationship relationshipModel Returns Type Description RelationshipResponse ToRelationshipModel(RelationshipRequest) Declaration public static ActorRelationship ToRelationshipModel(this RelationshipRequest relationContract) Parameters Type Name Description RelationshipRequest relationContract Returns Type Description ActorRelationship"
  },
  "api/PlayGen.SUGAR.Server.WebAPI.Extensions.ResourceExtensions.html": {
    "href": "api/PlayGen.SUGAR.Server.WebAPI.Extensions.ResourceExtensions.html",
    "title": "Class ResourceExtensions | SUGAR",
    "keywords": "Class ResourceExtensions Inheritance System.Object ResourceExtensions Namespace : PlayGen.SUGAR.Server.WebAPI.Extensions Assembly : PlayGen.SUGAR.Server.WebAPI.dll Syntax public static class ResourceExtensions : object Methods ToModel(ResourceAddRequest) Declaration public static EvaluationData ToModel(this ResourceAddRequest resourceContract) Parameters Type Name Description ResourceAddRequest resourceContract Returns Type Description EvaluationData ToResourceContract(EvaluationData) Declaration public static ResourceResponse ToResourceContract(this EvaluationData evaluationData) Parameters Type Name Description EvaluationData evaluationData Returns Type Description ResourceResponse ToResourceContractList(IEnumerable<EvaluationData>) Declaration public static IEnumerable<ResourceResponse> ToResourceContractList(this IEnumerable<EvaluationData> gameData) Parameters Type Name Description IEnumerable < EvaluationData > gameData Returns Type Description IEnumerable < ResourceResponse >"
  },
  "api/PlayGen.SUGAR.Server.WebAPI.Extensions.RewardExtensions.html": {
    "href": "api/PlayGen.SUGAR.Server.WebAPI.Extensions.RewardExtensions.html",
    "title": "Class RewardExtensions | SUGAR",
    "keywords": "Class RewardExtensions Inheritance System.Object RewardExtensions Namespace : PlayGen.SUGAR.Server.WebAPI.Extensions Assembly : PlayGen.SUGAR.Server.WebAPI.dll Syntax public static class RewardExtensions : object Methods ToContract(Reward) Declaration public static RewardResponse ToContract(this Reward reward) Parameters Type Name Description Reward reward Returns Type Description RewardResponse ToContractList(List<Reward>) Declaration public static List<RewardResponse> ToContractList(this List<Reward> rewards) Parameters Type Name Description List < Reward > rewards Returns Type Description List < RewardResponse > ToModel(RewardCreateRequest) Declaration public static Reward ToModel(this RewardCreateRequest contract) Parameters Type Name Description RewardCreateRequest contract Returns Type Description Reward ToModel(RewardUpdateRequest) Declaration public static Reward ToModel(this RewardUpdateRequest contract) Parameters Type Name Description RewardUpdateRequest contract Returns Type Description Reward ToModelList(List<RewardCreateRequest>) Declaration public static List<Reward> ToModelList(this List<RewardCreateRequest> rewards) Parameters Type Name Description List < RewardCreateRequest > rewards Returns Type Description List < Reward > ToModelList(List<RewardUpdateRequest>) Declaration public static List<Reward> ToModelList(this List<RewardUpdateRequest> rewards) Parameters Type Name Description List < RewardUpdateRequest > rewards Returns Type Description List < Reward >"
  },
  "api/PlayGen.SUGAR.Server.WebAPI.Extensions.RoleClaimExtensions.html": {
    "href": "api/PlayGen.SUGAR.Server.WebAPI.Extensions.RoleClaimExtensions.html",
    "title": "Class RoleClaimExtensions | SUGAR",
    "keywords": "Class RoleClaimExtensions Inheritance System.Object RoleClaimExtensions Namespace : PlayGen.SUGAR.Server.WebAPI.Extensions Assembly : PlayGen.SUGAR.Server.WebAPI.dll Syntax public static class RoleClaimExtensions : object Methods ToContract(RoleClaim) Declaration public static RoleClaimResponse ToContract(this RoleClaim roleClaimModel) Parameters Type Name Description RoleClaim roleClaimModel Returns Type Description RoleClaimResponse ToContractList(IEnumerable<RoleClaim>) Declaration public static IEnumerable<RoleClaimResponse> ToContractList(this IEnumerable<RoleClaim> roleClaimModels) Parameters Type Name Description IEnumerable < RoleClaim > roleClaimModels Returns Type Description IEnumerable < RoleClaimResponse > ToModel(RoleClaimRequest) Declaration public static RoleClaim ToModel(this RoleClaimRequest roleClaimContract) Parameters Type Name Description RoleClaimRequest roleClaimContract Returns Type Description RoleClaim"
  },
  "unity-client/api/PlayGen.SUGAR.Unity.Editor.SeedGame.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.Editor.SeedGame.html",
    "title": "Class SeedGame | SUGAR",
    "keywords": "Class SeedGame Inheritance System.Object SeedGame Namespace : PlayGen.SUGAR.Unity.Editor Assembly : PlayGen.SUGAR.Unity.Editor.dll Syntax public static class SeedGame : object Properties DefaultGameSeed Declaration public static TextAsset DefaultGameSeed { get; } Property Value Type Description TextAsset Methods ShowSeedGameWindow() Declaration public static void ShowSeedGameWindow() TryApplySeed(String, String, TextAsset, out List<String>) Declaration public static bool TryApplySeed(string username, string password, TextAsset gameSeedText, out List<string> errors) Parameters Type Name Description System.String username System.String password TextAsset gameSeedText List < System.String > errors Returns Type Description System.Boolean"
  },
  "unity-client/api/PlayGen.SUGAR.Unity.Editor.SeedGameWindow.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.Editor.SeedGameWindow.html",
    "title": "Class SeedGameWindow | SUGAR",
    "keywords": "Class SeedGameWindow Inheritance System.Object SeedGameWindow Namespace : PlayGen.SUGAR.Unity.Editor Assembly : PlayGen.SUGAR.Unity.Editor.dll Syntax public class SeedGameWindow : EditorWindow Methods SetGameSeed(TextAsset) Declaration public void SetGameSeed(TextAsset gameSeed) Parameters Type Name Description TextAsset gameSeed"
  },
  "api/PlayGen.SUGAR.Client.AccountClient.html": {
    "href": "api/PlayGen.SUGAR.Client.AccountClient.html",
    "title": "Class AccountClient | SUGAR",
    "keywords": "Class AccountClient Controller that facilitates Account specific operations. Inheritance System.Object ClientBase AccountClient Inherited Members ClientBase.AsyncRequestController ClientBase.EvaluationNotifications ClientBase.SerializerSettings ClientBase.EnableEvaluationNotifications(Boolean) ClientBase.ClearSessionData() ClientBase.AreUriParamsValid(Object[]) ClientBase.GetUriBuilder(String, Object[]) ClientBase.Post<TRequest, TResponse>(String, TRequest, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Post<TRequest>(String, TRequest, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Post<TResponse>(String, Object, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Put<TRequest, TResponse>(String, TRequest, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Put<TRequest>(String, TRequest, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.PostPut<TResponse>(String, String, Dictionary<String, String>, Object, IEnumerable<HttpStatusCode>) ClientBase.PostPut(String, String, Dictionary<String, String>, Object, IEnumerable<HttpStatusCode>) ClientBase.Get<TResponse>(String, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Get(String, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Delete<TResponse>(String, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Delete(String, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.GetDelete<TResponse>(String, String, Dictionary<String, String>, IEnumerable<HttpStatusCode>) ClientBase.GetDelete(String, String, Dictionary<String, String>, IEnumerable<HttpStatusCode>) Namespace : PlayGen.SUGAR.Client Assembly : PlayGen.SUGAR.Client.dll Syntax public class AccountClient : ClientBase Constructors AccountClient(String, IHttpHandler, Dictionary<String, String>, Dictionary<String, String>, IAsyncRequestController, EvaluationNotifications) Declaration public AccountClient(string baseAddress, IHttpHandler httpHandler, Dictionary<string, string> constantHeaders, Dictionary<string, string> sessionHeaders, IAsyncRequestController asyncRequestController, EvaluationNotifications evaluationNotifications) Parameters Type Name Description System.String baseAddress IHttpHandler httpHandler Dictionary < System.String , System.String > constantHeaders Dictionary < System.String , System.String > sessionHeaders IAsyncRequestController asyncRequestController EvaluationNotifications evaluationNotifications Methods Create(AccountRequest) Register a new account and creates an associated user. Requires the Name to be unique. Returns a JsonWebToken used for authorization in any further calls to the API. Declaration public AccountResponse Create(AccountRequest accountRequest) Parameters Type Name Description AccountRequest accountRequest AccountRequest object that contains the details of the new Account. Returns Type Description AccountResponse A AccountResponse containing the new Account details. CreateAsync(AccountRequest, Action<AccountResponse>, Action<Exception>) Declaration public void CreateAsync(AccountRequest accountRequest, Action<AccountResponse> onSuccess, Action<Exception> onError) Parameters Type Name Description AccountRequest accountRequest Action < AccountResponse > onSuccess Action < Exception > onError Delete(Int32) Delete Accounts with the ID provided. Declaration public void Delete(int id) Parameters Type Name Description System.Int32 id Account ID."
  },
  "api/PlayGen.SUGAR.Contracts.LeaderboardResponse.html": {
    "href": "api/PlayGen.SUGAR.Contracts.LeaderboardResponse.html",
    "title": "Class LeaderboardResponse | SUGAR",
    "keywords": "Class LeaderboardResponse Encapsulates leaderboard details returned from the server. Inheritance System.Object LeaderboardResponse Namespace : PlayGen.SUGAR.Contracts Assembly : PlayGen.SUGAR.Contracts.dll Syntax public class LeaderboardResponse : object Examples JSON { Token : \"THE_LEADERBOARD_TOKEN\", GameId : 1, Name : \"Leaderboard Name\", Key : \"Key\", ActorType : \"User\", EvaluationDataType : \"Long\", CriteriaScope : \"Actor\", LeaderboardType : \"Highest\" } Properties ActorType The type of actor which this leaderboard is intended for. Declaration public ActorType ActorType { get; set; } Property Value Type Description ActorType CriteriaScope Whether the criteria is checked against the actor or relatedactors (i.e. group members, user friends). Declaration public CriteriaScope CriteriaScope { get; set; } Property Value Type Description CriteriaScope EvaluationDataCategory The EvaluationDataCategory of the EvaluationData being checked against. Declaration public EvaluationDataCategory EvaluationDataCategory { get; set; } Property Value Type Description EvaluationDataCategory EvaluationDataType The EvaluationDataType of the EvaluationData being checked against. Declaration public EvaluationDataType EvaluationDataType { get; set; } Property Value Type Description EvaluationDataType GameId The Id of the game which this leaderboard belongs to. Declaration public int GameId { get; set; } Property Value Type Description System.Int32 Key The EvaluationData key which is checked against in order to create the leaderboard standings. Declaration public string Key { get; set; } Property Value Type Description System.String LeaderboardType The method which collects data and sorts it for this leaderboard. Declaration public LeaderboardType LeaderboardType { get; set; } Property Value Type Description LeaderboardType Name The display name of the leaderboard. Declaration public string Name { get; set; } Property Value Type Description System.String Token The unique identifier used in development to reference the leaderboard. Declaration public string Token { get; set; } Property Value Type Description System.String"
  },
  "api/PlayGen.SUGAR.Contracts.UserResponse.html": {
    "href": "api/PlayGen.SUGAR.Contracts.UserResponse.html",
    "title": "Class UserResponse | SUGAR",
    "keywords": "Class UserResponse Encapsulates user details from the server. Inheritance System.Object ActorResponse UserResponse Inherited Members ActorResponse.Id ActorResponse.Name ActorResponse.Description Namespace : PlayGen.SUGAR.Contracts Assembly : PlayGen.SUGAR.Contracts.dll Syntax public class UserResponse : ActorResponse Examples JSON { Id : 1, Name : \"Actor Name\" } Properties FriendCount The number of friends this user has. Declaration public int FriendCount { get; set; } Property Value Type Description System.Int32 GroupCount The number of groups this user is a member of Declaration public int GroupCount { get; set; } Property Value Type Description System.Int32"
  },
  "api/PlayGen.SUGAR.Server.Authentication.TokenAuthOptions.html": {
    "href": "api/PlayGen.SUGAR.Server.Authentication.TokenAuthOptions.html",
    "title": "Class TokenAuthOptions | SUGAR",
    "keywords": "Class TokenAuthOptions Inheritance System.Object TokenAuthOptions Namespace : PlayGen.SUGAR.Server.Authentication Assembly : PlayGen.SUGAR.Server.Authentication.dll Syntax public class TokenAuthOptions : object Properties Audience Declaration public string Audience { get; set; } Property Value Type Description System.String Issuer Declaration public string Issuer { get; set; } Property Value Type Description System.String LoginTokenValidityTimeout Declaration public TimeSpan LoginTokenValidityTimeout { get; set; } Property Value Type Description TimeSpan SessionTokenValidityTimeout Declaration public TimeSpan SessionTokenValidityTimeout { get; set; } Property Value Type Description TimeSpan SigningCredentials Declaration public SigningCredentials SigningCredentials { get; set; } Property Value Type Description SigningCredentials"
  },
  "api/PlayGen.SUGAR.Server.Authentication.TokenController.html": {
    "href": "api/PlayGen.SUGAR.Server.Authentication.TokenController.html",
    "title": "Class TokenController | SUGAR",
    "keywords": "Class TokenController Inheritance System.Object TokenController Namespace : PlayGen.SUGAR.Server.Authentication Assembly : PlayGen.SUGAR.Server.Authentication.dll Syntax public class TokenController : object Constructors TokenController(TokenAuthOptions) Declaration public TokenController(TokenAuthOptions token) Parameters Type Name Description TokenAuthOptions token Methods IssueLoginToken(Int32, Int32) Declaration public string IssueLoginToken(int gameId, int userId) Parameters Type Name Description System.Int32 gameId System.Int32 userId Returns Type Description System.String IssueSessionToken(HttpContext, Session) Declaration public void IssueSessionToken(HttpContext context, Session session) Parameters Type Name Description HttpContext context Session session IssueSessionToken(HttpContext, Int64, Int32, Int32) Declaration public void IssueSessionToken(HttpContext context, long sessionId, int gameId, int userId) Parameters Type Name Description HttpContext context System.Int64 sessionId System.Int32 gameId System.Int32 userId RevokeToken(HttpContext) Declaration public void RevokeToken(HttpContext context) Parameters Type Name Description HttpContext context ValidateToken(HttpContext, String) Declaration public ValidateToken(HttpContext context, string token) Parameters Type Name Description HttpContext context System.String token Returns Type Description System. VerifyToken(String) Declaration public bool VerifyToken(string token) Parameters Type Name Description System.String token Returns Type Description System.Boolean"
  },
  "api/PlayGen.SUGAR.Server.WebAPI.Extensions.ActorDataExtensions.html": {
    "href": "api/PlayGen.SUGAR.Server.WebAPI.Extensions.ActorDataExtensions.html",
    "title": "Class ActorDataExtensions | SUGAR",
    "keywords": "Class ActorDataExtensions Inheritance System.Object ActorDataExtensions Namespace : PlayGen.SUGAR.Server.WebAPI.Extensions Assembly : PlayGen.SUGAR.Server.WebAPI.dll Syntax public static class ActorDataExtensions : object Methods ToActorDataModel(EvaluationDataRequest) Declaration public static ActorData ToActorDataModel(this EvaluationDataRequest dataContract) Parameters Type Name Description EvaluationDataRequest dataContract Returns Type Description ActorData ToContract(ActorData) Declaration public static EvaluationDataResponse ToContract(this ActorData actorData) Parameters Type Name Description ActorData actorData Returns Type Description EvaluationDataResponse ToContractList(IEnumerable<ActorData>) Declaration public static IEnumerable<EvaluationDataResponse> ToContractList(this IEnumerable<ActorData> actorDatas) Parameters Type Name Description IEnumerable < ActorData > actorDatas Returns Type Description IEnumerable < EvaluationDataResponse >"
  },
  "api/PlayGen.SUGAR.Server.WebAPI.Extensions.ActorExtensions.html": {
    "href": "api/PlayGen.SUGAR.Server.WebAPI.Extensions.ActorExtensions.html",
    "title": "Class ActorExtensions | SUGAR",
    "keywords": "Class ActorExtensions Inheritance System.Object ActorExtensions Namespace : PlayGen.SUGAR.Server.WebAPI.Extensions Assembly : PlayGen.SUGAR.Server.WebAPI.dll Syntax public static class ActorExtensions : object Methods ToActorContract(Actor) Declaration public static ActorResponse ToActorContract(this Actor model) Parameters Type Name Description Actor model Returns Type Description ActorResponse ToActorContractList(IEnumerable<Actor>) Declaration public static IEnumerable<ActorResponse> ToActorContractList(this IEnumerable<Actor> actorModels) Parameters Type Name Description IEnumerable < Actor > actorModels Returns Type Description IEnumerable < ActorResponse >"
  },
  "unity-client/api/PlayGen.SUGAR.Unity.EvaluationUnityClient.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.EvaluationUnityClient.html",
    "title": "Class EvaluationUnityClient | SUGAR",
    "keywords": "Class EvaluationUnityClient Use this for gathering evaluation progress and notifications when an evaluation is completed. Inheritance System.Object BaseUnityClient < BaseEvaluationListInterface > EvaluationUnityClient Inherited Members BaseUnityClient<BaseEvaluationListInterface>._landscapeInterface BaseUnityClient<BaseEvaluationListInterface>._portraitInterface BaseUnityClient<BaseEvaluationListInterface>._interface BaseUnityClient<BaseEvaluationListInterface>.HasInterface BaseUnityClient<BaseEvaluationListInterface>.IsActive BaseUnityClient<BaseEvaluationListInterface>.Hide() Namespace : PlayGen.SUGAR.Unity Assembly : PlayGen.SUGAR.Unity.dll Syntax public class EvaluationUnityClient : BaseUnityClient<BaseEvaluationListInterface> Properties Progress Declaration public List<EvaluationProgressResponse> Progress { get; } Property Value Type Description List < EvaluationProgressResponse > Current completion status for evaluations in this application for the currently signed in user. Methods DisplayAchievementList() Gathers current user achievement completion status and display the interface if it is provided and the GET Achievements request was successful. Declaration public void DisplayAchievementList() DisplayGroupAchievementList() Gathers current group achievement completion status and displays interface if it is provided and the GET Achievements request was successful. Declaration public void DisplayGroupAchievementList() DisplayGroupSkillList() Gathers current group skill completion status and display the interface if it is provided and the GET Skill request was successful. Declaration public void DisplayGroupSkillList() DisplaySkillList() Gathers current user skill completion status and display the interface if it is provided and the GET Skill request was successful. Declaration public void DisplaySkillList() ForceNotification(String) Force a notification to be displayed with the provided notification text. Declaration public void ForceNotification(string notification = \"Test Notification\") Parameters Type Name Description System.String notification String which will be used in the notification. Remarks This uses the EvaluationPopupInterface to display the text in the application Update() Update the interface to be used when the aspect ration changes Declaration protected override void Update() Overrides PlayGen.SUGAR.Unity.BaseUnityClient<PlayGen.SUGAR.Unity.BaseEvaluationListInterface>.Update()"
  },
  "api/PlayGen.SUGAR.Client.AllianceClient.html": {
    "href": "api/PlayGen.SUGAR.Client.AllianceClient.html",
    "title": "Class AllianceClient | SUGAR",
    "keywords": "Class AllianceClient Controller that facilitates User to Group relationship specific operations. Inheritance System.Object ClientBase AllianceClient Inherited Members ClientBase.AsyncRequestController ClientBase.EvaluationNotifications ClientBase.SerializerSettings ClientBase.EnableEvaluationNotifications(Boolean) ClientBase.ClearSessionData() ClientBase.AreUriParamsValid(Object[]) ClientBase.GetUriBuilder(String, Object[]) ClientBase.Post<TRequest, TResponse>(String, TRequest, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Post<TRequest>(String, TRequest, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Post<TResponse>(String, Object, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Put<TRequest, TResponse>(String, TRequest, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Put<TRequest>(String, TRequest, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.PostPut<TResponse>(String, String, Dictionary<String, String>, Object, IEnumerable<HttpStatusCode>) ClientBase.PostPut(String, String, Dictionary<String, String>, Object, IEnumerable<HttpStatusCode>) ClientBase.Get<TResponse>(String, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Get(String, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Delete<TResponse>(String, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Delete(String, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.GetDelete<TResponse>(String, String, Dictionary<String, String>, IEnumerable<HttpStatusCode>) ClientBase.GetDelete(String, String, Dictionary<String, String>, IEnumerable<HttpStatusCode>) Namespace : PlayGen.SUGAR.Client Assembly : PlayGen.SUGAR.Client.dll Syntax public class AllianceClient : ClientBase Constructors AllianceClient(String, IHttpHandler, Dictionary<String, String>, Dictionary<String, String>, IAsyncRequestController, EvaluationNotifications) Declaration public AllianceClient(string baseAddress, IHttpHandler httpHandler, Dictionary<string, string> persistentHeaders, Dictionary<string, string> sessionHeaders, IAsyncRequestController asyncRequestController, EvaluationNotifications evaluationNotifications) Parameters Type Name Description System.String baseAddress IHttpHandler httpHandler Dictionary < System.String , System.String > persistentHeaders Dictionary < System.String , System.String > sessionHeaders IAsyncRequestController asyncRequestController EvaluationNotifications evaluationNotifications Methods CreateAllianceRequest(RelationshipRequest) Create a new relationship request between the two groups. Requires a relationship between two groups to not already exist. Declaration public RelationshipResponse CreateAllianceRequest(RelationshipRequest relationship) Parameters Type Name Description RelationshipRequest relationship RelationshipRequest object that holds the details of the new relationship request. Returns Type Description RelationshipResponse A RelationshipResponse containing the new Relationship details. CreateAllianceRequestAsync(RelationshipRequest, Action<RelationshipResponse>, Action<Exception>) Declaration public void CreateAllianceRequestAsync(RelationshipRequest relationship, Action<RelationshipResponse> onSuccess, Action<Exception> onError) Parameters Type Name Description RelationshipRequest relationship Action < RelationshipResponse > onSuccess Action < Exception > onError GetAllianceCount(Int32) Get a count of groups that have a relationship with this . Declaration public int GetAllianceCount(int groupId) Parameters Type Name Description System.Int32 groupId ID of the group. Returns Type Description System.Int32 A count of members in the group that matches the search criteria. GetAllianceCountAsync(Int32, Action<Int32>, Action<Exception>) Declaration public void GetAllianceCountAsync(int groupId, Action<int> onSuccess, Action<Exception> onError) Parameters Type Name Description System.Int32 groupId Action < System.Int32 > onSuccess Action < Exception > onError GetAllianceRequests(Int32) Get a list of all groups that have relationship requests for this . Declaration public IEnumerable<ActorResponse> GetAllianceRequests(int groupId) Parameters Type Name Description System.Int32 groupId ID of the group. Returns Type Description IEnumerable < ActorResponse > A list of ActorResponse which match the search criteria. GetAllianceRequestsAsync(Int32, Action<IEnumerable<ActorResponse>>, Action<Exception>) Declaration public void GetAllianceRequestsAsync(int groupId, Action<IEnumerable<ActorResponse>> onSuccess, Action<Exception> onError) Parameters Type Name Description System.Int32 groupId Action < IEnumerable < ActorResponse >> onSuccess Action < Exception > onError GetAlliances(Int32) Get a list of all Groups that have relationships with this . Declaration public IEnumerable<ActorResponse> GetAlliances(int groupId) Parameters Type Name Description System.Int32 groupId ID of the group. Returns Type Description IEnumerable < ActorResponse > A list of ActorResponse which match the search criteria. GetAlliancesAsync(Int32, Action<IEnumerable<ActorResponse>>, Action<Exception>) Declaration public void GetAlliancesAsync(int groupId, Action<IEnumerable<ActorResponse>> onSuccess, Action<Exception> onError) Parameters Type Name Description System.Int32 groupId Action < IEnumerable < ActorResponse >> onSuccess Action < Exception > onError GetSentRequests(Int32) Get a list of all Groups that have been sent relationship requests for this . Declaration public IEnumerable<ActorResponse> GetSentRequests(int groupId) Parameters Type Name Description System.Int32 groupId ID of the group. Returns Type Description IEnumerable < ActorResponse > A list of ActorResponse which match the search criteria. GetSentRequestsAsync(Int32, Action<IEnumerable<ActorResponse>>, Action<Exception>) Declaration public void GetSentRequestsAsync(int groupId, Action<IEnumerable<ActorResponse>> onSuccess, Action<Exception> onError) Parameters Type Name Description System.Int32 groupId Action < IEnumerable < ActorResponse >> onSuccess Action < Exception > onError UpdateAlliance(RelationshipStatusUpdate) Update an existing relationship between two groups. Requires the relationship to already exist between the two groups. Declaration public void UpdateAlliance(RelationshipStatusUpdate relationship) Parameters Type Name Description RelationshipStatusUpdate relationship RelationshipStatusUpdate object that holds the details of the relationship. UpdateAllianceAsync(RelationshipStatusUpdate, Action, Action<Exception>) Declaration public void UpdateAllianceAsync(RelationshipStatusUpdate relationship, Action onSuccess, Action<Exception> onError) Parameters Type Name Description RelationshipStatusUpdate relationship Action onSuccess Action < Exception > onError UpdateAllianceRequest(RelationshipStatusUpdate) Update an existing relationship request between two groups. Requires the relationship request to already exist between the two Groups. Declaration public void UpdateAllianceRequest(RelationshipStatusUpdate relationship) Parameters Type Name Description RelationshipStatusUpdate relationship RelationshipStatusUpdate object that holds the details of the relationship. UpdateAllianceRequestAsync(RelationshipStatusUpdate, Action, Action<Exception>) Declaration public void UpdateAllianceRequestAsync(RelationshipStatusUpdate relationship, Action onSuccess, Action<Exception> onError) Parameters Type Name Description RelationshipStatusUpdate relationship Action onSuccess Action < Exception > onError"
  },
  "api/PlayGen.SUGAR.Client.DefaultHttpHandler.html": {
    "href": "api/PlayGen.SUGAR.Client.DefaultHttpHandler.html",
    "title": "Class DefaultHttpHandler | SUGAR",
    "keywords": "Class DefaultHttpHandler Inheritance System.Object DefaultHttpHandler Implements IHttpHandler Namespace : PlayGen.SUGAR.Client Assembly : PlayGen.SUGAR.Client.dll Syntax public class DefaultHttpHandler : object, IHttpHandler Methods CreateRequest(HttpRequest) Declaration protected WebRequest CreateRequest(HttpRequest request) Parameters Type Name Description HttpRequest request Returns Type Description WebRequest ExecuteRequest(HttpRequest) Create a WebRequest for the specified uri and HTTP verb Declaration public HttpResponse ExecuteRequest(HttpRequest request) Parameters Type Name Description HttpRequest request Returns Type Description HttpResponse HandleRequest(HttpRequest) Declaration public HttpResponse HandleRequest(HttpRequest request) Parameters Type Name Description HttpRequest request Returns Type Description HttpResponse SendData(WebRequest, Byte[]) Set the content stream and related properties of the specified WebRequest object with the byte array Declaration protected void SendData(WebRequest request, byte[] payload) Parameters Type Name Description WebRequest request System.Byte [] payload Implements IHttpHandler"
  },
  "api/PlayGen.SUGAR.Client.EvaluationEvents.html": {
    "href": "api/PlayGen.SUGAR.Client.EvaluationEvents.html",
    "title": "Namespace PlayGen.SUGAR.Client.EvaluationEvents | SUGAR",
    "keywords": "Namespace PlayGen.SUGAR.Client.EvaluationEvents Classes EvaluationEventsExtensions EvaluationNotification EvaluationNotifications"
  },
  "api/PlayGen.SUGAR.Server.Core.EvaluationEvents.ConcurrentProgressCache.html": {
    "href": "api/PlayGen.SUGAR.Server.Core.EvaluationEvents.ConcurrentProgressCache.html",
    "title": "Class ConcurrentProgressCache | SUGAR",
    "keywords": "Class ConcurrentProgressCache Inheritance System.Object ConcurrentProgressCache Namespace : PlayGen.SUGAR.Server.Core.EvaluationEvents Assembly : PlayGen.SUGAR.Server.Core.dll Syntax public class ConcurrentProgressCache : object Methods AddProgress(ConcurrentProgressCache, Func<Single, Boolean>) Declaration public void AddProgress(ConcurrentProgressCache addConcurrentProgressCache, Func<float, bool> addCondition = null) Parameters Type Name Description ConcurrentProgressCache addConcurrentProgressCache Func < System.Single , System.Boolean > addCondition AddProgress(Int32, Int32, Evaluation, Single) Declaration public void AddProgress(int gameId, int actorId, Evaluation evaluation, float progress) Parameters Type Name Description System.Int32 gameId System.Int32 actorId Evaluation evaluation System.Single progress GetActorProgress(Int32, Int32) Declaration public ConcurrentDictionary<Evaluation, float> GetActorProgress(int gameId, int actorId) Parameters Type Name Description System.Int32 gameId System.Int32 actorId Returns Type Description ConcurrentDictionary < Evaluation , System.Single > GetGameProgress(Int32) Declaration public ConcurrentDictionary<int, ConcurrentDictionary<Evaluation, float>> GetGameProgress(int gameId) Parameters Type Name Description System.Int32 gameId Returns Type Description ConcurrentDictionary < System.Int32 , ConcurrentDictionary < Evaluation , System.Single >> Remove(Int32) Declaration public bool Remove(int evaluationId) Parameters Type Name Description System.Int32 evaluationId Returns Type Description System.Boolean RemoveActor(Int32, Int32) Declaration public bool RemoveActor(int gameId, int actorId) Parameters Type Name Description System.Int32 gameId System.Int32 actorId Returns Type Description System.Boolean TakeActorProgress(Int32, Int32) Declaration public ConcurrentDictionary<int, ConcurrentDictionary<Evaluation, float>> TakeActorProgress(int gameId, int actorId) Parameters Type Name Description System.Int32 gameId System.Int32 actorId Returns Type Description ConcurrentDictionary < System.Int32 , ConcurrentDictionary < Evaluation , System.Single >> TryGetActorProgress(Int32, Int32, out ConcurrentDictionary<Evaluation, Single>) Declaration public bool TryGetActorProgress(int gameId, int actorId, out ConcurrentDictionary<Evaluation, float> actorProgress) Parameters Type Name Description System.Int32 gameId System.Int32 actorId ConcurrentDictionary < Evaluation , System.Single > actorProgress Returns Type Description System.Boolean TryGetGameProgress(Int32, out ConcurrentDictionary<Int32, ConcurrentDictionary<Evaluation, Single>>) Declaration public bool TryGetGameProgress(int gameId, out ConcurrentDictionary<int, ConcurrentDictionary<Evaluation, float>> gameProgress) Parameters Type Name Description System.Int32 gameId ConcurrentDictionary < System.Int32 , ConcurrentDictionary < Evaluation , System.Single >> gameProgress Returns Type Description System.Boolean"
  },
  "api/PlayGen.SUGAR.Server.Core.Utilities.PasswordEncryption.html": {
    "href": "api/PlayGen.SUGAR.Server.Core.Utilities.PasswordEncryption.html",
    "title": "Class PasswordEncryption | SUGAR",
    "keywords": "Class PasswordEncryption Inheritance System.Object PasswordEncryption Namespace : PlayGen.SUGAR.Server.Core.Utilities Assembly : PlayGen.SUGAR.Server.Core.dll Syntax public class PasswordEncryption : object Methods Encrypt(String) Declaration public static string Encrypt(string password) Parameters Type Name Description System.String password Returns Type Description System.String Verify(String, String) Declaration public static bool Verify(string password, string hash) Parameters Type Name Description System.String password System.String hash Returns Type Description System.Boolean"
  },
  "api/PlayGen.SUGAR.Server.Core.Utilities.html": {
    "href": "api/PlayGen.SUGAR.Server.Core.Utilities.html",
    "title": "Namespace PlayGen.SUGAR.Server.Core.Utilities | SUGAR",
    "keywords": "Namespace PlayGen.SUGAR.Server.Core.Utilities Classes PasswordEncryption"
  },
  "api/PlayGen.SUGAR.Server.EntityFramework.EntityConfigs.AchievementConfig.html": {
    "href": "api/PlayGen.SUGAR.Server.EntityFramework.EntityConfigs.AchievementConfig.html",
    "title": "Class AchievementConfig | SUGAR",
    "keywords": "Class AchievementConfig Inheritance System.Object AchievementConfig Namespace : PlayGen.SUGAR.Server.EntityFramework.EntityConfigs Assembly : PlayGen.SUGAR.Server.EntityFramework.dll Syntax public class AchievementConfig : IEntityTypeConfiguration<Achievement> Methods Configure(EntityTypeBuilder<Achievement>) Declaration public void Configure(EntityTypeBuilder<Achievement> builder) Parameters Type Name Description EntityTypeBuilder < Achievement > builder"
  },
  "api/PlayGen.SUGAR.Common.html": {
    "href": "api/PlayGen.SUGAR.Common.html",
    "title": "Namespace PlayGen.SUGAR.Common | SUGAR",
    "keywords": "Namespace PlayGen.SUGAR.Common Classes APIVersion This class is used to see which version of the API exists in consuming projects to facillitate checking compatibility. Major versions should increment when API Breaking changes are added. Minor version should increment for Fixes and Additions that won't cause existing clients with the same Major version to break. Build version should increment for every build. RegexUtil Enums ActorType Enum for selecting the target type of actor. ComparisonType Enum for selecting target comparison between current value and target value. CriteriaQueryType Enum for selecting what values will be used to query if criteria is met. CriteriaScope Enum for selecting if EvaluationData is to checked against just the actor in question or other actors relating to them (i.e. group members) EvaluationDataCategory EvaluationDataType Enum for selecting the type of data being stored or looked for. EvaluationType Enum for selecting the category of evaluation being stored or looked for. LeaderboardFilterType Enum for selecting subsection of users for current standings of a leaderboard. LeaderboardType Enum for selecting the type and sorting order of the leaderboard being created."
  },
  "api/PlayGen.SUGAR.Contracts.EvaluationDataResponse.html": {
    "href": "api/PlayGen.SUGAR.Contracts.EvaluationDataResponse.html",
    "title": "Class EvaluationDataResponse | SUGAR",
    "keywords": "Class EvaluationDataResponse Encapsulates ActorData/EvaluationData details from the server. Inheritance System.Object EvaluationDataResponse Namespace : PlayGen.SUGAR.Contracts Assembly : PlayGen.SUGAR.Contracts.dll Syntax public class EvaluationDataResponse : object Examples JSON { ActorId : 1, GameId : 1, Key : \"Data Key\", Value : \"10\", EvaluationDataType : \"Long\" } Properties CreatingActorId The id of the Actor which this ActorData/EvaluationData relates to. Declaration public int CreatingActorId { get; set; } Property Value Type Description System.Int32 DateCreated The DateTime at which this data was created. Can be left null for data when this does not apply (summed data totals or counts) Declaration public DateTime? DateCreated { get; set; } Property Value Type Description System.Nullable < DateTime > DateModified The DateTime at which this data was last edited. Can be left null for data when this does not apply (summed data totals or counts) Declaration public DateTime? DateModified { get; set; } Property Value Type Description System.Nullable < DateTime > EvaluationDataType The type of the value for this data. Declaration public EvaluationDataType EvaluationDataType { get; set; } Property Value Type Description EvaluationDataType GameId The id of the Game which this ActorData/EvaluationData relates to. Declaration public int GameId { get; set; } Property Value Type Description System.Int32 Key The identifier of the data. Declaration public string Key { get; set; } Property Value Type Description System.String MatchId Id of the match this data is related to. Declaration public int? MatchId { get; set; } Property Value Type Description System.Nullable < System.Int32 > Value The value of the data. Declaration public string Value { get; set; } Property Value Type Description System.String"
  },
  "api/PlayGen.SUGAR.Contracts.EvaluationProgressResponse.html": {
    "href": "api/PlayGen.SUGAR.Contracts.EvaluationProgressResponse.html",
    "title": "Class EvaluationProgressResponse | SUGAR",
    "keywords": "Class EvaluationProgressResponse Encapsulates current progress to completing an achievement. Inheritance System.Object EvaluationProgressResponse Namespace : PlayGen.SUGAR.Contracts Assembly : PlayGen.SUGAR.Contracts.dll Syntax public class EvaluationProgressResponse : object Examples JSON { Actor : [{ Id : 1, Name : \"Name\" }], Name : \"Achievement Unlocked\", Progress : 0 } Properties Actor The details of the actor whose progress was being checked. Declaration public ActorResponse Actor { get; set; } Property Value Type Description ActorResponse Description The description of the achievement/skill which progress was being checked for. Declaration public string Description { get; set; } Property Value Type Description System.String Name The name of the achievement/skill which progress was being checked for. Declaration public string Name { get; set; } Property Value Type Description System.String Progress Progress of current achievement/skill [0 to 1]. Declaration public float Progress { get; set; } Property Value Type Description System.Single Token The token of the achievement/skill which progress was being checked for. Declaration public string Token { get; set; } Property Value Type Description System.String Type Skill or Achievement Declaration public EvaluationType Type { get; set; } Property Value Type Description EvaluationType Extension Methods EvaluationEventsExtensions.ToNotification(EvaluationProgressResponse)"
  },
  "api/PlayGen.SUGAR.Contracts.ResponseWrapper-1.html": {
    "href": "api/PlayGen.SUGAR.Contracts.ResponseWrapper-1.html",
    "title": "Class ResponseWrapper<TResponse> | SUGAR",
    "keywords": "Class ResponseWrapper<TResponse> Inheritance System.Object ResponseWrapper<TResponse> Namespace : PlayGen.SUGAR.Contracts Assembly : PlayGen.SUGAR.Contracts.dll Syntax public class ResponseWrapper<TResponse> : object Type Parameters Name Description TResponse Properties EvaluationsProgress Declaration public List<EvaluationProgressResponse> EvaluationsProgress { get; set; } Property Value Type Description List < EvaluationProgressResponse > Response Declaration public TResponse Response { get; set; } Property Value Type Description TResponse"
  },
  "api/PlayGen.SUGAR.Server.WebAPI.Filters.SessionFilter.html": {
    "href": "api/PlayGen.SUGAR.Server.WebAPI.Filters.SessionFilter.html",
    "title": "Class SessionFilter | SUGAR",
    "keywords": "Class SessionFilter Ensures the requestor has a valid session. Inheritance System.Object SessionFilter Namespace : PlayGen.SUGAR.Server.WebAPI.Filters Assembly : PlayGen.SUGAR.Server.WebAPI.dll Syntax public class SessionFilter : IAuthorizationFilter Constructors SessionFilter(SessionTracker) Declaration public SessionFilter(SessionTracker sessionTracker) Parameters Type Name Description SessionTracker sessionTracker Methods OnAuthorization(AuthorizationFilterContext) Declaration public void OnAuthorization(AuthorizationFilterContext context) Parameters Type Name Description AuthorizationFilterContext context"
  },
  "unity-client/api/PlayGen.SUGAR.Unity.BaseUserGroupInterface.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.BaseUserGroupInterface.html",
    "title": "Class BaseUserGroupInterface | SUGAR",
    "keywords": "Class BaseUserGroupInterface Base abstract class for controlling the UI object related to user groups. Inheritance System.Object BaseInterface BaseUserGroupInterface Inherited Members BaseInterface._errorText BaseInterface._closeButton BaseInterface._signinButton BaseInterface.Awake() BaseInterface.PreDisplay() BaseInterface.Show(Boolean) BaseInterface.Draw() BaseInterface.ErrorDraw(Boolean) BaseInterface.OnSignIn() Namespace : PlayGen.SUGAR.Unity Assembly : PlayGen.SUGAR.Unity.dll Syntax public abstract class BaseUserGroupInterface : BaseInterface Methods GetGroups() Get and display the list of groups the currently signed in user is in. Declaration protected void GetGroups() GetPendingSent() Get and display the list of groups the currently signed in user has applied to join. Declaration protected void GetPendingSent() GetSearchResults(String) Get and display the list of groups that match the search string provided. Declaration protected void GetSearchResults(string search) Parameters Type Name Description System.String search HideInterfaces() Hides Account, Evaluation, Leaderboard, GameLeaderboard and UserFriend UI objects. Declaration protected override void HideInterfaces() Overrides BaseInterface.HideInterfaces() LoadErrorText() Get error string from Localization with key \"GROUPS_LOAD_ERROR\" if there were issues loading the group list. Declaration protected override string LoadErrorText() Returns Type Description System.String Overrides BaseInterface.LoadErrorText() NoResultsErrorText() Get error string from Localization with key \"NO_RESULTS_ERROR\" if there were no groups to display. Declaration protected override string NoResultsErrorText() Returns Type Description System.String Overrides BaseInterface.NoResultsErrorText()"
  },
  "unity-client/api/PlayGen.SUGAR.Unity.CommandLineOptions.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.CommandLineOptions.html",
    "title": "Class CommandLineOptions | SUGAR",
    "keywords": "Class CommandLineOptions Inheritance System.Object CommandLineOptions Namespace : PlayGen.SUGAR.Unity Assembly : PlayGen.SUGAR.Unity.dll Syntax public class CommandLineOptions : object Properties AuthenticationSource Declaration public string AuthenticationSource { get; set; } Property Value Type Description System.String AutoLogin Declaration public bool AutoLogin { get; set; } Property Value Type Description System.Boolean ClassId Declaration public string ClassId { get; set; } Property Value Type Description System.String Custom Declaration public string Custom { get; set; } Property Value Type Description System.String Password Declaration public string Password { get; set; } Property Value Type Description System.String UserId Declaration public string UserId { get; set; } Property Value Type Description System.String"
  },
  "unity-client/api/PlayGen.SUGAR.Unity.CommandLineUtility.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.CommandLineUtility.html",
    "title": "Class CommandLineUtility | SUGAR",
    "keywords": "Class CommandLineUtility Inheritance System.Object CommandLineUtility Namespace : PlayGen.SUGAR.Unity Assembly : PlayGen.SUGAR.Unity.dll Syntax public static class CommandLineUtility : object Fields CustomArgs Declaration public static Dictionary<string, string> CustomArgs Field Value Type Description Dictionary < System.String , System.String > Methods ParseArgs(String[]) Declaration public static CommandLineOptions ParseArgs(string[] args) Parameters Type Name Description System.String [] args Returns Type Description CommandLineOptions"
  },
  "unity-client/api/PlayGen.SUGAR.Unity.Config.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.Config.html",
    "title": "Class Config | SUGAR",
    "keywords": "Class Config Inheritance System.Object Config Namespace : PlayGen.SUGAR.Unity Assembly : PlayGen.SUGAR.Unity.dll Syntax public class Config : object Properties BaseUri Declaration public string BaseUri { get; set; } Property Value Type Description System.String"
  },
  "unity-client/api/PlayGen.SUGAR.Unity.WebGL.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.WebGL.html",
    "title": "Namespace PlayGen.SUGAR.Unity.WebGL | SUGAR",
    "keywords": "Namespace PlayGen.SUGAR.Unity.WebGL Classes UnityWebGlHttpHandler"
  },
  "unity-client/api/PlayGen.SUGAR.Unity.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.html",
    "title": "Namespace PlayGen.SUGAR.Unity | SUGAR",
    "keywords": "Namespace PlayGen.SUGAR.Unity Classes AccountUnityClient Use this to Sign In, Register, Logout and manage other account functionality ActorResponseAllowableActions ActorResponse with additional information on if the current user can add and remove them. BaseAccountInterface Base abstract class for controlling the interface related to Account functionality. BaseEvaluationListInterface Base abstract class for controlling the interface related to displaying evaluation progress. BaseEvaluationPopupInterface Base abstract class for controlling the interface related to display evaluation notifications when an evalaution is completed. BaseGroupMemberInterface Base abstract class for controlling the UI object related to group member lists. BaseInterface Base abstract class for controlling UI objects BaseLeaderboardInterface Base abstract class for controlling the interface related to displaying the latest standings for a leaderboard. BaseLeaderboardListInterface Base abstract class for controlling the interface related to displaying a list of leaderboards. BaseUnityClient<T> Base abstract class for UnityClient classes BaseUserFriendInterface Base abstract class for controlling the UI object related to friends lists BaseUserGroupInterface Base abstract class for controlling the UI object related to user groups. CommandLineOptions CommandLineUtility Config CustomInterface EvaluationUnityClient Use this for gathering evaluation progress and notifications when an evaluation is completed. GameDataUnityClient Use this to GET and POST data related to the game. GroupMemberUnityClient Use this for actions related to group member lists. LeaderboardListUnityClient Use this to get a list of leaderboards for this game LeaderboardUnityClient Use this to get the current standings for a leaderboard ResourceUnityClient Use this to get current resources, add resources and send resources to other users ResponseHandler SavedPrefsHandler SUGARManager Access point for SUGAR related classes. SUGARUnityManager Class for managing Unity elements of the asset UserFriendUnityClient Use this to get current user's list of friends and send and handle friend requests and other friend related actions UserGroupUnityClient Use this to get current user's list of groups and send and handle group requests"
  },
  "api/PlayGen.SUGAR.Client.APIVersionClient.html": {
    "href": "api/PlayGen.SUGAR.Client.APIVersionClient.html",
    "title": "Class APIVersionClient | SUGAR",
    "keywords": "Class APIVersionClient Controller that facilitates API version specific operations. Inheritance System.Object ClientBase APIVersionClient Inherited Members ClientBase.AsyncRequestController ClientBase.EvaluationNotifications ClientBase.SerializerSettings ClientBase.EnableEvaluationNotifications(Boolean) ClientBase.ClearSessionData() ClientBase.AreUriParamsValid(Object[]) ClientBase.GetUriBuilder(String, Object[]) ClientBase.Post<TRequest, TResponse>(String, TRequest, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Post<TRequest>(String, TRequest, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Post<TResponse>(String, Object, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Put<TRequest, TResponse>(String, TRequest, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Put<TRequest>(String, TRequest, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.PostPut<TResponse>(String, String, Dictionary<String, String>, Object, IEnumerable<HttpStatusCode>) ClientBase.PostPut(String, String, Dictionary<String, String>, Object, IEnumerable<HttpStatusCode>) ClientBase.Get<TResponse>(String, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Get(String, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Delete<TResponse>(String, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Delete(String, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.GetDelete<TResponse>(String, String, Dictionary<String, String>, IEnumerable<HttpStatusCode>) ClientBase.GetDelete(String, String, Dictionary<String, String>, IEnumerable<HttpStatusCode>) Namespace : PlayGen.SUGAR.Client Assembly : PlayGen.SUGAR.Client.dll Syntax public class APIVersionClient : ClientBase Constructors APIVersionClient(String, IHttpHandler, Dictionary<String, String>, Dictionary<String, String>, IAsyncRequestController, EvaluationNotifications) Declaration public APIVersionClient(string baseAddress, IHttpHandler httpHandler, Dictionary<string, string> constantHeaders, Dictionary<string, string> sessionHeaders, IAsyncRequestController asyncRequestController, EvaluationNotifications evaluationNotifications) Parameters Type Name Description System.String baseAddress IHttpHandler httpHandler Dictionary < System.String , System.String > constantHeaders Dictionary < System.String , System.String > sessionHeaders IAsyncRequestController asyncRequestController EvaluationNotifications evaluationNotifications Methods Get() Declaration public string Get() Returns Type Description System.String GetAsync(Action<String>, Action<Exception>) Declaration public void GetAsync(Action<string> onSuccess, Action<Exception> onError) Parameters Type Name Description Action < System.String > onSuccess Action < Exception > onError"
  },
  "api/PlayGen.SUGAR.Server.Core.EvaluationEvents.html": {
    "href": "api/PlayGen.SUGAR.Server.Core.EvaluationEvents.html",
    "title": "Namespace PlayGen.SUGAR.Server.Core.EvaluationEvents | SUGAR",
    "keywords": "Namespace PlayGen.SUGAR.Server.Core.EvaluationEvents Classes ConcurrentProgressCache CriteriaEvaluator Evaluates evaluation criteria. EvaluationDataMapper Mappings of game data keys to evaluations with criteria that make use of the specific keys. EvaluationProgress EvaluationTracker ProgressEvaluator ProgressNotificationCache Check newly evaluated progress and store notifications for values of any significance StandingsRequest StandingsResponse"
  },
  "api/PlayGen.SUGAR.Server.Core.Exceptions.InvalidAccountDetailsException.html": {
    "href": "api/PlayGen.SUGAR.Server.Core.Exceptions.InvalidAccountDetailsException.html",
    "title": "Class InvalidAccountDetailsException | SUGAR",
    "keywords": "Class InvalidAccountDetailsException Inheritance System.Object InvalidAccountDetailsException Namespace : PlayGen.SUGAR.Server.Core.Exceptions Assembly : PlayGen.SUGAR.Server.Core.dll Syntax public class InvalidAccountDetailsException : Exception Constructors InvalidAccountDetailsException() Declaration public InvalidAccountDetailsException() InvalidAccountDetailsException(String) Declaration public InvalidAccountDetailsException(string message) Parameters Type Name Description System.String message InvalidAccountDetailsException(String, Exception) Declaration public InvalidAccountDetailsException(string message, Exception inner) Parameters Type Name Description System.String message Exception inner"
  },
  "api/PlayGen.SUGAR.Server.EntityFramework.Controllers.ActorDataController.html": {
    "href": "api/PlayGen.SUGAR.Server.EntityFramework.Controllers.ActorDataController.html",
    "title": "Class ActorDataController | SUGAR",
    "keywords": "Class ActorDataController Inheritance System.Object DbController ActorDataController Inherited Members DbController.ContextFactory Namespace : PlayGen.SUGAR.Server.EntityFramework.Controllers Assembly : PlayGen.SUGAR.Server.EntityFramework.dll Syntax public class ActorDataController : DbController Constructors ActorDataController(SUGARContextFactory) Declaration public ActorDataController(SUGARContextFactory contextFactory) Parameters Type Name Description SUGARContextFactory contextFactory Methods Create(ActorData) Declaration public ActorData Create(ActorData data) Parameters Type Name Description ActorData data Returns Type Description ActorData Get(Int32, Int32, ICollection<String>) Declaration public List<ActorData> Get(int gameId, int actorId, ICollection<string> keys = null) Parameters Type Name Description System.Int32 gameId System.Int32 actorId ICollection < System.String > keys Returns Type Description List < ActorData > KeyExists(Int32, Int32, String) Declaration public bool KeyExists(int gameId, int actorId, string key) Parameters Type Name Description System.Int32 gameId System.Int32 actorId System.String key Returns Type Description System.Boolean Update(ActorData) Declaration public void Update(ActorData updatedData) Parameters Type Name Description ActorData updatedData"
  },
  "api/PlayGen.SUGAR.Server.EntityFramework.Controllers.ActorRoleController.html": {
    "href": "api/PlayGen.SUGAR.Server.EntityFramework.Controllers.ActorRoleController.html",
    "title": "Class ActorRoleController | SUGAR",
    "keywords": "Class ActorRoleController Inheritance System.Object DbController ActorRoleController Inherited Members DbController.ContextFactory Namespace : PlayGen.SUGAR.Server.EntityFramework.Controllers Assembly : PlayGen.SUGAR.Server.EntityFramework.dll Syntax public class ActorRoleController : DbController Constructors ActorRoleController(SUGARContextFactory) Declaration public ActorRoleController(SUGARContextFactory contextFactory) Parameters Type Name Description SUGARContextFactory contextFactory Methods Create(ActorRole, SUGARContext) Declaration public ActorRole Create(ActorRole actorRole, SUGARContext context = null) Parameters Type Name Description ActorRole actorRole SUGARContext context Returns Type Description ActorRole Delete(Int32) Declaration public void Delete(int id) Parameters Type Name Description System.Int32 id Get(Int32) Declaration public ActorRole Get(int id) Parameters Type Name Description System.Int32 id Returns Type Description ActorRole GetActorRoles(Int32, Boolean) Declaration public List<ActorRole> GetActorRoles(int actorId, bool includeClaims = false) Parameters Type Name Description System.Int32 actorId System.Boolean includeClaims Returns Type Description List < ActorRole > GetActorRolesForEntity(Int32, Int32, ClaimScope, Boolean) Declaration public List<ActorRole> GetActorRolesForEntity(int actorId, int entityId, ClaimScope scope, bool includeClaims = false) Parameters Type Name Description System.Int32 actorId System.Int32 entityId ClaimScope scope System.Boolean includeClaims Returns Type Description List < ActorRole > GetRoleActors(Int32, Int32) Declaration public List<Actor> GetRoleActors(int roleId, int entityId) Parameters Type Name Description System.Int32 roleId System.Int32 entityId Returns Type Description List < Actor >"
  },
  "api/PlayGen.SUGAR.Server.EntityFramework.Controllers.ClaimController.html": {
    "href": "api/PlayGen.SUGAR.Server.EntityFramework.Controllers.ClaimController.html",
    "title": "Class ClaimController | SUGAR",
    "keywords": "Class ClaimController Inheritance System.Object DbController ClaimController Inherited Members DbController.ContextFactory Namespace : PlayGen.SUGAR.Server.EntityFramework.Controllers Assembly : PlayGen.SUGAR.Server.EntityFramework.dll Syntax public class ClaimController : DbController Constructors ClaimController(SUGARContextFactory) Declaration public ClaimController(SUGARContextFactory contextFactory) Parameters Type Name Description SUGARContextFactory contextFactory Methods Create(List<Claim>) Declaration public List<Claim> Create(List<Claim> claims) Parameters Type Name Description List < Claim > claims Returns Type Description List < Claim > Get() Declaration public List<Claim> Get() Returns Type Description List < Claim > Get(ClaimScope, String) Declaration public Claim Get(ClaimScope scope, string name) Parameters Type Name Description ClaimScope scope System.String name Returns Type Description Claim Get(Int32) Declaration public Claim Get(int id) Parameters Type Name Description System.Int32 id Returns Type Description Claim"
  },
  "api/PlayGen.SUGAR.Server.EntityFramework.Controllers.DbController.html": {
    "href": "api/PlayGen.SUGAR.Server.EntityFramework.Controllers.DbController.html",
    "title": "Class DbController | SUGAR",
    "keywords": "Class DbController Inheritance System.Object DbController AccountController AccountSourceController ActorClaimController ActorController ActorDataController ActorRoleController ClaimController EvaluationController EvaluationDataController GameController GroupController LeaderboardController MatchController RelationshipController RoleClaimController RoleController UserController Namespace : PlayGen.SUGAR.Server.EntityFramework.Controllers Assembly : PlayGen.SUGAR.Server.EntityFramework.dll Syntax public abstract class DbController : object Constructors DbController(SUGARContextFactory) Declaration protected DbController(SUGARContextFactory contextFactory) Parameters Type Name Description SUGARContextFactory contextFactory Fields ContextFactory Declaration protected readonly SUGARContextFactory ContextFactory Field Value Type Description SUGARContextFactory"
  },
  "api/PlayGen.SUGAR.Server.EntityFramework.EntityConfigs.ActorConfig.html": {
    "href": "api/PlayGen.SUGAR.Server.EntityFramework.EntityConfigs.ActorConfig.html",
    "title": "Class ActorConfig | SUGAR",
    "keywords": "Class ActorConfig Inheritance System.Object ActorConfig Namespace : PlayGen.SUGAR.Server.EntityFramework.EntityConfigs Assembly : PlayGen.SUGAR.Server.EntityFramework.dll Syntax public class ActorConfig : IEntityTypeConfiguration<Actor> Methods Configure(EntityTypeBuilder<Actor>) Declaration public void Configure(EntityTypeBuilder<Actor> builder) Parameters Type Name Description EntityTypeBuilder < Actor > builder"
  },
  "api/PlayGen.SUGAR.Server.EntityFramework.EntityConfigs.ActorDataConfig.html": {
    "href": "api/PlayGen.SUGAR.Server.EntityFramework.EntityConfigs.ActorDataConfig.html",
    "title": "Class ActorDataConfig | SUGAR",
    "keywords": "Class ActorDataConfig Inheritance System.Object ActorDataConfig Namespace : PlayGen.SUGAR.Server.EntityFramework.EntityConfigs Assembly : PlayGen.SUGAR.Server.EntityFramework.dll Syntax public class ActorDataConfig : IEntityTypeConfiguration<ActorData> Methods Configure(EntityTypeBuilder<ActorData>) Declaration public void Configure(EntityTypeBuilder<ActorData> builder) Parameters Type Name Description EntityTypeBuilder < ActorData > builder"
  },
  "api/PlayGen.SUGAR.Server.WebAPI.Controllers.SkillsController.html": {
    "href": "api/PlayGen.SUGAR.Server.WebAPI.Controllers.SkillsController.html",
    "title": "Class SkillsController | SUGAR",
    "keywords": "Class SkillsController Web Controller that facilitates Skill specific operations. Inheritance System.Object EvaluationsController SkillsController Inherited Members EvaluationsController._authorizationService EvaluationsController.EvaluationCoreController EvaluationsController.Get(Int32, EvaluationType) EvaluationsController.Get(String, Int32, EvaluationType) EvaluationsController.GetGameProgress(Int32, Int32, EvaluationType) EvaluationsController.GetEvaluationProgress(String, Int32, Int32, EvaluationType) EvaluationsController.Delete(String, Int32, EvaluationType) Namespace : PlayGen.SUGAR.Server.WebAPI.Controllers Assembly : PlayGen.SUGAR.Server.WebAPI.dll Syntax public class SkillsController : EvaluationsController Constructors SkillsController(EvaluationController, EvaluationTracker, IAuthorizationService) Declaration public SkillsController(EvaluationController evaluationCoreController, EvaluationTracker evaluationTracker, IAuthorizationService authorizationService) Parameters Type Name Description EvaluationController evaluationCoreController EvaluationTracker evaluationTracker IAuthorizationService authorizationService Methods Create(EvaluationCreateRequest) Create a new Skill. Requires Name to be unique to that GameId . Example Usage: POST api/skills/create Declaration public Task<IActionResult> Create(EvaluationCreateRequest newSkill) Parameters Type Name Description EvaluationCreateRequest newSkill EvaluationCreateRequest object that holds the details of the new Skill. Returns Type Description Task < IActionResult > Returns a EvaluationResponse object containing details for the newly created Skill. Delete(String, Int32) Delete Skill with the and provided. Example Usage: DELETE api/skills/SKILL_TOKEN/1 Declaration public Task<IActionResult> Delete(string token, int gameId) Parameters Type Name Description System.String token Token of Skill System.Int32 gameId ID of the Game the Skill is for Returns Type Description Task < IActionResult > Get(Int32) Find a list of Skills that match . If global is provided instead of a gameId, get all global skills, ie. skills that are not associated with a specific game. Example Usage: GET api/skills/game/1/list Declaration public Task<IActionResult> Get(int gameId) Parameters Type Name Description System.Int32 gameId Game ID Returns Type Description Task < IActionResult > Returns multiple EvaluationResponse that hold Skill details Get(String, Int32) Find a Skill that matches and . Example Usage: GET api/skills/find/SKILL_TOKEN/1 Declaration public Task<IActionResult> Get(string token, int gameId) Parameters Type Name Description System.String token Token of Skill System.Int32 gameId ID of the Game the Skill is for Returns Type Description Task < IActionResult > Returns EvaluationResponse that holds Skill details GetGameProgress(Int32, Int32) Find the current progress for all skills for a for . Example Usage: GET api/skills/game/1/evaluate/1 Declaration public IActionResult GetGameProgress(int gameId, int actorId) Parameters Type Name Description System.Int32 gameId ID of Game System.Int32 actorId ID of Group/User Returns Type Description IActionResult Returns multiple EvaluationProgressResponse that hold current progress toward skill. GetSkillProgress(String, Int32, Int32) Find the current progress for a Skill for . Example Usage: GET api/skills/SKILL_TOKEN/1/evaluate/1 Declaration public IActionResult GetSkillProgress(string token, int gameId, int actorId) Parameters Type Name Description System.String token Token of Skill System.Int32 gameId ID of the Game the Skill is for System.Int32 actorId ID of Group/User Returns Type Description IActionResult Returns multiple EvaluationProgressResponse that hold current progress toward skill. Update(EvaluationUpdateRequest) Update an existing Skill. Example Usage: PUT api/skills/update Declaration public Task<IActionResult> Update(EvaluationUpdateRequest skill) Parameters Type Name Description EvaluationUpdateRequest skill EvaluationCreateRequest object that holds the details of the Skill. Returns Type Description Task < IActionResult >"
  },
  "api/PlayGen.SUGAR.Contracts.EvaluationDataRequest.html": {
    "href": "api/PlayGen.SUGAR.Contracts.EvaluationDataRequest.html",
    "title": "Class EvaluationDataRequest | SUGAR",
    "keywords": "Class EvaluationDataRequest Encapsulates ActorData/EvaluationData details. Inheritance System.Object EvaluationDataRequest Namespace : PlayGen.SUGAR.Contracts Assembly : PlayGen.SUGAR.Contracts.dll Syntax public class EvaluationDataRequest : object Examples JSON { ActorId : 1, GameId : 1, Key : \"Data Key\", Value : \"10\", EvaluationDataType : \"Long\" } Properties CreatingActorId The id of the Actor which this ActorData/EvaluationData is being ensigned to. Declaration public int? CreatingActorId { get; set; } Property Value Type Description System.Nullable < System.Int32 > EvaluationDataType The type of data which is being stored. Declaration public EvaluationDataType? EvaluationDataType { get; set; } Property Value Type Description System.Nullable < EvaluationDataType > GameId The id of the Game which this ActorData/EvaluationData relates to. Declaration public int? GameId { get; set; } Property Value Type Description System.Nullable < System.Int32 > Key The identifier of the data being stored. Declaration public string Key { get; set; } Property Value Type Description System.String MatchId Id of the match this data is related to. Declaration public int? MatchId { get; set; } Property Value Type Description System.Nullable < System.Int32 > Value The value of the data being stored. Declaration public string Value { get; set; } Property Value Type Description System.String Extension Methods ActorDataExtensions.ToActorDataModel(EvaluationDataRequest) GameDataExtensions.ToGameDataModel(EvaluationDataRequest) MatchExtensions.ToMatchDataModel(EvaluationDataRequest)"
  },
  "api/PlayGen.SUGAR.Server.Authorization.AuthorizationAttribute.html": {
    "href": "api/PlayGen.SUGAR.Server.Authorization.AuthorizationAttribute.html",
    "title": "Class AuthorizationAttribute | SUGAR",
    "keywords": "Class AuthorizationAttribute Inheritance System.Object AuthorizationAttribute Namespace : PlayGen.SUGAR.Server.Authorization Assembly : PlayGen.SUGAR.Server.Authorization.dll Syntax public class AuthorizationAttribute : ActionFilterAttribute Constructors AuthorizationAttribute(ClaimScope, AuthorizationAction, AuthorizationEntity) Declaration public AuthorizationAttribute(ClaimScope claimScope, AuthorizationAction action, AuthorizationEntity entity) Parameters Type Name Description ClaimScope claimScope AuthorizationAction action AuthorizationEntity entity Properties ClaimScope Declaration public ClaimScope ClaimScope { get; set; } Property Value Type Description ClaimScope Name Declaration public string Name { get; set; } Property Value Type Description System.String Methods OnActionExecuting(ActionExecutingContext) Declaration public override void OnActionExecuting(ActionExecutingContext context) Parameters Type Name Description ActionExecutingContext context"
  },
  "api/PlayGen.SUGAR.Server.EntityFramework.Exceptions.DuplicateRelationshipException.html": {
    "href": "api/PlayGen.SUGAR.Server.EntityFramework.Exceptions.DuplicateRelationshipException.html",
    "title": "Class DuplicateRelationshipException | SUGAR",
    "keywords": "Class DuplicateRelationshipException Inheritance System.Object DuplicateRelationshipException Namespace : PlayGen.SUGAR.Server.EntityFramework.Exceptions Assembly : PlayGen.SUGAR.Server.EntityFramework.dll Syntax public class DuplicateRelationshipException : Exception Constructors DuplicateRelationshipException() Declaration public DuplicateRelationshipException() DuplicateRelationshipException(String) Declaration public DuplicateRelationshipException(string message) Parameters Type Name Description System.String message DuplicateRelationshipException(String, Exception) Declaration public DuplicateRelationshipException(string message, Exception innerException) Parameters Type Name Description System.String message Exception innerException"
  },
  "api/PlayGen.SUGAR.Server.EntityFramework.Migrations.html": {
    "href": "api/PlayGen.SUGAR.Server.EntityFramework.Migrations.html",
    "title": "Namespace PlayGen.SUGAR.Server.EntityFramework.Migrations | SUGAR",
    "keywords": "Namespace PlayGen.SUGAR.Server.EntityFramework.Migrations Classes GenericRelationships InitialCreate MemberCountAndAllianceCount"
  },
  "api/PlayGen.SUGAR.Server.EntityFramework.SUGARContext.html": {
    "href": "api/PlayGen.SUGAR.Server.EntityFramework.SUGARContext.html",
    "title": "Class SUGARContext | SUGAR",
    "keywords": "Class SUGARContext Entity Framework Database Configuration Inheritance System.Object SUGARContext Namespace : PlayGen.SUGAR.Server.EntityFramework Assembly : PlayGen.SUGAR.Server.EntityFramework.dll Syntax public class SUGARContext : DbContext Constructors SUGARContext(DbContextOptions<SUGARContext>, Boolean) Declaration public SUGARContext(DbContextOptions<SUGARContext> options, bool isReadOnly = false) Parameters Type Name Description DbContextOptions < SUGARContext > options System.Boolean isReadOnly Properties Accounts Declaration public DbSet<Account> Accounts { get; set; } Property Value Type Description DbSet < Account > AccountSources Declaration public DbSet<AccountSource> AccountSources { get; set; } Property Value Type Description DbSet < AccountSource > Achievements Declaration public DbSet<Achievement> Achievements { get; set; } Property Value Type Description DbSet < Achievement > ActorClaims Declaration public DbSet<ActorClaim> ActorClaims { get; set; } Property Value Type Description DbSet < ActorClaim > ActorData Declaration public DbSet<ActorData> ActorData { get; set; } Property Value Type Description DbSet < ActorData > ActorRoles Declaration public DbSet<ActorRole> ActorRoles { get; set; } Property Value Type Description DbSet < ActorRole > Actors Declaration public DbSet<Actor> Actors { get; set; } Property Value Type Description DbSet < Actor > Claims Declaration public DbSet<Claim> Claims { get; set; } Property Value Type Description DbSet < Claim > EvaluationData Declaration public DbSet<EvaluationData> EvaluationData { get; set; } Property Value Type Description DbSet < EvaluationData > Evaluations Declaration public DbSet<Evaluation> Evaluations { get; set; } Property Value Type Description DbSet < Evaluation > Games Declaration public DbSet<Game> Games { get; set; } Property Value Type Description DbSet < Game > Groups Declaration public DbSet<Group> Groups { get; set; } Property Value Type Description DbSet < Group > Leaderboards Declaration public DbSet<Leaderboard> Leaderboards { get; set; } Property Value Type Description DbSet < Leaderboard > Matches Declaration public DbSet<Match> Matches { get; set; } Property Value Type Description DbSet < Match > RelationshipRequests Declaration public DbSet<ActorRelationshipRequest> RelationshipRequests { get; set; } Property Value Type Description DbSet < ActorRelationshipRequest > Relationships Declaration public DbSet<ActorRelationship> Relationships { get; set; } Property Value Type Description DbSet < ActorRelationship > RoleClaims Declaration public DbSet<RoleClaim> RoleClaims { get; set; } Property Value Type Description DbSet < RoleClaim > Roles Declaration public DbSet<Role> Roles { get; set; } Property Value Type Description DbSet < Role > SentEvaluationNotifications Declaration public DbSet<SentEvaluationNotification> SentEvaluationNotifications { get; set; } Property Value Type Description DbSet < SentEvaluationNotification > Skills Declaration public DbSet<Skill> Skills { get; set; } Property Value Type Description DbSet < Skill > Users Declaration public DbSet<User> Users { get; set; } Property Value Type Description DbSet < User > Methods OnModelCreating(ModelBuilder) Declaration protected override void OnModelCreating(ModelBuilder modelBuilder) Parameters Type Name Description ModelBuilder modelBuilder SaveChanges(Boolean) Declaration public override int SaveChanges(bool acceptAllChangesOnSuccess = true) Parameters Type Name Description System.Boolean acceptAllChangesOnSuccess Returns Type Description System.Int32 Extension Methods ActorDataExtensions.FilterByIds(SUGARContext, List<Int32>) ActorDataExtensions.FilterByActorId(SUGARContext, Int32) ContextExtensions.MigrateAndSeed(SUGARContext) ContextExtensions.HandleDetatchedGame(SUGARContext, Int32) ContextExtensions.HandleDetatchedActor(SUGARContext, Int32) ContextExtensions.HandleDetatchedActor(SUGARContext, Actor) ContextExtensions.HandleDetatchedEvaluationData(SUGARContext, EvaluationData) EvaluationDataExtensions.GetCategoryData(SUGARContext, EvaluationDataCategory) SUGARContextSeedExtensions.EnsureSeeded(SUGARContext) SUGARContextSeedExtensions.EnsureTestsSeeded(SUGARContext)"
  },
  "api/PlayGen.SUGAR.Server.EntityFramework.SUGARContextFactory.html": {
    "href": "api/PlayGen.SUGAR.Server.EntityFramework.SUGARContextFactory.html",
    "title": "Class SUGARContextFactory | SUGAR",
    "keywords": "Class SUGARContextFactory Inheritance System.Object SUGARContextFactory Namespace : PlayGen.SUGAR.Server.EntityFramework Assembly : PlayGen.SUGAR.Server.EntityFramework.dll Syntax public class SUGARContextFactory : object Constructors SUGARContextFactory(String) Declaration public SUGARContextFactory(string connectionString = null) Parameters Type Name Description System.String connectionString Fields ConnectionString Declaration public readonly string ConnectionString Field Value Type Description System.String Methods ApplyOptions(DbContextOptionsBuilder) Declaration public DbContextOptionsBuilder ApplyOptions(DbContextOptionsBuilder options) Parameters Type Name Description DbContextOptionsBuilder options Returns Type Description DbContextOptionsBuilder Create() Declaration public SUGARContext Create() Returns Type Description SUGARContext CreateReadOnly() Declaration public SUGARContext CreateReadOnly() Returns Type Description SUGARContext"
  },
  "api/PlayGen.SUGAR.Server.Authentication.Extensions.html": {
    "href": "api/PlayGen.SUGAR.Server.Authentication.Extensions.html",
    "title": "Namespace PlayGen.SUGAR.Server.Authentication.Extensions | SUGAR",
    "keywords": "Namespace PlayGen.SUGAR.Server.Authentication.Extensions Classes AuthorizationHeaderExtensions AuthorizationTokenExtensions ClaimsExtensions"
  },
  "api/PlayGen.SUGAR.Server.Core.Authorization.AuthorizationHandlerWithoutEntity.html": {
    "href": "api/PlayGen.SUGAR.Server.Core.Authorization.AuthorizationHandlerWithoutEntity.html",
    "title": "Class AuthorizationHandlerWithoutEntity | SUGAR",
    "keywords": "Class AuthorizationHandlerWithoutEntity Inheritance System.Object AuthorizationHandlerWithoutEntity Namespace : PlayGen.SUGAR.Server.Core.Authorization Assembly : PlayGen.SUGAR.Server.Core.dll Syntax public class AuthorizationHandlerWithoutEntity : AuthorizationHandler<AuthorizationRequirement, ClaimScope> Constructors AuthorizationHandlerWithoutEntity(ActorClaimController, ClaimController) Declaration public AuthorizationHandlerWithoutEntity(ActorClaimController actorClaimDbController, ClaimController claimDbController) Parameters Type Name Description ActorClaimController actorClaimDbController ClaimController claimDbController Methods HandleRequirementAsync(AuthorizationHandlerContext, AuthorizationRequirement, ClaimScope) Declaration protected override Task HandleRequirementAsync(AuthorizationHandlerContext context, AuthorizationRequirement requirement, ClaimScope scope) Parameters Type Name Description AuthorizationHandlerContext context AuthorizationRequirement requirement ClaimScope scope Returns Type Description Task"
  },
  "api/PlayGen.SUGAR.Server.Core.Authorization.ClaimController.html": {
    "href": "api/PlayGen.SUGAR.Server.Core.Authorization.ClaimController.html",
    "title": "Class ClaimController | SUGAR",
    "keywords": "Class ClaimController Inheritance System.Object ClaimController Namespace : PlayGen.SUGAR.Server.Core.Authorization Assembly : PlayGen.SUGAR.Server.Core.dll Syntax public class ClaimController : object Constructors ClaimController(ClaimController, RoleController, RoleClaimController) Declaration public ClaimController(ClaimController claimDbController, RoleController roleDbController, RoleClaimController roleClaimDbController) Parameters Type Name Description ClaimController claimDbController RoleController roleDbController RoleClaimController roleClaimDbController Methods Get(ClaimScope, String) Declaration public Claim Get(ClaimScope scope, string name) Parameters Type Name Description ClaimScope scope System.String name Returns Type Description Claim Get(Int32) Declaration public Claim Get(int id) Parameters Type Name Description System.Int32 id Returns Type Description Claim GetAuthorizationClaims() Declaration public void GetAuthorizationClaims()"
  },
  "api/PlayGen.SUGAR.Server.Core.Controllers.RelationshipController.html": {
    "href": "api/PlayGen.SUGAR.Server.Core.Controllers.RelationshipController.html",
    "title": "Class RelationshipController | SUGAR",
    "keywords": "Class RelationshipController Inheritance System.Object RelationshipController Namespace : PlayGen.SUGAR.Server.Core.Controllers Assembly : PlayGen.SUGAR.Server.Core.dll Syntax public class RelationshipController : object Constructors RelationshipController(ILogger<RelationshipController>, ActorClaimController, ActorController, ClaimController, RelationshipController) Declaration public RelationshipController(ILogger<RelationshipController> logger, ActorClaimController actorClaimController, ActorController actorController, ClaimController claimController, RelationshipController relationshipDbController) Parameters Type Name Description ILogger < RelationshipController > logger ActorClaimController actorClaimController ActorController actorController ClaimController claimController RelationshipController relationshipDbController Methods CreateRequest(ActorRelationship, Boolean, SUGARContext) Create a new relationship between actores Declaration public void CreateRequest(ActorRelationship newRelationship, bool autoAccept, SUGARContext context = null) Parameters Type Name Description ActorRelationship newRelationship System.Boolean autoAccept If the relationship is accepted immediately SUGARContext context Optional DbContext to perform opperations on. If ommitted a DbContext will be created. GetRelationshipCount(Int32, ActorType) Get a count of relationships shared between an actor and other actor types Declaration public int GetRelationshipCount(int actorId, ActorType actorType) Parameters Type Name Description System.Int32 actorId The actor to get a list of relationships with ActorType actorType The type of actor that relationship is shared with Returns Type Description System.Int32 GetRelationships(Int32, ActorType) Get relationships shared between an actor and other actor types Declaration public List<Actor> GetRelationships(int actorId, ActorType actorType) Parameters Type Name Description System.Int32 actorId The actor to get list of relationsips with ActorType actorType The tyoe of actor that relationship is shared with Returns Type Description List < Actor > GetRequests(Int32, ActorType) Get relationship requests from an actor type to an actor Declaration public List<Actor> GetRequests(int actorId, ActorType fromActorType) Parameters Type Name Description System.Int32 actorId The recipient of the request ActorType fromActorType The actor type that sent the request Returns Type Description List < Actor > GetSentRequests(Int32, ActorType) Get relationship requests that an actor has sent to an actor type Declaration public List<Actor> GetSentRequests(int actorId, ActorType toActorType) Parameters Type Name Description System.Int32 actorId The actor who has sent requests ActorType toActorType The actor type that has received the requests Returns Type Description List < Actor > Update(ActorRelationship) Update an existing relationship between actors Declaration public void Update(ActorRelationship relationship) Parameters Type Name Description ActorRelationship relationship UpdateRequest(ActorRelationship, Boolean) Update an existing relationship request between actors Declaration public void UpdateRequest(ActorRelationship relationship, bool accepted) Parameters Type Name Description ActorRelationship relationship System.Boolean accepted If the relationship has been accepted by one of the actors"
  },
  "api/PlayGen.SUGAR.Server.WebAPI.Controllers.ActorRoleController.html": {
    "href": "api/PlayGen.SUGAR.Server.WebAPI.Controllers.ActorRoleController.html",
    "title": "Class ActorRoleController | SUGAR",
    "keywords": "Class ActorRoleController Web Controller that facilitates ActorRole specific operations. Inheritance System.Object ActorRoleController Namespace : PlayGen.SUGAR.Server.WebAPI.Controllers Assembly : PlayGen.SUGAR.Server.WebAPI.dll Syntax public class ActorRoleController : Controller Constructors ActorRoleController(ActorRoleController, ActorClaimController, RoleClaimController, RoleController, IAuthorizationService) Declaration public ActorRoleController(ActorRoleController actorRoleCoreController, ActorClaimController actorClaimController, RoleClaimController roleClaimController, RoleController roleController, IAuthorizationService authorizationService) Parameters Type Name Description ActorRoleController actorRoleCoreController ActorClaimController actorClaimController RoleClaimController roleClaimController RoleController roleController IAuthorizationService authorizationService Methods Create(ActorRoleRequest) Create a new ActorRole. Example Usage: POST api/actorrole Declaration public Task<IActionResult> Create(ActorRoleRequest newRole) Parameters Type Name Description ActorRoleRequest newRole ActorRoleRequest object that contains the details of the new ActorRole. Returns Type Description Task < IActionResult > A ActorRoleResponse containing the new ActorRole details. Delete(Int32) Delete ActorRole with the ID provided. Example Usage: DELETE api/actorrole/1 Declaration public Task<IActionResult> Delete(int id) Parameters Type Name Description System.Int32 id ActorRole ID. Returns Type Description Task < IActionResult > GetActorEntityRoles(Int32, Int32, String) Get a list of all Roles for this Actor, ClaimScope and Entity. Example Usage: GET api/actorrole/actor/1/entity/1/claimscope/game Declaration public Task<IActionResult> GetActorEntityRoles(int actorId, int entityId, string scopeName) Parameters Type Name Description System.Int32 actorId System.Int32 entityId System.String scopeName Returns Type Description Task < IActionResult > A list of RoleResponse that hold Role details. GetControlled() Get a list of all Roles this Actor has control over. Example Usage: GET api/actorrole/controlled Declaration public IActionResult GetControlled() Returns Type Description IActionResult A list of RoleResponse that hold Role details. GetRoleActors(Int32, Int32) Get a list of all Actors for this Role and Entity. Example Usage: GET api/actorrole/role/1/entity/1 Declaration public Task<IActionResult> GetRoleActors(int roleId, int entityId) Parameters Type Name Description System.Int32 roleId System.Int32 entityId Returns Type Description Task < IActionResult > A list of ActorResponse that hold Actor details."
  },
  "api/PlayGen.SUGAR.Server.WebAPI.Controllers.AllianceController.html": {
    "href": "api/PlayGen.SUGAR.Server.WebAPI.Controllers.AllianceController.html",
    "title": "Class AllianceController | SUGAR",
    "keywords": "Class AllianceController Web Controller that facilitates Group to Group relationship specific operations. Inheritance System.Object AllianceController Namespace : PlayGen.SUGAR.Server.WebAPI.Controllers Assembly : PlayGen.SUGAR.Server.WebAPI.dll Syntax public class AllianceController : Controller Constructors AllianceController(RelationshipController, IAuthorizationService) Declaration public AllianceController(RelationshipController relationshipController, IAuthorizationService authorizationService) Parameters Type Name Description RelationshipController relationshipController IAuthorizationService authorizationService Methods CreateAllianceRequest(RelationshipRequest) Create a new relationship request between a Group and Group. Requires a relationship between the User and Group to not already exist. Example Usage: POST api/alliance Declaration public Task<IActionResult> CreateAllianceRequest(RelationshipRequest relationship) Parameters Type Name Description RelationshipRequest relationship RelationshipRequest object that holds the details of the new relationship request. Returns Type Description Task < IActionResult > A RelationshipResponse containing the new Relationship details. GetAllianceCount(Int32) Get a count of groups that have a relationship with this . Example Usage: GET api/alliances/count/1 Declaration public IActionResult GetAllianceCount(int groupId) Parameters Type Name Description System.Int32 groupId ID of the group. Returns Type Description IActionResult A count of members in the group that matches the search criteria. GetAllianceRequests(Int32) Get a list of all groups that have relationship requests for this . Example Usage: GET api/alliance/requests/1 Declaration public Task<IActionResult> GetAllianceRequests(int groupId) Parameters Type Name Description System.Int32 groupId ID of the group. Returns Type Description Task < IActionResult > A list of ActorResponse which match the search criteria. GetAlliances(Int32) Get a list of all groups that have relationships with this . Example Usage: GET api/alliance/1 Declaration public IActionResult GetAlliances(int groupId) Parameters Type Name Description System.Int32 groupId ID of the group. Returns Type Description IActionResult A list of ActorResponse which match the search criteria. GetSentRequests(Int32) Get a list of all Groups that have been sent relationship requests for this . Example Usage: GET api/alliance/sentrequests/1 Declaration public Task<IActionResult> GetSentRequests(int groupId) Parameters Type Name Description System.Int32 groupId ID of the group. Returns Type Description Task < IActionResult > A list of ActorResponse which match the search criteria. UpdateAlliance(RelationshipStatusUpdate) Update an existing relationship between and . Requires the relationship to already exist between the User and Group. Example Usage: PUT api/alliance Declaration public Task<IActionResult> UpdateAlliance(RelationshipStatusUpdate relationship) Parameters Type Name Description RelationshipStatusUpdate relationship RelationshipStatusUpdate object that holds the details of the relationship. Returns Type Description Task < IActionResult > UpdateAllianceRequest(RelationshipStatusUpdate) Update an existing relationship request between and . Requires the relationship request to already exist between a Group and Group. Example Usage: PUT api/alliancer/request Declaration public Task<IActionResult> UpdateAllianceRequest(RelationshipStatusUpdate relationship) Parameters Type Name Description RelationshipStatusUpdate relationship RelationshipStatusUpdate object that holds the details of the relationship. Returns Type Description Task < IActionResult >"
  },
  "api/PlayGen.SUGAR.Server.WebAPI.Controllers.EvaluationsController.html": {
    "href": "api/PlayGen.SUGAR.Server.WebAPI.Controllers.EvaluationsController.html",
    "title": "Class EvaluationsController | SUGAR",
    "keywords": "Class EvaluationsController Inheritance System.Object EvaluationsController AchievementsController SkillsController Namespace : PlayGen.SUGAR.Server.WebAPI.Controllers Assembly : PlayGen.SUGAR.Server.WebAPI.dll Syntax public abstract class EvaluationsController : Controller Constructors EvaluationsController(EvaluationController, EvaluationTracker, IAuthorizationService) Declaration protected EvaluationsController(EvaluationController evaluationCoreController, EvaluationTracker evaluationTracker, IAuthorizationService authorizationService) Parameters Type Name Description EvaluationController evaluationCoreController EvaluationTracker evaluationTracker IAuthorizationService authorizationService Fields _authorizationService Declaration protected readonly IAuthorizationService _authorizationService Field Value Type Description IAuthorizationService EvaluationCoreController Declaration protected readonly EvaluationController EvaluationCoreController Field Value Type Description EvaluationController Methods Delete(String, Int32, EvaluationType) Declaration protected Task<IActionResult> Delete(string token, int gameId, EvaluationType evaluationType) Parameters Type Name Description System.String token System.Int32 gameId EvaluationType evaluationType Returns Type Description Task < IActionResult > Get(Int32, EvaluationType) Declaration protected Task<IActionResult> Get(int gameId, EvaluationType evaluationType) Parameters Type Name Description System.Int32 gameId EvaluationType evaluationType Returns Type Description Task < IActionResult > Get(String, Int32, EvaluationType) Declaration protected Task<IActionResult> Get(string token, int gameId, EvaluationType evaluationType) Parameters Type Name Description System.String token System.Int32 gameId EvaluationType evaluationType Returns Type Description Task < IActionResult > GetEvaluationProgress(String, Int32, Int32, EvaluationType) Declaration protected IActionResult GetEvaluationProgress(string token, int gameId, int actorId, EvaluationType evaluationType) Parameters Type Name Description System.String token System.Int32 gameId System.Int32 actorId EvaluationType evaluationType Returns Type Description IActionResult GetGameProgress(Int32, Int32, EvaluationType) Declaration protected IActionResult GetGameProgress(int gameId, int actorId, EvaluationType evaluationType) Parameters Type Name Description System.Int32 gameId System.Int32 actorId EvaluationType evaluationType Returns Type Description IActionResult"
  },
  "api/PlayGen.SUGAR.Server.WebAPI.Extensions.GroupExtensions.html": {
    "href": "api/PlayGen.SUGAR.Server.WebAPI.Extensions.GroupExtensions.html",
    "title": "Class GroupExtensions | SUGAR",
    "keywords": "Class GroupExtensions Inheritance System.Object GroupExtensions Namespace : PlayGen.SUGAR.Server.WebAPI.Extensions Assembly : PlayGen.SUGAR.Server.WebAPI.dll Syntax public static class GroupExtensions : object Methods ToContract(Group) Declaration public static GroupResponse ToContract(this Group groupModel) Parameters Type Name Description Group groupModel Returns Type Description GroupResponse ToContractList(IEnumerable<Group>) Declaration public static IEnumerable<GroupResponse> ToContractList(this IEnumerable<Group> groupModels) Parameters Type Name Description IEnumerable < Group > groupModels Returns Type Description IEnumerable < GroupResponse > ToGroupModel(GroupRequest) Declaration public static Group ToGroupModel(this GroupRequest groupContract) Parameters Type Name Description GroupRequest groupContract Returns Type Description Group"
  },
  "unity-client/api/PlayGen.SUGAR.Unity.ResponseHandler.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.ResponseHandler.html",
    "title": "Class ResponseHandler | SUGAR",
    "keywords": "Class ResponseHandler Inheritance System.Object ResponseHandler Namespace : PlayGen.SUGAR.Unity Assembly : PlayGen.SUGAR.Unity.dll Syntax public class ResponseHandler : MonoBehaviour"
  },
  "api/PlayGen.SUGAR.Common.CriteriaScope.html": {
    "href": "api/PlayGen.SUGAR.Common.CriteriaScope.html",
    "title": "Enum CriteriaScope | SUGAR",
    "keywords": "Enum CriteriaScope Enum for selecting if EvaluationData is to checked against just the actor in question or other actors relating to them (i.e. group members) Namespace : PlayGen.SUGAR.Common Assembly : PlayGen.SUGAR.Common.dll Syntax public enum CriteriaScope : int Fields Name Description Actor Test the criteria against the specified actor RelatedGroups Test the criteria against the specified actors group relations ie. a groups alliances RelatedGroupUsers Test the criteria against the specified actors groups user relations ie. the group members within a groups alliances RelatedUsers Test the criteria against the specified actors user relations ie. a users friends, or a groups members"
  },
  "api/PlayGen.SUGAR.Common.Extensions.DateTimeExtensions.html": {
    "href": "api/PlayGen.SUGAR.Common.Extensions.DateTimeExtensions.html",
    "title": "Class DateTimeExtensions | SUGAR",
    "keywords": "Class DateTimeExtensions Inheritance System.Object DateTimeExtensions Namespace : PlayGen.SUGAR.Common.Extensions Assembly : PlayGen.SUGAR.Common.dll Syntax public static class DateTimeExtensions : object Methods SerializeToString(DateTime) Declaration public static string SerializeToString(this DateTime dateTime) Parameters Type Name Description DateTime dateTime Returns Type Description System.String"
  },
  "api/PlayGen.SUGAR.Contracts.ActorClaimResponse.html": {
    "href": "api/PlayGen.SUGAR.Contracts.ActorClaimResponse.html",
    "title": "Class ActorClaimResponse | SUGAR",
    "keywords": "Class ActorClaimResponse Encapsulates actorclaim details from the server. Inheritance System.Object ActorClaimResponse Namespace : PlayGen.SUGAR.Contracts Assembly : PlayGen.SUGAR.Contracts.dll Syntax public class ActorClaimResponse : object Examples JSON { Id : 1, ActorId : 1, RoleId : 1, EntityId : 1 } Properties ActorId The ID of the actor related to this actorclaim. Declaration public int ActorId { get; set; } Property Value Type Description System.Int32 ClaimId The ID of the claim related to this actorclaim. Declaration public int ClaimId { get; set; } Property Value Type Description System.Int32 ClaimName The name of the claim related to this actorclaim. Declaration public string ClaimName { get; set; } Property Value Type Description System.String EntityId The ID of the entity (game, actor etc) related to this actorclaim. Declaration public int EntityId { get; set; } Property Value Type Description System.Int32 Id The unqiue identifier for the actorclaim. Declaration public int Id { get; set; } Property Value Type Description System.Int32"
  },
  "api/PlayGen.SUGAR.Contracts.ActorRequest.html": {
    "href": "api/PlayGen.SUGAR.Contracts.ActorRequest.html",
    "title": "Class ActorRequest | SUGAR",
    "keywords": "Class ActorRequest Encapsulates user and group details. Inheritance System.Object ActorRequest GroupRequest UserRequest Namespace : PlayGen.SUGAR.Contracts Assembly : PlayGen.SUGAR.Contracts.dll Syntax public class ActorRequest : object Examples JSON { Name : \"Actor Name\", Description: \"Description of Actor\" } Properties Description The description/biography of the user/group. Declaration public string Description { get; set; } Property Value Type Description System.String Name The display name of the user/group. Declaration public string Name { get; set; } Property Value Type Description System.String"
  },
  "api/PlayGen.SUGAR.Contracts.GameRequest.html": {
    "href": "api/PlayGen.SUGAR.Contracts.GameRequest.html",
    "title": "Class GameRequest | SUGAR",
    "keywords": "Class GameRequest Encapsulates game details. Inheritance System.Object GameRequest Namespace : PlayGen.SUGAR.Contracts Assembly : PlayGen.SUGAR.Contracts.dll Syntax public class GameRequest : object Examples JSON { Name : \"Game Name\" } Properties Name The display name for the game. Declaration public string Name { get; set; } Property Value Type Description System.String Extension Methods GameExtensions.ToModel(GameRequest)"
  },
  "api/PlayGen.SUGAR.Contracts.GameResponse.html": {
    "href": "api/PlayGen.SUGAR.Contracts.GameResponse.html",
    "title": "Class GameResponse | SUGAR",
    "keywords": "Class GameResponse Encapsulates game details from the server. Inheritance System.Object GameResponse Namespace : PlayGen.SUGAR.Contracts Assembly : PlayGen.SUGAR.Contracts.dll Syntax public class GameResponse : object Examples JSON { Id : 1, Name : \"Game Name\" } Properties Id The unqiue identifier for the game. Declaration public int Id { get; set; } Property Value Type Description System.Int32 Name The display name of the game. Declaration public string Name { get; set; } Property Value Type Description System.String"
  },
  "api/PlayGen.SUGAR.Contracts.ResourceAddRequest.html": {
    "href": "api/PlayGen.SUGAR.Contracts.ResourceAddRequest.html",
    "title": "Class ResourceAddRequest | SUGAR",
    "keywords": "Class ResourceAddRequest Encapsulates Resource Data details. Inheritance System.Object ResourceAddRequest Namespace : PlayGen.SUGAR.Contracts Assembly : PlayGen.SUGAR.Contracts.dll Syntax public class ResourceAddRequest : object Properties ActorId The id of the Actor which this Resource is being ensigned to. Declaration public int? ActorId { get; set; } Property Value Type Description System.Nullable < System.Int32 > GameId The id of the Game which this Resource relates to. Declaration public int? GameId { get; set; } Property Value Type Description System.Nullable < System.Int32 > Key The identifier/name of the Resource. Declaration public string Key { get; set; } Property Value Type Description System.String Quantity The value of the Resource. Declaration public long? Quantity { get; set; } Property Value Type Description System.Nullable < System.Int64 > Extension Methods ResourceExtensions.ToModel(ResourceAddRequest)"
  },
  "api/PlayGen.SUGAR.Contracts.ResourceResponse.html": {
    "href": "api/PlayGen.SUGAR.Contracts.ResourceResponse.html",
    "title": "Class ResourceResponse | SUGAR",
    "keywords": "Class ResourceResponse Encapsulates resource details from the server. Inheritance System.Object ResourceResponse Namespace : PlayGen.SUGAR.Contracts Assembly : PlayGen.SUGAR.Contracts.dll Syntax public class ResourceResponse : object Properties ActorId The id of the Actor which this Resource relates to. Declaration public int ActorId { get; set; } Property Value Type Description System.Int32 DateCreated The DateTime at which this Resource was created. Declaration public DateTime DateCreated { get; set; } Property Value Type Description DateTime DateModified The DateTime at which this data was last edited. Declaration public DateTime DateModified { get; set; } Property Value Type Description DateTime GameId The id of the Game which this Resource relates to. Declaration public int GameId { get; set; } Property Value Type Description System.Int32 Key The identifier/name of the Resource. Declaration public string Key { get; set; } Property Value Type Description System.String Quantity The amount of the Resource belonging to the actor/game. Declaration public long Quantity { get; set; } Property Value Type Description System.Int64"
  },
  "unity-client/api/PlayGen.SUGAR.Unity.UserGroupUnityClient.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.UserGroupUnityClient.html",
    "title": "Class UserGroupUnityClient | SUGAR",
    "keywords": "Class UserGroupUnityClient Use this to get current user's list of groups and send and handle group requests Inheritance System.Object BaseUnityClient < BaseUserGroupInterface > UserGroupUnityClient Inherited Members BaseUnityClient<BaseUserGroupInterface>._landscapeInterface BaseUnityClient<BaseUserGroupInterface>._portraitInterface BaseUnityClient<BaseUserGroupInterface>._interface BaseUnityClient<BaseUserGroupInterface>.HasInterface BaseUnityClient<BaseUserGroupInterface>.IsActive BaseUnityClient<BaseUserGroupInterface>.Update() BaseUnityClient<BaseUserGroupInterface>.Hide() Namespace : PlayGen.SUGAR.Unity Assembly : PlayGen.SUGAR.Unity.dll Syntax public class UserGroupUnityClient : BaseUnityClient<BaseUserGroupInterface> Properties Groups Declaration public List<ActorResponseAllowableActions> Groups { get; } Property Value Type Description List < ActorResponseAllowableActions > Groups that the currently signed in user is a member of. PendingSent Declaration public List<ActorResponseAllowableActions> PendingSent { get; } Property Value Type Description List < ActorResponseAllowableActions > Groups that the currently signed in user has requested to join. SearchResults Declaration public List<ActorResponseAllowableActions> SearchResults { get; } Property Value Type Description List < ActorResponseAllowableActions > Groups that matched the last search string. Methods AddGroup(Int32, Boolean, Boolean, Action<Boolean>) Send group membership request to group with id provided. If reload is true, UI is also redrawn. Declaration public void AddGroup(int id, bool reload = true, bool trySetAsCurrentGroup = false, Action<bool> callback = null) Parameters Type Name Description System.Int32 id The id of the group System.Boolean reload Optional Whether the interface should reload on completion. (default: true) System.Boolean trySetAsCurrentGroup Will set this group as the current group if the user sucesfully joins the group. Action < System.Boolean > callback Callback with a variable indicating success or failure. Display() Gathers updated versions of each list and displays interface UI object if it has been provided. Declaration public void Display() GetGroupsList(Action<Boolean>) Get list of groups the currently signed in user is a memer of. Declaration public void GetGroupsList(Action<bool> success) Parameters Type Name Description Action < System.Boolean > success Callback whether request was successful ManageGroupRequest(Int32, Boolean) Cancel sent membership request to group Declaration public void ManageGroupRequest(int id, bool reload = true) Parameters Type Name Description System.Int32 id The id of the group System.Boolean reload Optional Whether the interface should reload on completion. (default: true) RemoveGroup(Int32, Boolean) Leave a group the currently signed in user is a member of. Declaration public void RemoveGroup(int id, bool reload = true) Parameters Type Name Description System.Int32 id The id of the group System.Boolean reload Optional Whether the interface should reload on completion. (default: true)"
  },
  "unity-client/api/PlayGen.SUGAR.Unity.WebGL.UnityWebGlHttpHandler.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.WebGL.UnityWebGlHttpHandler.html",
    "title": "Class UnityWebGlHttpHandler | SUGAR",
    "keywords": "Class UnityWebGlHttpHandler Inheritance System.Object UnityWebGlHttpHandler Namespace : PlayGen.SUGAR.Unity.WebGL Assembly : PlayGen.SUGAR.Unity.WebGL.dll Syntax public class UnityWebGlHttpHandler : IHttpHandler Methods HandleRequest(HttpRequest) Declaration public HttpResponse HandleRequest(HttpRequest request) Parameters Type Name Description HttpRequest request Returns Type Description HttpResponse"
  },
  "api/PlayGen.SUGAR.Client.AsyncRequestQueue.QueueItem.html": {
    "href": "api/PlayGen.SUGAR.Client.AsyncRequestQueue.QueueItem.html",
    "title": "Class QueueItem | SUGAR",
    "keywords": "Class QueueItem Inheritance System.Object QueueItem QueueItem<TResult> Namespace : PlayGen.SUGAR.Client.AsyncRequestQueue Assembly : PlayGen.SUGAR.Client.dll Syntax public class QueueItem : object Constructors QueueItem(Action, Action, Action<Exception>) Declaration public QueueItem(Action request, Action onSuccess, Action<Exception> onError) Parameters Type Name Description Action request Action onSuccess Action < Exception > onError QueueItem(Action<Exception>) Declaration protected QueueItem(Action<Exception> onError) Parameters Type Name Description Action < Exception > onError Properties OnError Declaration public Action<Exception> OnError { get; protected set; } Property Value Type Description Action < Exception > OnSuccess Declaration public Action OnSuccess { get; protected set; } Property Value Type Description Action Request Declaration public Action Request { get; protected set; } Property Value Type Description Action"
  },
  "api/PlayGen.SUGAR.Client.Development.html": {
    "href": "api/PlayGen.SUGAR.Client.Development.html",
    "title": "Namespace PlayGen.SUGAR.Client.Development | SUGAR",
    "keywords": "Namespace PlayGen.SUGAR.Client.Development Classes DevelopmentClient Controller that facilitates developer specific operations. SUGARDevelopmentClient"
  },
  "api/PlayGen.SUGAR.Client.Extensions.UriBuilderExtensions.html": {
    "href": "api/PlayGen.SUGAR.Client.Extensions.UriBuilderExtensions.html",
    "title": "Class UriBuilderExtensions | SUGAR",
    "keywords": "Class UriBuilderExtensions Inheritance System.Object UriBuilderExtensions Namespace : PlayGen.SUGAR.Client.Extensions Assembly : PlayGen.SUGAR.Client.dll Syntax public static class UriBuilderExtensions : object Methods AppendQueryParameter<T>(UriBuilder, T, String) Declaration public static UriBuilder AppendQueryParameter<T>(this UriBuilder uri, T obj, string formatString) Parameters Type Name Description UriBuilder uri T obj System.String formatString Returns Type Description UriBuilder Type Parameters Name Description T AppendQueryParameters<T>(UriBuilder, T[], String) Builds a Query string to pass to the API from an objects of objects. Declaration public static UriBuilder AppendQueryParameters<T>(this UriBuilder uri, T[] objects, string formatString) Parameters Type Name Description UriBuilder uri Part of t T[] objects Array of objects to be serialised System.String formatString This expects a composite format string in the form of param={0} Returns Type Description UriBuilder Type Parameters Name Description T"
  },
  "api/PlayGen.SUGAR.Client.HttpResponse.html": {
    "href": "api/PlayGen.SUGAR.Client.HttpResponse.html",
    "title": "Class HttpResponse | SUGAR",
    "keywords": "Class HttpResponse Inheritance System.Object HttpResponse Namespace : PlayGen.SUGAR.Client Assembly : PlayGen.SUGAR.Client.dll Syntax public class HttpResponse : object Properties Content Declaration public string Content { get; set; } Property Value Type Description System.String Headers Declaration public Dictionary<string, string> Headers { get; set; } Property Value Type Description Dictionary < System.String , System.String > StatusCode Declaration public int StatusCode { get; set; } Property Value Type Description System.Int32"
  },
  "api/PlayGen.SUGAR.Client.html": {
    "href": "api/PlayGen.SUGAR.Client.html",
    "title": "Namespace PlayGen.SUGAR.Client | SUGAR",
    "keywords": "Namespace PlayGen.SUGAR.Client Classes AccountClient Controller that facilitates Account specific operations. AchievementClient Controller that facilitates Achievement specific operations. AllianceClient Controller that facilitates User to Group relationship specific operations. APIVersionClient Controller that facilitates API version specific operations. ClientBase DefaultHttpHandler GameClient Controller that facilitates Game specific operations. GameDataClient Controller that facilitates GameData specific operations. GroupClient Controller that facilitates Group specific operations. GroupMemberClient Controller that facilitates User to Group relationship specific operations. HttpRequest HttpResponse LeaderboardClient Controller that facilitates Leaderboard specific operations. MatchClient Controller that facilitates Match specific operations ResourceClient Controller that facilitates Resource specific operations. SessionClient Controller that facilitates Session specific operations. SkillClient Controller that facilitates Skill specific operations. SUGARClient UserClient Controller that facilitates User specific operations. UserFriendClient Controller that facilitates User to User relationship specific operations. Interfaces IHttpHandler ISavedPrefsHandler"
  },
  "api/PlayGen.SUGAR.Common.Authorization.Platform.html": {
    "href": "api/PlayGen.SUGAR.Common.Authorization.Platform.html",
    "title": "Class Platform | SUGAR",
    "keywords": "Class Platform Inheritance System.Object Platform Namespace : PlayGen.SUGAR.Common.Authorization Assembly : PlayGen.SUGAR.Common.dll Syntax public class Platform : object Fields AllId Declaration public const int AllId = null Field Value Type Description System.Int32 GlobalId Declaration public const int GlobalId = null Field Value Type Description System.Int32"
  },
  "api/PlayGen.SUGAR.Server.Authentication.Helpers.JWTSerializationAdapter.html": {
    "href": "api/PlayGen.SUGAR.Server.Authentication.Helpers.JWTSerializationAdapter.html",
    "title": "Class JWTSerializationAdapter | SUGAR",
    "keywords": "Class JWTSerializationAdapter Inheritance System.Object JWTSerializationAdapter Namespace : PlayGen.SUGAR.Server.Authentication.Helpers Assembly : PlayGen.SUGAR.Server.Authentication.dll Syntax public class JWTSerializationAdapter : JsonSerializer Methods Deserialize<T>(String) Declaration public T Deserialize<T>(string json) Parameters Type Name Description System.String json Returns Type Description T Type Parameters Name Description T Serialize(Object) Declaration public string Serialize(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.String"
  },
  "api/PlayGen.SUGAR.Server.Authentication.Helpers.html": {
    "href": "api/PlayGen.SUGAR.Server.Authentication.Helpers.html",
    "title": "Namespace PlayGen.SUGAR.Server.Authentication.Helpers | SUGAR",
    "keywords": "Namespace PlayGen.SUGAR.Server.Authentication.Helpers Classes JWTSerializationAdapter"
  },
  "api/PlayGen.SUGAR.Server.Core.Controllers.ActorController.html": {
    "href": "api/PlayGen.SUGAR.Server.Core.Controllers.ActorController.html",
    "title": "Class ActorController | SUGAR",
    "keywords": "Class ActorController Inheritance System.Object ActorController GroupController UserController Namespace : PlayGen.SUGAR.Server.Core.Controllers Assembly : PlayGen.SUGAR.Server.Core.dll Syntax public class ActorController : object Constructors ActorController(ActorController) Declaration public ActorController(ActorController actorDbController) Parameters Type Name Description ActorController actorDbController Methods Get(Int32) Declaration public Actor Get(int actorId) Parameters Type Name Description System.Int32 actorId Returns Type Description Actor TriggerDeletedEvent(Int32) Declaration protected void TriggerDeletedEvent(int actorId) Parameters Type Name Description System.Int32 actorId Events ActorDeletedEvent Declaration public static event Action<int> ActorDeletedEvent Event Type Type Description Action < System.Int32 >"
  },
  "api/PlayGen.SUGAR.Server.Core.Controllers.ActorDataController.html": {
    "href": "api/PlayGen.SUGAR.Server.Core.Controllers.ActorDataController.html",
    "title": "Class ActorDataController | SUGAR",
    "keywords": "Class ActorDataController Inheritance System.Object ActorDataController Namespace : PlayGen.SUGAR.Server.Core.Controllers Assembly : PlayGen.SUGAR.Server.Core.dll Syntax public class ActorDataController : object Constructors ActorDataController(ILogger<ActorDataController>, ActorDataController) Declaration public ActorDataController(ILogger<ActorDataController> logger, ActorDataController actorDataDbController) Parameters Type Name Description ILogger < ActorDataController > logger ActorDataController actorDataDbController Methods Add(ActorData) Declaration public ActorData Add(ActorData newData) Parameters Type Name Description ActorData newData Returns Type Description ActorData Get(Int32, Int32, ICollection<String>) Declaration public List<ActorData> Get(int gameId, int actorId, ICollection<string> keys = null) Parameters Type Name Description System.Int32 gameId System.Int32 actorId ICollection < System.String > keys Returns Type Description List < ActorData > KeyExists(Int32, Int32, String) Declaration public bool KeyExists(int gameId, int actorId, string key) Parameters Type Name Description System.Int32 gameId System.Int32 actorId System.String key Returns Type Description System.Boolean ParseCheck(ActorData) Declaration protected bool ParseCheck(ActorData data) Parameters Type Name Description ActorData data Returns Type Description System.Boolean Update(ActorData) Declaration public void Update(ActorData newData) Parameters Type Name Description ActorData newData"
  },
  "api/PlayGen.SUGAR.Server.EntityFramework.Extensions.ActorDataExtensions.html": {
    "href": "api/PlayGen.SUGAR.Server.EntityFramework.Extensions.ActorDataExtensions.html",
    "title": "Class ActorDataExtensions | SUGAR",
    "keywords": "Class ActorDataExtensions Inheritance System.Object ActorDataExtensions Namespace : PlayGen.SUGAR.Server.EntityFramework.Extensions Assembly : PlayGen.SUGAR.Server.EntityFramework.dll Syntax public static class ActorDataExtensions : object Methods FilterByActorId(SUGARContext, Int32) Declaration public static IQueryable<ActorData> FilterByActorId(this SUGARContext context, int actorId) Parameters Type Name Description SUGARContext context System.Int32 actorId Returns Type Description IQueryable < ActorData > FilterByGameId(IQueryable<ActorData>, Int32) Declaration public static IQueryable<ActorData> FilterByGameId(this IQueryable<ActorData> actorDataQueryable, int gameId) Parameters Type Name Description IQueryable < ActorData > actorDataQueryable System.Int32 gameId Returns Type Description IQueryable < ActorData > FilterByIds(SUGARContext, List<Int32>) Declaration public static IQueryable<ActorData> FilterByIds(this SUGARContext context, List<int> ids) Parameters Type Name Description SUGARContext context List < System.Int32 > ids Returns Type Description IQueryable < ActorData > FilterByKey(IQueryable<ActorData>, String) Declaration public static IQueryable<ActorData> FilterByKey(this IQueryable<ActorData> actorDataQueryable, string key) Parameters Type Name Description IQueryable < ActorData > actorDataQueryable System.String key Returns Type Description IQueryable < ActorData > FilterByKeys(IQueryable<ActorData>, ICollection<String>) Declaration public static IQueryable<ActorData> FilterByKeys(this IQueryable<ActorData> actorDataQueryable, ICollection<string> keys) Parameters Type Name Description IQueryable < ActorData > actorDataQueryable ICollection < System.String > keys Returns Type Description IQueryable < ActorData >"
  },
  "api/PlayGen.SUGAR.Server.EntityFramework.Extensions.ContextExtensions.html": {
    "href": "api/PlayGen.SUGAR.Server.EntityFramework.Extensions.ContextExtensions.html",
    "title": "Class ContextExtensions | SUGAR",
    "keywords": "Class ContextExtensions Inheritance System.Object ContextExtensions Namespace : PlayGen.SUGAR.Server.EntityFramework.Extensions Assembly : PlayGen.SUGAR.Server.EntityFramework.dll Syntax public static class ContextExtensions : object Methods HandleDetatchedActor(SUGARContext, Actor) Declaration public static void HandleDetatchedActor(this SUGARContext context, Actor actor) Parameters Type Name Description SUGARContext context Actor actor HandleDetatchedActor(SUGARContext, Int32) Declaration public static void HandleDetatchedActor(this SUGARContext context, int actorId) Parameters Type Name Description SUGARContext context System.Int32 actorId HandleDetatchedEvaluationData(SUGARContext, EvaluationData) Declaration public static void HandleDetatchedEvaluationData(this SUGARContext context, EvaluationData evaluationData) Parameters Type Name Description SUGARContext context EvaluationData evaluationData HandleDetatchedGame(SUGARContext, Int32) Declaration public static void HandleDetatchedGame(this SUGARContext context, int gameId) Parameters Type Name Description SUGARContext context System.Int32 gameId MigrateAndSeed(SUGARContext) Declaration public static void MigrateAndSeed(this SUGARContext context) Parameters Type Name Description SUGARContext context"
  },
  "api/PlayGen.SUGAR.Server.Model.Achievement.html": {
    "href": "api/PlayGen.SUGAR.Server.Model.Achievement.html",
    "title": "Class Achievement | SUGAR",
    "keywords": "Class Achievement Inheritance System.Object Evaluation Achievement Inherited Members Evaluation.Id Evaluation.GameId Evaluation.Name Evaluation.Description Evaluation.ActorType Evaluation.Token Evaluation.EvaluationCriterias Evaluation.Rewards Namespace : PlayGen.SUGAR.Server.Model Assembly : PlayGen.SUGAR.Server.Model.dll Syntax public class Achievement : Evaluation Properties EvaluationType Declaration public override EvaluationType EvaluationType { get; } Property Value Type Description EvaluationType Overrides Evaluation.EvaluationType"
  },
  "api/PlayGen.SUGAR.Server.Model.Actor.html": {
    "href": "api/PlayGen.SUGAR.Server.Model.Actor.html",
    "title": "Class Actor | SUGAR",
    "keywords": "Class Actor Inheritance System.Object Actor Group User Namespace : PlayGen.SUGAR.Server.Model Assembly : PlayGen.SUGAR.Server.Model.dll Syntax public abstract class Actor : object Properties Acceptors Declaration public virtual List<ActorRelationship> Acceptors { get; set; } Property Value Type Description List < ActorRelationship > ActorType Declaration public abstract ActorType ActorType { get; } Property Value Type Description ActorType Description Declaration public string Description { get; set; } Property Value Type Description System.String GroupRelationshipCount Declaration public int GroupRelationshipCount { get; set; } Property Value Type Description System.Int32 Id Declaration public int Id { get; set; } Property Value Type Description System.Int32 Name Declaration public string Name { get; set; } Property Value Type Description System.String RequestAcceptors Declaration public virtual List<ActorRelationshipRequest> RequestAcceptors { get; set; } Property Value Type Description List < ActorRelationshipRequest > Requestors Declaration public virtual List<ActorRelationship> Requestors { get; set; } Property Value Type Description List < ActorRelationship > RequestRequestors Declaration public virtual List<ActorRelationshipRequest> RequestRequestors { get; set; } Property Value Type Description List < ActorRelationshipRequest > UserRelationshipCount Declaration public int UserRelationshipCount { get; set; } Property Value Type Description System.Int32"
  },
  "api/PlayGen.SUGAR.Contracts.AccountSourceResponse.html": {
    "href": "api/PlayGen.SUGAR.Contracts.AccountSourceResponse.html",
    "title": "Class AccountSourceResponse | SUGAR",
    "keywords": "Class AccountSourceResponse Encapsulates log-in source details. Inheritance System.Object AccountSourceResponse Namespace : PlayGen.SUGAR.Contracts Assembly : PlayGen.SUGAR.Contracts.dll Syntax public class AccountSourceResponse : object Examples JSON { User : { Id : 1, Name : \"SUGAR\", RequiresPassword : true } } Properties AutoRegister Whether an account is created if one does not already exist for this source Declaration public bool AutoRegister { get; set; } Property Value Type Description System.Boolean Description The source description. Declaration public string Description { get; set; } Property Value Type Description System.String Id The unqiue identifier for the game. Declaration public int Id { get; set; } Property Value Type Description System.Int32 RequiresPassword Whether the user needs to pass a password when logging in via this source Declaration public bool RequiresPassword { get; set; } Property Value Type Description System.Boolean Token The source token. Declaration public string Token { get; set; } Property Value Type Description System.String"
  },
  "api/PlayGen.SUGAR.Contracts.ResourceTransferResponse.html": {
    "href": "api/PlayGen.SUGAR.Contracts.ResourceTransferResponse.html",
    "title": "Class ResourceTransferResponse | SUGAR",
    "keywords": "Class ResourceTransferResponse Encapsulates Resource Transfer details from the server. Inheritance System.Object ResourceTransferResponse Namespace : PlayGen.SUGAR.Contracts Assembly : PlayGen.SUGAR.Contracts.dll Syntax public class ResourceTransferResponse : object Properties FromResource The new details of the Resource being transferred from. Declaration public ResourceResponse FromResource { get; set; } Property Value Type Description ResourceResponse ToResource The new details of the Resource being transferred to. Declaration public ResourceResponse ToResource { get; set; } Property Value Type Description ResourceResponse"
  },
  "api/PlayGen.SUGAR.Server.Core.Controllers.ActorClaimController.html": {
    "href": "api/PlayGen.SUGAR.Server.Core.Controllers.ActorClaimController.html",
    "title": "Class ActorClaimController | SUGAR",
    "keywords": "Class ActorClaimController Inheritance System.Object ActorClaimController Namespace : PlayGen.SUGAR.Server.Core.Controllers Assembly : PlayGen.SUGAR.Server.Core.dll Syntax public class ActorClaimController : object Constructors ActorClaimController(ILogger<ActorClaimController>, ActorClaimController, ActorRoleController, RoleClaimController) Declaration public ActorClaimController(ILogger<ActorClaimController> logger, ActorClaimController actorClaimDbController, ActorRoleController actorRoleController, RoleClaimController roleClaimController) Parameters Type Name Description ILogger < ActorClaimController > logger ActorClaimController actorClaimDbController ActorRoleController actorRoleController RoleClaimController roleClaimController Methods Create(ActorClaim) Declaration public ActorClaim Create(ActorClaim newClaim) Parameters Type Name Description ActorClaim newClaim Returns Type Description ActorClaim Delete(Int32) Declaration public void Delete(int id) Parameters Type Name Description System.Int32 id Get(Int32) Declaration public ActorClaim Get(int id) Parameters Type Name Description System.Int32 id Returns Type Description ActorClaim GetActorClaims(Int32) Declaration public List<ActorClaim> GetActorClaims(int actorId) Parameters Type Name Description System.Int32 actorId Returns Type Description List < ActorClaim > GetActorClaimsByScope(Int32, ClaimScope) Declaration public List<ActorClaim> GetActorClaimsByScope(int actorId, ClaimScope scope) Parameters Type Name Description System.Int32 actorId ClaimScope scope Returns Type Description List < ActorClaim > GetActorClaimsForEntity(Int32, Int32, ClaimScope) Declaration public List<Claim> GetActorClaimsForEntity(int actorId, int entityId, ClaimScope scope) Parameters Type Name Description System.Int32 actorId System.Int32 entityId ClaimScope scope Returns Type Description List < Claim > GetClaimActors(Int32, Int32) Declaration public List<Actor> GetClaimActors(int claimId, int entityId) Parameters Type Name Description System.Int32 claimId System.Int32 entityId Returns Type Description List < Actor >"
  },
  "api/PlayGen.SUGAR.Server.Model.Group.html": {
    "href": "api/PlayGen.SUGAR.Server.Model.Group.html",
    "title": "Class Group | SUGAR",
    "keywords": "Class Group Inheritance System.Object Actor Group Inherited Members Actor.Id Actor.Name Actor.Description Actor.Requestors Actor.Acceptors Actor.RequestAcceptors Actor.RequestRequestors Actor.GroupRelationshipCount Actor.UserRelationshipCount Namespace : PlayGen.SUGAR.Server.Model Assembly : PlayGen.SUGAR.Server.Model.dll Syntax public class Group : Actor Properties ActorType Declaration public override ActorType ActorType { get; } Property Value Type Description ActorType Overrides Actor.ActorType"
  },
  "api/PlayGen.SUGAR.Server.Model.Interfaces.IEvaluationData.html": {
    "href": "api/PlayGen.SUGAR.Server.Model.Interfaces.IEvaluationData.html",
    "title": "Interface IEvaluationData | SUGAR",
    "keywords": "Interface IEvaluationData Namespace : PlayGen.SUGAR.Server.Model.Interfaces Assembly : PlayGen.SUGAR.Server.Model.dll Syntax public interface IEvaluationData Properties ActorId Declaration int ActorId { get; } Property Value Type Description System.Int32"
  },
  "api/PlayGen.SUGAR.Server.WebAPI.Controllers.AccountController.html": {
    "href": "api/PlayGen.SUGAR.Server.WebAPI.Controllers.AccountController.html",
    "title": "Class AccountController | SUGAR",
    "keywords": "Class AccountController Web Controller that facilitates account specific operations. Inheritance System.Object AccountController Namespace : PlayGen.SUGAR.Server.WebAPI.Controllers Assembly : PlayGen.SUGAR.Server.WebAPI.dll Syntax public class AccountController : Controller Constructors AccountController(AccountController, IAuthorizationService) Declaration public AccountController(AccountController accountCoreController, IAuthorizationService authorizationService) Parameters Type Name Description AccountController accountCoreController IAuthorizationService authorizationService Methods Create(AccountRequest) Register a new account and creates an associated user. Requires the Name to be unique. Returns a JsonWebToken used for authorization in any further calls to the API. Example Usage: POST api/account/create Declaration public IActionResult Create(AccountRequest accountRequest) Parameters Type Name Description AccountRequest accountRequest AccountRequest object that contains the details of the new Account. Returns Type Description IActionResult A AccountResponse containing the new Account details. Delete(Int32) Delete Account with the ID provided. Example Usage: DELETE api/account/1 Declaration public Task<IActionResult> Delete(int id) Parameters Type Name Description System.Int32 id Account ID. Returns Type Description Task < IActionResult >"
  },
  "api/PlayGen.SUGAR.Server.WebAPI.Controllers.AccountSourceController.html": {
    "href": "api/PlayGen.SUGAR.Server.WebAPI.Controllers.AccountSourceController.html",
    "title": "Class AccountSourceController | SUGAR",
    "keywords": "Class AccountSourceController Web Controller that facilitates AccountSource specific operations. Inheritance System.Object AccountSourceController Namespace : PlayGen.SUGAR.Server.WebAPI.Controllers Assembly : PlayGen.SUGAR.Server.WebAPI.dll Syntax public class AccountSourceController : Controller Constructors AccountSourceController(AccountSourceController, IAuthorizationService) Declaration public AccountSourceController(AccountSourceController accountSourceCoreController, IAuthorizationService authorizationService) Parameters Type Name Description AccountSourceController accountSourceCoreController IAuthorizationService authorizationService Methods Create(AccountSourceRequest) Create a new AccountSource. Requires the Token to be unique. Example Usage: POST api/accountSource Declaration public Task<IActionResult> Create(AccountSourceRequest newAccountSource) Parameters Type Name Description AccountSourceRequest newAccountSource AccountSourceRequest object that contains the details of the new AccountSource. Returns Type Description Task < IActionResult > A AccountSourceResponse containing the new AccountSource details. Delete(Int32) Delete AccountSource with the ID provided. Example Usage: DELETE api/accountSource/1 Declaration public Task<IActionResult> Delete(int id) Parameters Type Name Description System.Int32 id AccountSource ID. Returns Type Description Task < IActionResult > Get() Get a list of all AccountSources. Example Usage: GET api/accountSource/list Declaration public Task<IActionResult> Get() Returns Type Description Task < IActionResult > A list of AccountSourceResponse that hold AccountSource details. GetById(Int32) Get AccountSource that matches provided. Example Usage: GET api/accountSource/findbyid/1 Declaration public Task<IActionResult> GetById(int id) Parameters Type Name Description System.Int32 id Returns Type Description Task < IActionResult > AccountSourceResponse which matches search criteria. Update(Int32, AccountSourceRequest) Update an existing AccountSource. Example Usage: PUT api/accountSource/update/1 Declaration public Task<IActionResult> Update(int id, AccountSourceRequest accountSource) Parameters Type Name Description System.Int32 id Id of the existing AccountSource. AccountSourceRequest accountSource AccountSourceRequest object that holds the details of the AccountSource. Returns Type Description Task < IActionResult >"
  },
  "api/PlayGen.SUGAR.Server.WebAPI.Filters.WrapResponseFilter.html": {
    "href": "api/PlayGen.SUGAR.Server.WebAPI.Filters.WrapResponseFilter.html",
    "title": "Class WrapResponseFilter | SUGAR",
    "keywords": "Class WrapResponseFilter Add additional data to any response. Added aditional data: Evaluation Progress Inheritance System.Object WrapResponseFilter Namespace : PlayGen.SUGAR.Server.WebAPI.Filters Assembly : PlayGen.SUGAR.Server.WebAPI.dll Syntax public class WrapResponseFilter : IActionFilter Constructors WrapResponseFilter(EvaluationTracker) Declaration public WrapResponseFilter(EvaluationTracker evaluationTracker) Parameters Type Name Description EvaluationTracker evaluationTracker Methods OnActionExecuted(ActionExecutedContext) Declaration public void OnActionExecuted(ActionExecutedContext context) Parameters Type Name Description ActionExecutedContext context OnActionExecuting(ActionExecutingContext) Declaration public void OnActionExecuting(ActionExecutingContext context) Parameters Type Name Description ActionExecutingContext context"
  },
  "api/PlayGen.SUGAR.Server.WebAPI.Filters.html": {
    "href": "api/PlayGen.SUGAR.Server.WebAPI.Filters.html",
    "title": "Namespace PlayGen.SUGAR.Server.WebAPI.Filters | SUGAR",
    "keywords": "Namespace PlayGen.SUGAR.Server.WebAPI.Filters Classes APIVersionFilterFilter Ensures API Versions match for incoming request and server ExceptionFilter Wraps internal exceptions for external consumption. ModelValidationFilter Checks if models are valid. If a model is not valid, a Bad Request is returned as the result with details on why the model state is invalid. SessionFilter Ensures the requestor has a valid session. WrapResponseFilter Add additional data to any response. Added aditional data: Evaluation Progress"
  },
  "api/PlayGen.SUGAR.Common.Authorization.AuthorizationName.html": {
    "href": "api/PlayGen.SUGAR.Common.Authorization.AuthorizationName.html",
    "title": "Class AuthorizationName | SUGAR",
    "keywords": "Class AuthorizationName Inheritance System.Object AuthorizationName Namespace : PlayGen.SUGAR.Common.Authorization Assembly : PlayGen.SUGAR.Common.dll Syntax public class AuthorizationName : object Methods Generate(AuthorizationAction, AuthorizationEntity) Declaration public static string Generate(AuthorizationAction action, AuthorizationEntity entity) Parameters Type Name Description AuthorizationAction action AuthorizationEntity entity Returns Type Description System.String"
  },
  "api/PlayGen.SUGAR.Common.EvaluationDataType.html": {
    "href": "api/PlayGen.SUGAR.Common.EvaluationDataType.html",
    "title": "Enum EvaluationDataType | SUGAR",
    "keywords": "Enum EvaluationDataType Enum for selecting the type of data being stored or looked for. Namespace : PlayGen.SUGAR.Common Assembly : PlayGen.SUGAR.Common.dll Syntax public enum EvaluationDataType : int Fields Name Description Boolean True or false. Float Numeric value with decimal places. Long Numeric value with no decimal places. String A non-numeric set of characters."
  },
  "api/PlayGen.SUGAR.Common.Web.HeaderKeys.html": {
    "href": "api/PlayGen.SUGAR.Common.Web.HeaderKeys.html",
    "title": "Class HeaderKeys | SUGAR",
    "keywords": "Class HeaderKeys Inheritance System.Object HeaderKeys Namespace : PlayGen.SUGAR.Common.Web Assembly : PlayGen.SUGAR.Common.dll Syntax public static class HeaderKeys : object Fields Authorization Declaration public const string Authorization = null Field Value Type Description System.String EvaluationNotifications Declaration public const string EvaluationNotifications = null Field Value Type Description System.String"
  },
  "api/PlayGen.SUGAR.Contracts.ActorRoleRequest.html": {
    "href": "api/PlayGen.SUGAR.Contracts.ActorRoleRequest.html",
    "title": "Class ActorRoleRequest | SUGAR",
    "keywords": "Class ActorRoleRequest Encapsulates actorrole details. Inheritance System.Object ActorRoleRequest Namespace : PlayGen.SUGAR.Contracts Assembly : PlayGen.SUGAR.Contracts.dll Syntax public class ActorRoleRequest : object Examples JSON { ActorId : 1, RoleId : 1, EntityId : 1 } Properties ActorId The ID of the actor related to this actorrole. Declaration public int? ActorId { get; set; } Property Value Type Description System.Nullable < System.Int32 > EntityId The ID of the entity (game, actor etc) related to this actorrole. Declaration public int? EntityId { get; set; } Property Value Type Description System.Nullable < System.Int32 > RoleId The ID of the role related to this actorrole. Declaration public int? RoleId { get; set; } Property Value Type Description System.Nullable < System.Int32 > Extension Methods ActorRoleExtensions.ToModel(ActorRoleRequest)"
  },
  "api/PlayGen.SUGAR.Server.EntityFramework.EntityConfigs.EvaluationDataConfig.html": {
    "href": "api/PlayGen.SUGAR.Server.EntityFramework.EntityConfigs.EvaluationDataConfig.html",
    "title": "Class EvaluationDataConfig | SUGAR",
    "keywords": "Class EvaluationDataConfig Inheritance System.Object EvaluationDataConfig Namespace : PlayGen.SUGAR.Server.EntityFramework.EntityConfigs Assembly : PlayGen.SUGAR.Server.EntityFramework.dll Syntax public class EvaluationDataConfig : IEntityTypeConfiguration<EvaluationData> Methods Configure(EntityTypeBuilder<EvaluationData>) Declaration public void Configure(EntityTypeBuilder<EvaluationData> builder) Parameters Type Name Description EntityTypeBuilder < EvaluationData > builder"
  },
  "api/PlayGen.SUGAR.Server.EntityFramework.EntityConfigs.GameConfig.html": {
    "href": "api/PlayGen.SUGAR.Server.EntityFramework.EntityConfigs.GameConfig.html",
    "title": "Class GameConfig | SUGAR",
    "keywords": "Class GameConfig Inheritance System.Object GameConfig Namespace : PlayGen.SUGAR.Server.EntityFramework.EntityConfigs Assembly : PlayGen.SUGAR.Server.EntityFramework.dll Syntax public class GameConfig : IEntityTypeConfiguration<Game> Methods Configure(EntityTypeBuilder<Game>) Declaration public void Configure(EntityTypeBuilder<Game> builder) Parameters Type Name Description EntityTypeBuilder < Game > builder"
  },
  "api/PlayGen.SUGAR.Server.EntityFramework.Extensions.EvaluationDataExtensions.html": {
    "href": "api/PlayGen.SUGAR.Server.EntityFramework.Extensions.EvaluationDataExtensions.html",
    "title": "Class EvaluationDataExtensions | SUGAR",
    "keywords": "Class EvaluationDataExtensions Inheritance System.Object EvaluationDataExtensions Namespace : PlayGen.SUGAR.Server.EntityFramework.Extensions Assembly : PlayGen.SUGAR.Server.EntityFramework.dll Syntax public static class EvaluationDataExtensions : object Methods FilterByActorId(IQueryable<EvaluationData>, Int32) Declaration public static IQueryable<EvaluationData> FilterByActorId(this IQueryable<EvaluationData> evaluationDataQueryable, int actorId) Parameters Type Name Description IQueryable < EvaluationData > evaluationDataQueryable System.Int32 actorId Returns Type Description IQueryable < EvaluationData > FilterByDataType(IQueryable<EvaluationData>, EvaluationDataType) Declaration public static IQueryable<EvaluationData> FilterByDataType(this IQueryable<EvaluationData> evaluationDataQueryable, EvaluationDataType type) Parameters Type Name Description IQueryable < EvaluationData > evaluationDataQueryable EvaluationDataType type Returns Type Description IQueryable < EvaluationData > FilterByDateTimeRange(IQueryable<EvaluationData>, Nullable<DateTime>, Nullable<DateTime>) Declaration public static IQueryable<EvaluationData> FilterByDateTimeRange(this IQueryable<EvaluationData> evaluationDataQueryable, DateTime? start, DateTime? end) Parameters Type Name Description IQueryable < EvaluationData > evaluationDataQueryable System.Nullable < DateTime > start System.Nullable < DateTime > end Returns Type Description IQueryable < EvaluationData > FilterByGameId(IQueryable<EvaluationData>, Int32) Declaration public static IQueryable<EvaluationData> FilterByGameId(this IQueryable<EvaluationData> evaluationDataQueryable, int gameId) Parameters Type Name Description IQueryable < EvaluationData > evaluationDataQueryable System.Int32 gameId Returns Type Description IQueryable < EvaluationData > FilterByIds(IQueryable<EvaluationData>, ICollection<Int32>) Declaration public static IQueryable<EvaluationData> FilterByIds(this IQueryable<EvaluationData> evaluationDataQueryable, ICollection<int> ids) Parameters Type Name Description IQueryable < EvaluationData > evaluationDataQueryable ICollection < System.Int32 > ids Returns Type Description IQueryable < EvaluationData > FilterByKey(IQueryable<EvaluationData>, String) Declaration public static IQueryable<EvaluationData> FilterByKey(this IQueryable<EvaluationData> evaluationDataQueryable, string key) Parameters Type Name Description IQueryable < EvaluationData > evaluationDataQueryable System.String key Returns Type Description IQueryable < EvaluationData > FilterByKeys(IQueryable<EvaluationData>, ICollection<String>) Declaration public static IQueryable<EvaluationData> FilterByKeys(this IQueryable<EvaluationData> evaluationDataQueryable, ICollection<string> keys) Parameters Type Name Description IQueryable < EvaluationData > evaluationDataQueryable ICollection < System.String > keys Returns Type Description IQueryable < EvaluationData > FilterByMatchId(IQueryable<EvaluationData>, Nullable<Int32>) Declaration public static IQueryable<EvaluationData> FilterByMatchId(this IQueryable<EvaluationData> evaluationDataQueryable, int? entityId) Parameters Type Name Description IQueryable < EvaluationData > evaluationDataQueryable System.Nullable < System.Int32 > entityId Returns Type Description IQueryable < EvaluationData > GetCategoryData(SUGARContext, EvaluationDataCategory) Declaration public static IQueryable<EvaluationData> GetCategoryData(this SUGARContext context, EvaluationDataCategory category) Parameters Type Name Description SUGARContext context EvaluationDataCategory category Returns Type Description IQueryable < EvaluationData >"
  },
  "api/PlayGen.SUGAR.Server.EntityFramework.Extensions.MatchExtensions.html": {
    "href": "api/PlayGen.SUGAR.Server.EntityFramework.Extensions.MatchExtensions.html",
    "title": "Class MatchExtensions | SUGAR",
    "keywords": "Class MatchExtensions Inheritance System.Object MatchExtensions Namespace : PlayGen.SUGAR.Server.EntityFramework.Extensions Assembly : PlayGen.SUGAR.Server.EntityFramework.dll Syntax public static class MatchExtensions : object Methods FilterByDateTimeRange(IQueryable<Match>, Nullable<DateTime>, Nullable<DateTime>) Declaration public static IQueryable<Match> FilterByDateTimeRange(this IQueryable<Match> matches, DateTime? start, DateTime? end) Parameters Type Name Description IQueryable < Match > matches System.Nullable < DateTime > start System.Nullable < DateTime > end Returns Type Description IQueryable < Match >"
  },
  "api/PlayGen.SUGAR.Server.WebAPI.Extensions.AccountSourceExtensions.html": {
    "href": "api/PlayGen.SUGAR.Server.WebAPI.Extensions.AccountSourceExtensions.html",
    "title": "Class AccountSourceExtensions | SUGAR",
    "keywords": "Class AccountSourceExtensions Inheritance System.Object AccountSourceExtensions Namespace : PlayGen.SUGAR.Server.WebAPI.Extensions Assembly : PlayGen.SUGAR.Server.WebAPI.dll Syntax public static class AccountSourceExtensions : object Methods ToContract(AccountSource) Declaration public static AccountSourceResponse ToContract(this AccountSource sourceModel) Parameters Type Name Description AccountSource sourceModel Returns Type Description AccountSourceResponse ToContractList(IEnumerable<AccountSource>) Declaration public static IEnumerable<AccountSourceResponse> ToContractList(this IEnumerable<AccountSource> sourceModels) Parameters Type Name Description IEnumerable < AccountSource > sourceModels Returns Type Description IEnumerable < AccountSourceResponse > ToModel(AccountSourceRequest) Declaration public static AccountSource ToModel(this AccountSourceRequest sourceContract) Parameters Type Name Description AccountSourceRequest sourceContract Returns Type Description AccountSource"
  },
  "api/PlayGen.SUGAR.Server.WebAPI.Extensions.AchievementExtensions.html": {
    "href": "api/PlayGen.SUGAR.Server.WebAPI.Extensions.AchievementExtensions.html",
    "title": "Class AchievementExtensions | SUGAR",
    "keywords": "Class AchievementExtensions Inheritance System.Object AchievementExtensions Namespace : PlayGen.SUGAR.Server.WebAPI.Extensions Assembly : PlayGen.SUGAR.Server.WebAPI.dll Syntax public static class AchievementExtensions : object Methods ToAchievementModel(EvaluationCreateRequest) Declaration public static Achievement ToAchievementModel(this EvaluationCreateRequest achievementContract) Parameters Type Name Description EvaluationCreateRequest achievementContract Returns Type Description Achievement ToAchievementModel(EvaluationUpdateRequest) Declaration public static Achievement ToAchievementModel(this EvaluationUpdateRequest achievementContract) Parameters Type Name Description EvaluationUpdateRequest achievementContract Returns Type Description Achievement ToContract(Achievement) Declaration public static EvaluationResponse ToContract(this Achievement model) Parameters Type Name Description Achievement model Returns Type Description EvaluationResponse ToContractList(IEnumerable<Achievement>) Declaration public static IEnumerable<EvaluationResponse> ToContractList(this IEnumerable<Achievement> models) Parameters Type Name Description IEnumerable < Achievement > models Returns Type Description IEnumerable < EvaluationResponse >"
  },
  "api/PlayGen.SUGAR.Server.WebAPI.Extensions.ActorClaimExtensions.html": {
    "href": "api/PlayGen.SUGAR.Server.WebAPI.Extensions.ActorClaimExtensions.html",
    "title": "Class ActorClaimExtensions | SUGAR",
    "keywords": "Class ActorClaimExtensions Inheritance System.Object ActorClaimExtensions Namespace : PlayGen.SUGAR.Server.WebAPI.Extensions Assembly : PlayGen.SUGAR.Server.WebAPI.dll Syntax public static class ActorClaimExtensions : object Methods ToContract(ActorClaim) Declaration public static ActorClaimResponse ToContract(this ActorClaim actorClaimModel) Parameters Type Name Description ActorClaim actorClaimModel Returns Type Description ActorClaimResponse ToContractList(IEnumerable<ActorClaim>) Declaration public static IEnumerable<ActorClaimResponse> ToContractList(this IEnumerable<ActorClaim> actorClaimModels) Parameters Type Name Description IEnumerable < ActorClaim > actorClaimModels Returns Type Description IEnumerable < ActorClaimResponse > ToModel(ActorClaimRequest) Declaration public static ActorClaim ToModel(this ActorClaimRequest actorClaimContract) Parameters Type Name Description ActorClaimRequest actorClaimContract Returns Type Description ActorClaim"
  },
  "api/PlayGen.SUGAR.Server.WebAPI.html": {
    "href": "api/PlayGen.SUGAR.Server.WebAPI.html",
    "title": "Namespace PlayGen.SUGAR.Server.WebAPI | SUGAR",
    "keywords": "Namespace PlayGen.SUGAR.Server.WebAPI Classes Program Startup"
  },
  "api/PlayGen.SUGAR.Server.WebAPI.Extensions.html": {
    "href": "api/PlayGen.SUGAR.Server.WebAPI.Extensions.html",
    "title": "Namespace PlayGen.SUGAR.Server.WebAPI.Extensions | SUGAR",
    "keywords": "Namespace PlayGen.SUGAR.Server.WebAPI.Extensions Classes AccountExtensions AccountSourceExtensions AchievementExtensions ActorClaimExtensions ActorDataExtensions ActorExtensions ActorRoleExtensions ClaimExtensions EvaluationCriteriaExtensions EvaluationDataExtensions GameDataExtensions GameExtensions GroupExtensions HttpContextExtensions LeaderboardExtensions MatchExtensions RelationshipExtensions ResourceExtensions RewardExtensions RoleClaimExtensions RoleExtensions SkillExtensions UserExtensions"
  },
  "unity-client/api/PlayGen.SUGAR.Unity.BaseEvaluationListInterface.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.BaseEvaluationListInterface.html",
    "title": "Class BaseEvaluationListInterface | SUGAR",
    "keywords": "Class BaseEvaluationListInterface Base abstract class for controlling the interface related to displaying evaluation progress. Inheritance System.Object BaseInterface BaseEvaluationListInterface Inherited Members BaseInterface._errorText BaseInterface._closeButton BaseInterface._signinButton BaseInterface.Awake() BaseInterface.PreDisplay() BaseInterface.Show(Boolean) BaseInterface.Draw() BaseInterface.OnSignIn() Namespace : PlayGen.SUGAR.Unity Assembly : PlayGen.SUGAR.Unity.dll Syntax public abstract class BaseEvaluationListInterface : BaseInterface Methods ErrorDraw(Boolean) Used to set error text in case of no user being signed in, loading issues or if no results are available. Declaration protected override void ErrorDraw(bool loadingSuccess) Parameters Type Name Description System.Boolean loadingSuccess Was the data successfully loaded? Overrides BaseInterface.ErrorDraw(Boolean) HideInterfaces() Hides Account, GameLeaderboard, Leaderboard, UserFriend, GroupMember and UserGroup interfaces. Declaration protected override void HideInterfaces() Overrides BaseInterface.HideInterfaces() LoadErrorText() Get error string from Localization with key \"EVALUATION_LOAD_ERROR\" if there were issues loading the evaluation list. Declaration protected override string LoadErrorText() Returns Type Description System.String Overrides BaseInterface.LoadErrorText() NoResultsErrorText() Get error string from Localization with key \"NO_EVALUATION_ERROR\" if there were no evaluations to display. Declaration protected override string NoResultsErrorText() Returns Type Description System.String Overrides BaseInterface.NoResultsErrorText()"
  },
  "unity-client/api/PlayGen.SUGAR.Unity.BaseEvaluationPopupInterface.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.BaseEvaluationPopupInterface.html",
    "title": "Class BaseEvaluationPopupInterface | SUGAR",
    "keywords": "Class BaseEvaluationPopupInterface Base abstract class for controlling the interface related to display evaluation notifications when an evalaution is completed. Inheritance System.Object BaseEvaluationPopupInterface Namespace : PlayGen.SUGAR.Unity Assembly : PlayGen.SUGAR.Unity.dll Syntax public abstract class BaseEvaluationPopupInterface : MonoBehaviour Fields _evaluationQueue Queue of notifications to be displayed. Declaration protected readonly List<EvaluationNotification> _evaluationQueue Field Value Type Description List < EvaluationNotification > _image Image displayed alongside notification. Can be left null. Declaration protected Image _image Field Value Type Description Image _name Text used for display notification string (usually evaluation name). Can be left null. Declaration protected Text _name Field Value Type Description Text Methods Display(EvaluationNotification) Functionality to be triggered when a notification is received. Declaration protected abstract void Display(EvaluationNotification notification) Parameters Type Name Description EvaluationNotification notification Notification which will be displayed."
  },
  "unity-client/api/PlayGen.SUGAR.Unity.BaseGroupMemberInterface.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.BaseGroupMemberInterface.html",
    "title": "Class BaseGroupMemberInterface | SUGAR",
    "keywords": "Class BaseGroupMemberInterface Base abstract class for controlling the UI object related to group member lists. Inheritance System.Object BaseInterface BaseGroupMemberInterface Inherited Members BaseInterface._errorText BaseInterface._closeButton BaseInterface._signinButton BaseInterface.Awake() BaseInterface.PreDisplay() BaseInterface.Show(Boolean) BaseInterface.Draw() BaseInterface.OnSignIn() Namespace : PlayGen.SUGAR.Unity Assembly : PlayGen.SUGAR.Unity.dll Syntax public abstract class BaseGroupMemberInterface : BaseInterface Fields _groupName Text used for providing the group name for this list. Can be left null. Declaration protected Text _groupName Field Value Type Description Text Methods ErrorDraw(Boolean) Used to set error text in case of no user being signed in, loading issues or if no results are available. Declaration protected override void ErrorDraw(bool loadingSuccess) Parameters Type Name Description System.Boolean loadingSuccess Overrides BaseInterface.ErrorDraw(Boolean) HideInterfaces() Hides Account, Evaluation, Leaderboard, GameLeaderboard and UserFriend UI objects. Set groupName text to match name of CurrentGroup. Declaration protected override void HideInterfaces() Overrides BaseInterface.HideInterfaces() LoadErrorText() Get error string from Localization with key \"GROUPS_LOAD_ERROR\" if there were issues loading the evaluation list. Declaration protected override string LoadErrorText() Returns Type Description System.String Overrides BaseInterface.LoadErrorText() NoResultsErrorText() Get error string from Localization with key \"NO_RESULTS_ERROR\" if there were no group members to display. Declaration protected override string NoResultsErrorText() Returns Type Description System.String Overrides BaseInterface.NoResultsErrorText()"
  },
  "api/PlayGen.SUGAR.Server.WebAPI.Controllers.UserController.html": {
    "href": "api/PlayGen.SUGAR.Server.WebAPI.Controllers.UserController.html",
    "title": "Class UserController | SUGAR",
    "keywords": "Class UserController Web Controller that facilitates User specific operations. Inheritance System.Object UserController Namespace : PlayGen.SUGAR.Server.WebAPI.Controllers Assembly : PlayGen.SUGAR.Server.WebAPI.dll Syntax public class UserController : Controller Constructors UserController(UserController, IAuthorizationService) Declaration public UserController(UserController userCoreController, IAuthorizationService authorizationService) Parameters Type Name Description UserController userCoreController IAuthorizationService authorizationService Methods Create(UserRequest) Create a new User. Requires the UserRequest 's Name to be unique for Users. Example Usage: POST api/user Declaration public Task<IActionResult> Create(UserRequest actor) Parameters Type Name Description UserRequest actor UserRequest object that holds the details of the new User. Returns Type Description Task < IActionResult > A UserResponse containing the new User details. Delete(Int32) Delete user with the provided. Example Usage: DELETE api/user/1 Declaration public Task<IActionResult> Delete(int id) Parameters Type Name Description System.Int32 id User ID. Returns Type Description Task < IActionResult > Get() Get a list of all Users. Example Usage: GET api/user/list Declaration public Task<IActionResult> Get() Returns Type Description Task < IActionResult > A list of UserResponse that hold User details. Get(Int32) Get User that matches provided. Example Usage: GET api/user/findbyid/1 Declaration public IActionResult Get(int id) Parameters Type Name Description System.Int32 id User id. Returns Type Description IActionResult UserResponse which matches search criteria. Get(String, Boolean) Get a list of Users that match provided. Example Usage: GET api/user/find/user1 Declaration public IActionResult Get(string name, bool exactMatch = false) Parameters Type Name Description System.String name User name. System.Boolean exactMatch Match the name exactly. Returns Type Description IActionResult A list of UserResponse which match the search criteria. Update(Int32, UserRequest) Update an existing User. Example Usage: PUT api/user/update/1 Declaration public Task<IActionResult> Update(int id, UserRequest user) Parameters Type Name Description System.Int32 id Id of the existing User. UserRequest user UserRequest object that holds the details of the User. Returns Type Description Task < IActionResult >"
  },
  "unity-client/api/PlayGen.SUGAR.Unity.BaseLeaderboardInterface.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.BaseLeaderboardInterface.html",
    "title": "Class BaseLeaderboardInterface | SUGAR",
    "keywords": "Class BaseLeaderboardInterface Base abstract class for controlling the interface related to displaying the latest standings for a leaderboard. Inheritance System.Object BaseInterface BaseLeaderboardInterface Inherited Members BaseInterface._errorText BaseInterface._closeButton BaseInterface._signinButton BaseInterface.PreDisplay() BaseInterface.Show(Boolean) BaseInterface.Draw() BaseInterface.OnSignIn() Namespace : PlayGen.SUGAR.Unity Assembly : PlayGen.SUGAR.Unity.dll Syntax public abstract class BaseLeaderboardInterface : BaseInterface Fields _alliancesButton Button used to change the current leaderboard filter to 'Alliances'. Can be left null. Declaration protected Button _alliancesButton Field Value Type Description Button _friendsButton Button used to change the current leaderboard filter to 'Friends'. Can be left null. Declaration protected Button _friendsButton Field Value Type Description Button _leaderboardName Text used for displaying leaderboard name. Can be left null. Declaration protected Text _leaderboardName Field Value Type Description Text _leaderboardType Text used for displaying current leaderboard filter. Can be left null. Declaration protected Text _leaderboardType Field Value Type Description Text _membersButton Button used to change the current leaderboard filter to 'Group Members'. Can be left null. Declaration protected Button _membersButton Field Value Type Description Button _nearButton Button used to change the current leaderboard filter to 'Near'. Can be left null. Declaration protected Button _nearButton Field Value Type Description Button _topButton Button used to change the current leaderboard filter to 'Top'. Can be left null. Declaration protected Button _topButton Field Value Type Description Button Methods Awake() Base Awake method adds onClick listeners for the close, signin, top, near, friends, group member and alliance filter buttons. Declaration protected override void Awake() Overrides BaseInterface.Awake() ErrorDraw(Boolean) Used to set error text in case of no user being signed in, loading issues or if no results are available. Filter button interactable set to false if no user is signed in or loading issues occur. Declaration protected override void ErrorDraw(bool loadingSuccess) Parameters Type Name Description System.Boolean loadingSuccess Was the data successfully loaded? Overrides BaseInterface.ErrorDraw(Boolean) HideInterfaces() Hides Account, Evaluation, UserFriend, GroupMember and UserGroup UI objects. Makes filter buttons interactable. Set leaderboard related text. Declaration protected override void HideInterfaces() Overrides BaseInterface.HideInterfaces() IsValid(ActorResponse, ActorType) If the response actor isn't null, does the leaerboard ActorType match the actorType provided or the Combined ActorType Declaration protected bool IsValid(ActorResponse response, ActorType actorType) Parameters Type Name Description ActorResponse response Actor that would be used for the filter ActorType actorType Valid actorType for the leaderboard if response is used as the basis Returns Type Description System.Boolean LoadErrorText() Get error string from Localization with key \"LEADERBOARD_LOAD_ERROR\" if there were issues loading the leaderboard standings list. Declaration protected override string LoadErrorText() Returns Type Description System.String Overrides BaseInterface.LoadErrorText() NoResultsErrorText() Get error string from Localization with key \"NO_LEADERBOARD_ERROR\" if there were no leaderboard standings to display. Declaration protected override string NoResultsErrorText() Returns Type Description System.String Overrides BaseInterface.NoResultsErrorText() SetInteractable(Button, Boolean) Set the button's interactable value Declaration protected void SetInteractable(Button button, bool interactable = true) Parameters Type Name Description Button button Button to enable/disable the use of System.Boolean interactable Value to change the button's interactable boolean to UpdateFilter(LeaderboardFilterType) Change the leaderboard filter currently being used Declaration protected void UpdateFilter(LeaderboardFilterType filter) Parameters Type Name Description LeaderboardFilterType filter The filter to use for display leaderboard standings UpdateMultiplePerActor(Boolean) Change the multiple per actor setting currently being used Declaration protected void UpdateMultiplePerActor(bool multiplePerActor) Parameters Type Name Description System.Boolean multiplePerActor Setting that determines if actors can appear on a leaderboard multiple times"
  },
  "unity-client/api/PlayGen.SUGAR.Unity.BaseLeaderboardListInterface.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.BaseLeaderboardListInterface.html",
    "title": "Class BaseLeaderboardListInterface | SUGAR",
    "keywords": "Class BaseLeaderboardListInterface Base abstract class for controlling the interface related to displaying a list of leaderboards. Inheritance System.Object BaseInterface BaseLeaderboardListInterface Inherited Members BaseInterface._errorText BaseInterface._closeButton BaseInterface._signinButton BaseInterface.PreDisplay() BaseInterface.Show(Boolean) BaseInterface.Draw() BaseInterface.OnSignIn() Namespace : PlayGen.SUGAR.Unity Assembly : PlayGen.SUGAR.Unity.dll Syntax public abstract class BaseLeaderboardListInterface : BaseInterface Fields _combinedButton Button used to change the current actor type filter to 'Combined'. Can be left null. Declaration protected Button _combinedButton Field Value Type Description Button _groupButton Button used to change the current actor type filter to 'Group'. Can be left null. Declaration protected Button _groupButton Field Value Type Description Button _leaderboardType Text used for displaying current leaderboard type. Can be left null. Declaration protected Text _leaderboardType Field Value Type Description Text _userButton Button used to change the current actor type filter to 'User'. Can be left null. Declaration protected Button _userButton Field Value Type Description Button Methods Awake() Base Awake method adds onClick listeners for the close, signin, user, group and combined filter buttons. Declaration protected override void Awake() Overrides BaseInterface.Awake() ErrorDraw(Boolean) Used to set error text in case of no user being signed in, loading issues or if no leaderboards are available. Filter button interactable set to false if no user is signed in or loading issues occur. Declaration protected override void ErrorDraw(bool loadingSuccess) Parameters Type Name Description System.Boolean loadingSuccess Overrides BaseInterface.ErrorDraw(Boolean) HideInterfaces() Hides Account, Evaluation, UserFriend, GroupMember and UserGroup UI objects. Makes filter buttons interactable. Set leaderboard type related text. Declaration protected override void HideInterfaces() Overrides BaseInterface.HideInterfaces() LoadErrorText() Get error string from Localization with key \"LEADERBOARD_LIST_LOAD_ERROR\" if there were issues loading the leaderboard list. Declaration protected override string LoadErrorText() Returns Type Description System.String Overrides BaseInterface.LoadErrorText() NoResultsErrorText() Get error string from Localization with key \"NO_LEADERBOARD_LIST_ERROR\" if there were no leaderboards to display. Declaration protected override string NoResultsErrorText() Returns Type Description System.String Overrides BaseInterface.NoResultsErrorText() UpdateFilter(ActorType) Chnage the filter currently being used to get leaderboard for a particular type of actor Declaration protected void UpdateFilter(ActorType filter) Parameters Type Name Description ActorType filter The filter to use for display leaderboard standings"
  },
  "unity-client/api/PlayGen.SUGAR.Unity.BaseUnityClient-1.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.BaseUnityClient-1.html",
    "title": "Class BaseUnityClient<T> | SUGAR",
    "keywords": "Class BaseUnityClient<T> Base abstract class for UnityClient classes Inheritance System.Object BaseUnityClient<T> EvaluationUnityClient GroupMemberUnityClient LeaderboardListUnityClient LeaderboardUnityClient UserFriendUnityClient UserGroupUnityClient Namespace : PlayGen.SUGAR.Unity Assembly : PlayGen.SUGAR.Unity.dll Syntax public abstract class BaseUnityClient<T> : MonoBehaviour where T : BaseInterface Type Parameters Name Description T Fields _landscapeInterface Landscape interface for this area of functionality. Can be left null if not required. Declaration protected T _landscapeInterface Field Value Type Description T _portraitInterface Portrait interface for this area of functionality. Can be left null if not required. Declaration protected T _portraitInterface Field Value Type Description T Properties _interface The interface that is used for the current aspect ratio. Declaration protected T _interface { get; } Property Value Type Description T HasInterface Has an interface been provided for this Unity Client? Declaration public bool HasInterface { get; } Property Value Type Description System.Boolean IsActive Is there an interface and if so is it currently active? Declaration public bool IsActive { get; } Property Value Type Description System.Boolean Methods Hide() Hide the UI object if it is currently active. Declaration public void Hide() Update() Change the used interface if the aspect ratio changes. Declaration protected virtual void Update()"
  },
  "unity-client/api/PlayGen.SUGAR.Unity.BaseUserFriendInterface.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.BaseUserFriendInterface.html",
    "title": "Class BaseUserFriendInterface | SUGAR",
    "keywords": "Class BaseUserFriendInterface Base abstract class for controlling the UI object related to friends lists Inheritance System.Object BaseInterface BaseUserFriendInterface Inherited Members BaseInterface._errorText BaseInterface._closeButton BaseInterface._signinButton BaseInterface.Awake() BaseInterface.PreDisplay() BaseInterface.Show(Boolean) BaseInterface.Draw() BaseInterface.ErrorDraw(Boolean) BaseInterface.OnSignIn() Namespace : PlayGen.SUGAR.Unity Assembly : PlayGen.SUGAR.Unity.dll Syntax public abstract class BaseUserFriendInterface : BaseInterface Methods GetFriends() Get and display the friends list for the currently signed in user. Declaration protected void GetFriends() GetPendingReceived() Get and display the list of pending received friend requests for the currently signed in user. Declaration protected void GetPendingReceived() GetPendingSent() Get and display the list of pending sent friend requests for the currently signed in user. Declaration protected void GetPendingSent() GetSearchResults(String) Get and display the search results for the provided string. Declaration protected void GetSearchResults(string search) Parameters Type Name Description System.String search HideInterfaces() Hides Account, GameLeaderboard, Leaderboard, Evaluation, GroupMember and UserGroup UI objects. Declaration protected override void HideInterfaces() Overrides BaseInterface.HideInterfaces() LoadErrorText() Get error string from Localization with key \"FRIENDS_LOAD_ERROR\" if there were issues loading the friends list. Declaration protected override string LoadErrorText() Returns Type Description System.String Overrides BaseInterface.LoadErrorText() NoResultsErrorText() Get error string from Localization with key \"NO_RESULTS_ERROR\" if there were no friends to display. Declaration protected override string NoResultsErrorText() Returns Type Description System.String Overrides BaseInterface.NoResultsErrorText()"
  },
  "unity-client/api/PlayGen.SUGAR.Unity.SUGARUnityManager.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.SUGARUnityManager.html",
    "title": "Class SUGARUnityManager | SUGAR",
    "keywords": "Class SUGARUnityManager Class for managing Unity elements of the asset Inheritance System.Object SUGARUnityManager Namespace : PlayGen.SUGAR.Unity Assembly : PlayGen.SUGAR.Unity.dll Syntax public class SUGARUnityManager : MonoBehaviour Fields CustomInterfaces Declaration public Dictionary<string, GameObject> CustomInterfaces Field Value Type Description Dictionary < System.String , GameObject > Properties AnyActiveUI Declaration public bool AnyActiveUI { get; } Property Value Type Description System.Boolean Is any piece of SUGAR UI currently active? SpinnerActive Declaration public bool SpinnerActive { get; } Property Value Type Description System.Boolean Whether the spinner UI is currently active Methods CreateSUGARClient(String) Create a SUGAR Client from a string Declaration protected virtual SUGARClient CreateSUGARClient(string baseAddress) Parameters Type Name Description System.String baseAddress uri to create SUGAR Client from Returns Type Description SUGARClient new SUGARClient DisableObject(GameObject) Disable a piece of SUGAR UI. Declaration public void DisableObject(GameObject activeObject) Parameters Type Name Description GameObject activeObject The object that should be disabled Remarks This should be used instead of SetActive to ensure UI and blocker ordering is correct. EnableObject(GameObject) Enable a piece of SUGAR UI. Declaration public void EnableObject(GameObject activeObject) Parameters Type Name Description GameObject activeObject The object that should be enabled Remarks This should be used instead of SetActive to ensure UI and blocker ordering is correct. GameValidityCheck() Check if the current game is valid by the current gameToken Declaration public bool GameValidityCheck() Returns Type Description System.Boolean Whether the _gameToken returns a valid game SetBlocker(Boolean, Boolean) Setup for blocker Declaration public void SetBlocker(bool use, bool block) Parameters Type Name Description System.Boolean use Whether the blocker should be used System.Boolean block Whether clicking on the blocker should close the current UI SetSpinner(Boolean, Int32) Setup the spinner Declaration public void SetSpinner(bool clockwise, int speed) Parameters Type Name Description System.Boolean clockwise Whether the spinner should rotate clockwise or not System.Int32 speed The speed of the rotation StartSpinner(String) Start the loading spinner. Declaration public void StartSpinner(string text = \"\") Parameters Type Name Description System.String text Optional Text to display with the spinner. (default: \"\") Remarks This method should be used instead of directly calling Loading.Start to ensure UI and blocker ordering is correct. StopSpinner(String, Single) Stop the loading spinner. Declaration public void StopSpinner(string text = \"\", float stopDelay = 0F) Parameters Type Name Description System.String text Optional Text to display when the spinner stops. (default: \"\") System.Single stopDelay Optional The time, in seconds, the text should be displayed for before disabling (default: 0) Remarks This method should be used instead of directly calling Loading.Start to ensure UI and blocker ordering is correct."
  },
  "unity-client/api/PlayGen.SUGAR.Unity.UserFriendUnityClient.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.UserFriendUnityClient.html",
    "title": "Class UserFriendUnityClient | SUGAR",
    "keywords": "Class UserFriendUnityClient Use this to get current user's list of friends and send and handle friend requests and other friend related actions Inheritance System.Object BaseUnityClient < BaseUserFriendInterface > UserFriendUnityClient Inherited Members BaseUnityClient<BaseUserFriendInterface>._landscapeInterface BaseUnityClient<BaseUserFriendInterface>._portraitInterface BaseUnityClient<BaseUserFriendInterface>._interface BaseUnityClient<BaseUserFriendInterface>.HasInterface BaseUnityClient<BaseUserFriendInterface>.IsActive BaseUnityClient<BaseUserFriendInterface>.Update() BaseUnityClient<BaseUserFriendInterface>.Hide() Namespace : PlayGen.SUGAR.Unity Assembly : PlayGen.SUGAR.Unity.dll Syntax public class UserFriendUnityClient : BaseUnityClient<BaseUserFriendInterface> Properties Friends Declaration public List<ActorResponseAllowableActions> Friends { get; } Property Value Type Description List < ActorResponseAllowableActions > Friends of the currently signed in user. PendingReceived Declaration public List<ActorResponseAllowableActions> PendingReceived { get; } Property Value Type Description List < ActorResponseAllowableActions > Received friend requests for currently signed in user. PendingSent Declaration public List<ActorResponseAllowableActions> PendingSent { get; } Property Value Type Description List < ActorResponseAllowableActions > Pending sent friend requests for currently signed in user. SearchResults Declaration public List<ActorResponseAllowableActions> SearchResults { get; } Property Value Type Description List < ActorResponseAllowableActions > Search results for the last search made. Methods AddFriend(Int32, Boolean) Send friend request to another user Declaration public void AddFriend(int id, bool reload = true) Parameters Type Name Description System.Int32 id The id of the user to add System.Boolean reload Optional Whether the interface should reload after the Friend is Added (default: true) Display() Updates lists and displays UI interface if it has been provided. Declaration public void Display() GetFriendsList(Action<Boolean>) Get friends list for the currently signed in user. Declaration public void GetFriendsList(Action<bool> success) Parameters Type Name Description Action < System.Boolean > success Callback which contains Whether the list was successfully returned Remarks , If the retrieved list is empty, returns true ManageFriendRequest(Int32, Boolean, Boolean, Boolean) Resolve friend requests sent to and from the current user Declaration public void ManageFriendRequest(int id, bool accept, bool reverse = false, bool reload = true) Parameters Type Name Description System.Int32 id The Id of the user who sent/received the request System.Boolean accept Whether the request has been accepted System.Boolean reverse Whether the request is cancelled (default: false) System.Boolean reload Optional Whether the interface should reload after the Friend is Added (default: true) Remarks reverse and accept cannot both be set to true, if reverse = true, then the request is cancelled. RemoveFriend(Int32, Boolean) Remove a relationship between the currently signed in user and another user. Declaration public void RemoveFriend(int id, bool reload = true) Parameters Type Name Description System.Int32 id The Id for the user which the current signed in user wishes to remove System.Boolean reload Optional Whether the UI should be redrawn upon Friend removal (default: true)"
  },
  "api/PlayGen.SUGAR.Client.AsyncRequestQueue.html": {
    "href": "api/PlayGen.SUGAR.Client.AsyncRequestQueue.html",
    "title": "Namespace PlayGen.SUGAR.Client.AsyncRequestQueue | SUGAR",
    "keywords": "Namespace PlayGen.SUGAR.Client.AsyncRequestQueue Classes AsyncRequestController QueueItem QueueItem<TResult> SyncRequestController Interfaces IAsyncRequestController"
  },
  "api/PlayGen.SUGAR.Common.LeaderboardFilterType.html": {
    "href": "api/PlayGen.SUGAR.Common.LeaderboardFilterType.html",
    "title": "Enum LeaderboardFilterType | SUGAR",
    "keywords": "Enum LeaderboardFilterType Enum for selecting subsection of users for current standings of a leaderboard. Namespace : PlayGen.SUGAR.Common Assembly : PlayGen.SUGAR.Common.dll Syntax public enum LeaderboardFilterType : int Fields Name Description Alliances Provides only the standings of those who are in an alliance with the actorId provided. Friends Provides only the standings of those who are friends of the actorId provided. GroupMembers Provides only the standings of those who are members of the actorId provided. Near Provides standings in relation to the actorId provided. Top Provides standings based off the global ranking of the leaderboard."
  },
  "api/PlayGen.SUGAR.Contracts.GroupResponse.html": {
    "href": "api/PlayGen.SUGAR.Contracts.GroupResponse.html",
    "title": "Class GroupResponse | SUGAR",
    "keywords": "Class GroupResponse Encapsulates group details from the server. Inheritance System.Object ActorResponse GroupResponse Inherited Members ActorResponse.Id ActorResponse.Name ActorResponse.Description Namespace : PlayGen.SUGAR.Contracts Assembly : PlayGen.SUGAR.Contracts.dll Syntax public class GroupResponse : ActorResponse Examples JSON { Id : 1, Name : \"Actor Name\" } Properties AllianceCount The number of alliances this group has Declaration public int AllianceCount { get; set; } Property Value Type Description System.Int32 MemberCount The number of members in this group. Declaration public int MemberCount { get; set; } Property Value Type Description System.Int32"
  },
  "api/PlayGen.SUGAR.Contracts.UserRequest.html": {
    "href": "api/PlayGen.SUGAR.Contracts.UserRequest.html",
    "title": "Class UserRequest | SUGAR",
    "keywords": "Class UserRequest Encapsulates user details. Inheritance System.Object ActorRequest UserRequest Inherited Members ActorRequest.Name ActorRequest.Description Namespace : PlayGen.SUGAR.Contracts Assembly : PlayGen.SUGAR.Contracts.dll Syntax public class UserRequest : ActorRequest Examples JSON { Name : \"Actor Name\" } Extension Methods UserExtensions.ToUserModel(UserRequest)"
  },
  "api/PlayGen.SUGAR.Server.Authentication.Filters.TokenReissueFilter.html": {
    "href": "api/PlayGen.SUGAR.Server.Authentication.Filters.TokenReissueFilter.html",
    "title": "Class TokenReissueFilter | SUGAR",
    "keywords": "Class TokenReissueFilter Inheritance System.Object TokenReissueFilter Namespace : PlayGen.SUGAR.Server.Authentication.Filters Assembly : PlayGen.SUGAR.Server.Authentication.dll Syntax public class TokenReissueFilter : IActionFilter Constructors TokenReissueFilter(TokenController) Declaration public TokenReissueFilter(TokenController tokenController) Parameters Type Name Description TokenController tokenController Methods OnActionExecuted(ActionExecutedContext) Declaration public void OnActionExecuted(ActionExecutedContext context) Parameters Type Name Description ActionExecutedContext context OnActionExecuting(ActionExecutingContext) Declaration public void OnActionExecuting(ActionExecutingContext context) Parameters Type Name Description ActionExecutingContext context"
  },
  "api/PlayGen.SUGAR.Server.EntityFramework.Controllers.RelationshipController.html": {
    "href": "api/PlayGen.SUGAR.Server.EntityFramework.Controllers.RelationshipController.html",
    "title": "Class RelationshipController | SUGAR",
    "keywords": "Class RelationshipController Inheritance System.Object DbController RelationshipController Inherited Members DbController.ContextFactory Namespace : PlayGen.SUGAR.Server.EntityFramework.Controllers Assembly : PlayGen.SUGAR.Server.EntityFramework.dll Syntax public class RelationshipController : DbController Constructors RelationshipController(SUGARContextFactory) Declaration public RelationshipController(SUGARContextFactory contextFactory) Parameters Type Name Description SUGARContextFactory contextFactory Methods CreateRelationship(ActorRelationship, SUGARContext) Immediately creates a new relationship between 2 actors Declaration public void CreateRelationship(ActorRelationship newRelation, SUGARContext context = null) Parameters Type Name Description ActorRelationship newRelation Relationship to create SUGARContext context Optional DbContext to perform opperations on. If ommitted a DbContext will be created. CreateRelationshipRequest(ActorRelationship, SUGARContext) Create a new relationship request between 2 actors Declaration public void CreateRelationshipRequest(ActorRelationship newRelation, SUGARContext context = null) Parameters Type Name Description ActorRelationship newRelation Relationship Request to create SUGARContext context GetRelationshipCount(Int32, ActorType) Declaration public int GetRelationshipCount(int id, ActorType relationshipActorType) Parameters Type Name Description System.Int32 id ActorType relationshipActorType Returns Type Description System.Int32 GetRelationships(Int32, ActorType) Declaration public List<Actor> GetRelationships(int id, ActorType relationshipActorType) Parameters Type Name Description System.Int32 id ActorType relationshipActorType Returns Type Description List < Actor > GetRequests(Int32, ActorType) Declaration public List<Actor> GetRequests(int id, ActorType fromActorType) Parameters Type Name Description System.Int32 id ActorType fromActorType Returns Type Description List < Actor > GetSentRequests(Int32, ActorType) Declaration public List<Actor> GetSentRequests(int id, ActorType toActorType) Parameters Type Name Description System.Int32 id ActorType toActorType Returns Type Description List < Actor > Update(ActorRelationship) Declaration public void Update(ActorRelationship newRelation) Parameters Type Name Description ActorRelationship newRelation UpdateRequest(ActorRelationship, Boolean) Declaration public void UpdateRequest(ActorRelationship newRelation, bool accepted) Parameters Type Name Description ActorRelationship newRelation System.Boolean accepted"
  },
  "unity-client/api/PlayGen.SUGAR.Unity.SavedPrefsHandler.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.SavedPrefsHandler.html",
    "title": "Class SavedPrefsHandler | SUGAR",
    "keywords": "Class SavedPrefsHandler Inheritance System.Object SavedPrefsHandler Namespace : PlayGen.SUGAR.Unity Assembly : PlayGen.SUGAR.Unity.dll Syntax public class SavedPrefsHandler : ISavedPrefsHandler Properties Prefix Declaration public string Prefix { get; } Property Value Type Description System.String Methods Delete(String) Declaration public void Delete(string key) Parameters Type Name Description System.String key Get<T>(String) Declaration public T Get<T>(string key) Parameters Type Name Description System.String key Returns Type Description T Type Parameters Name Description T Save<T>(String, T) Declaration public void Save<T>(string key, T value) Parameters Type Name Description System.String key T value Type Parameters Name Description T"
  },
  "unity-client/api/PlayGen.SUGAR.Unity.SUGARManager.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.SUGARManager.html",
    "title": "Class SUGARManager | SUGAR",
    "keywords": "Class SUGARManager Access point for SUGAR related classes. Inheritance System.Object SUGARManager Namespace : PlayGen.SUGAR.Unity Assembly : PlayGen.SUGAR.Unity.dll Syntax public static class SUGARManager : object Properties Account Unity client for calls related to accounts Declaration public static AccountUnityClient Account { get; } Property Value Type Description AccountUnityClient ClassId Group name gathered from auto sign in. Declaration public static string ClassId { get; } Property Value Type Description System.String Client Class for contacting SUGAR client functionality Declaration public static SUGARClient Client { get; } Property Value Type Description SUGARClient CurrentGroup Currently signed in user's primary group. Declaration public static ActorResponse CurrentGroup { get; } Property Value Type Description ActorResponse CurrentUser Currently signed in user. Declaration public static ActorResponse CurrentUser { get; } Property Value Type Description ActorResponse Evaluation Unity client for calls related to evaluations Declaration public static EvaluationUnityClient Evaluation { get; } Property Value Type Description EvaluationUnityClient GameData Unity client for calls related to gamedata Declaration public static GameDataUnityClient GameData { get; } Property Value Type Description GameDataUnityClient GameId GameId for this application. Declaration public static int GameId { get; } Property Value Type Description System.Int32 GameLeaderboard Unity client for calls related to leaderboard lists Declaration public static LeaderboardListUnityClient GameLeaderboard { get; } Property Value Type Description LeaderboardListUnityClient GroupMember Unity client for calls related to group members Declaration public static GroupMemberUnityClient GroupMember { get; } Property Value Type Description GroupMemberUnityClient Leaderboard Unity client for calls related to leaderboard standings Declaration public static LeaderboardUnityClient Leaderboard { get; } Property Value Type Description LeaderboardUnityClient Resource Unity client for calls related to resources Declaration public static ResourceUnityClient Resource { get; } Property Value Type Description ResourceUnityClient Unity Class for managing Unity elements of the asset Declaration public static SUGARUnityManager Unity { get; } Property Value Type Description SUGARUnityManager UserFriend Unity client for calls related to friend lists Declaration public static UserFriendUnityClient UserFriend { get; } Property Value Type Description UserFriendUnityClient UserGroup Unity client for calls related to user groups Declaration public static UserGroupUnityClient UserGroup { get; } Property Value Type Description UserGroupUnityClient UserSignedIn Is there a user currently signed in. Declaration public static bool UserSignedIn { get; } Property Value Type Description System.Boolean Methods SetClassId(String) Set the ClassId for the currently signed in user Declaration public static void SetClassId(string classid) Parameters Type Name Description System.String classid SetCurrentGroup(ActorResponse) Set the 'primary' group for the currently signed in user Declaration public static void SetCurrentGroup(ActorResponse group) Parameters Type Name Description ActorResponse group"
  },
  "api/PlayGen.SUGAR.Client.AsyncRequestQueue.QueueItem-1.html": {
    "href": "api/PlayGen.SUGAR.Client.AsyncRequestQueue.QueueItem-1.html",
    "title": "Class QueueItem<TResult> | SUGAR",
    "keywords": "Class QueueItem<TResult> Inheritance System.Object QueueItem QueueItem<TResult> Inherited Members QueueItem.Request QueueItem.OnSuccess QueueItem.OnError Namespace : PlayGen.SUGAR.Client.AsyncRequestQueue Assembly : PlayGen.SUGAR.Client.dll Syntax public sealed class QueueItem<TResult> : QueueItem Type Parameters Name Description TResult Constructors QueueItem(Func<TResult>, Action<TResult>, Action<Exception>) Declaration public QueueItem(Func<TResult> request, Action<TResult> onSuccess, Action<Exception> onError) Parameters Type Name Description Func <TResult> request Action <TResult> onSuccess Action < Exception > onError"
  },
  "api/PlayGen.SUGAR.Client.AsyncRequestQueue.SyncRequestController.html": {
    "href": "api/PlayGen.SUGAR.Client.AsyncRequestQueue.SyncRequestController.html",
    "title": "Class SyncRequestController | SUGAR",
    "keywords": "Class SyncRequestController Inheritance System.Object SyncRequestController Implements IAsyncRequestController IDisposable Namespace : PlayGen.SUGAR.Client.AsyncRequestQueue Assembly : PlayGen.SUGAR.Client.dll Syntax public class SyncRequestController : object, IAsyncRequestController, IDisposable Methods Clear() Declaration public void Clear() Dispose() Declaration public void Dispose() EnqueueRequest(Action, Action, Action<Exception>) Declaration public void EnqueueRequest(Action request, Action onSuccess, Action<Exception> onError) Parameters Type Name Description Action request Action onSuccess Action < Exception > onError EnqueueRequest<TResult>(Func<TResult>, Action<TResult>, Action<Exception>) Declaration public void EnqueueRequest<TResult>(Func<TResult> request, Action<TResult> onSuccess, Action<Exception> onError) Parameters Type Name Description Func <TResult> request Action <TResult> onSuccess Action < Exception > onError Type Parameters Name Description TResult Finalize() Declaration protected void Finalize() TryExecuteResponse() Declaration public bool TryExecuteResponse() Returns Type Description System.Boolean Implements IAsyncRequestController IDisposable"
  },
  "api/PlayGen.SUGAR.Client.EvaluationEvents.EvaluationNotifications.html": {
    "href": "api/PlayGen.SUGAR.Client.EvaluationEvents.EvaluationNotifications.html",
    "title": "Class EvaluationNotifications | SUGAR",
    "keywords": "Class EvaluationNotifications Inheritance System.Object EvaluationNotifications Namespace : PlayGen.SUGAR.Client.EvaluationEvents Assembly : PlayGen.SUGAR.Client.dll Syntax public class EvaluationNotifications : object Methods Enqueue(List<EvaluationNotification>) Declaration public void Enqueue(List<EvaluationNotification> evaluationNotifications) Parameters Type Name Description List < EvaluationNotification > evaluationNotifications TryDequeue(EvaluationType, out EvaluationNotification) Declaration public bool TryDequeue(EvaluationType type, out EvaluationNotification evaluationNotification) Parameters Type Name Description EvaluationType type EvaluationNotification evaluationNotification Returns Type Description System.Boolean TryDequeue(out EvaluationNotification) Declaration public bool TryDequeue(out EvaluationNotification evaluationNotification) Parameters Type Name Description EvaluationNotification evaluationNotification Returns Type Description System.Boolean"
  },
  "api/PlayGen.SUGAR.Client.GameClient.html": {
    "href": "api/PlayGen.SUGAR.Client.GameClient.html",
    "title": "Class GameClient | SUGAR",
    "keywords": "Class GameClient Controller that facilitates Game specific operations. Inheritance System.Object ClientBase GameClient Inherited Members ClientBase.AsyncRequestController ClientBase.EvaluationNotifications ClientBase.SerializerSettings ClientBase.EnableEvaluationNotifications(Boolean) ClientBase.ClearSessionData() ClientBase.AreUriParamsValid(Object[]) ClientBase.GetUriBuilder(String, Object[]) ClientBase.Post<TRequest, TResponse>(String, TRequest, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Post<TRequest>(String, TRequest, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Post<TResponse>(String, Object, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Put<TRequest, TResponse>(String, TRequest, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Put<TRequest>(String, TRequest, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.PostPut<TResponse>(String, String, Dictionary<String, String>, Object, IEnumerable<HttpStatusCode>) ClientBase.PostPut(String, String, Dictionary<String, String>, Object, IEnumerable<HttpStatusCode>) ClientBase.Get<TResponse>(String, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Get(String, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Delete<TResponse>(String, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Delete(String, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.GetDelete<TResponse>(String, String, Dictionary<String, String>, IEnumerable<HttpStatusCode>) ClientBase.GetDelete(String, String, Dictionary<String, String>, IEnumerable<HttpStatusCode>) Namespace : PlayGen.SUGAR.Client Assembly : PlayGen.SUGAR.Client.dll Syntax public class GameClient : ClientBase Constructors GameClient(String, IHttpHandler, Dictionary<String, String>, Dictionary<String, String>, IAsyncRequestController, EvaluationNotifications) Declaration public GameClient(string baseAddress, IHttpHandler httpHandler, Dictionary<string, string> constantHeaders, Dictionary<string, string> sessionHeaders, IAsyncRequestController asyncRequestController, EvaluationNotifications evaluationNotifications) Parameters Type Name Description System.String baseAddress IHttpHandler httpHandler Dictionary < System.String , System.String > constantHeaders Dictionary < System.String , System.String > sessionHeaders IAsyncRequestController asyncRequestController EvaluationNotifications evaluationNotifications Methods Get() Get a list of all Games. Declaration public IEnumerable<GameResponse> Get() Returns Type Description IEnumerable < GameResponse > A list of GameResponse that hold Games details. Get(Int32) Get Game that matches provided. Declaration public GameResponse Get(int id) Parameters Type Name Description System.Int32 id Game id Returns Type Description GameResponse GameResponse which matches search criteria. Get(String) Get a list of Games that match provided. Declaration public IEnumerable<GameResponse> Get(string name) Parameters Type Name Description System.String name Game name Returns Type Description IEnumerable < GameResponse > A list of GameResponse which match the search criteria. GetAsync(Action<IEnumerable<GameResponse>>, Action<Exception>) Declaration public void GetAsync(Action<IEnumerable<GameResponse>> onSuccess, Action<Exception> onError) Parameters Type Name Description Action < IEnumerable < GameResponse >> onSuccess Action < Exception > onError GetAsync(Int32, Action<GameResponse>, Action<Exception>) Declaration public void GetAsync(int id, Action<GameResponse> onSuccess, Action<Exception> onError) Parameters Type Name Description System.Int32 id Action < GameResponse > onSuccess Action < Exception > onError GetAsync(String, Action<IEnumerable<GameResponse>>, Action<Exception>) Declaration public void GetAsync(string name, Action<IEnumerable<GameResponse>> onSuccess, Action<Exception> onError) Parameters Type Name Description System.String name Action < IEnumerable < GameResponse >> onSuccess Action < Exception > onError"
  },
  "api/PlayGen.SUGAR.Client.LeaderboardClient.html": {
    "href": "api/PlayGen.SUGAR.Client.LeaderboardClient.html",
    "title": "Class LeaderboardClient | SUGAR",
    "keywords": "Class LeaderboardClient Controller that facilitates Leaderboard specific operations. Inheritance System.Object ClientBase LeaderboardClient Inherited Members ClientBase.AsyncRequestController ClientBase.EvaluationNotifications ClientBase.SerializerSettings ClientBase.EnableEvaluationNotifications(Boolean) ClientBase.ClearSessionData() ClientBase.AreUriParamsValid(Object[]) ClientBase.GetUriBuilder(String, Object[]) ClientBase.Post<TRequest, TResponse>(String, TRequest, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Post<TRequest>(String, TRequest, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Post<TResponse>(String, Object, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Put<TRequest, TResponse>(String, TRequest, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Put<TRequest>(String, TRequest, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.PostPut<TResponse>(String, String, Dictionary<String, String>, Object, IEnumerable<HttpStatusCode>) ClientBase.PostPut(String, String, Dictionary<String, String>, Object, IEnumerable<HttpStatusCode>) ClientBase.Get<TResponse>(String, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Get(String, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Delete<TResponse>(String, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.Delete(String, IEnumerable<HttpStatusCode>, Dictionary<String, String>) ClientBase.GetDelete<TResponse>(String, String, Dictionary<String, String>, IEnumerable<HttpStatusCode>) ClientBase.GetDelete(String, String, Dictionary<String, String>, IEnumerable<HttpStatusCode>) Namespace : PlayGen.SUGAR.Client Assembly : PlayGen.SUGAR.Client.dll Syntax public class LeaderboardClient : ClientBase Constructors LeaderboardClient(String, IHttpHandler, Dictionary<String, String>, Dictionary<String, String>, IAsyncRequestController, EvaluationNotifications) Declaration public LeaderboardClient(string baseAddress, IHttpHandler httpHandler, Dictionary<string, string> constantHeaders, Dictionary<string, string> sessionHeaders, IAsyncRequestController asyncRequestController, EvaluationNotifications evaluationNotifications) Parameters Type Name Description System.String baseAddress IHttpHandler httpHandler Dictionary < System.String , System.String > constantHeaders Dictionary < System.String , System.String > sessionHeaders IAsyncRequestController asyncRequestController EvaluationNotifications evaluationNotifications Methods CreateGetLeaderboardStandings(LeaderboardStandingsRequest) Get the standings for a Leaderboard using a LeaderboardStandingsRequest . Declaration public IEnumerable<LeaderboardStandingsResponse> CreateGetLeaderboardStandings(LeaderboardStandingsRequest leaderboardDetails) Parameters Type Name Description LeaderboardStandingsRequest leaderboardDetails LeaderboardStandingsRequest object that holds the details that are wanted from the Leaderboard. Returns Type Description IEnumerable < LeaderboardStandingsResponse > Returns multiple LeaderboardStandingsResponse that hold actor positions in the leaderboard. CreateGetLeaderboardStandingsAsync(LeaderboardStandingsRequest, Action<IEnumerable<LeaderboardStandingsResponse>>, Action<Exception>) Declaration public void CreateGetLeaderboardStandingsAsync(LeaderboardStandingsRequest leaderboardDetails, Action<IEnumerable<LeaderboardStandingsResponse>> onSuccess, Action<Exception> onError) Parameters Type Name Description LeaderboardStandingsRequest leaderboardDetails Action < IEnumerable < LeaderboardStandingsResponse >> onSuccess Action < Exception > onError Get(Int32) Find a list of leaderboards that match . Declaration public IEnumerable<LeaderboardResponse> Get(int gameId) Parameters Type Name Description System.Int32 gameId Game ID Returns Type Description IEnumerable < LeaderboardResponse > Returns multiple LeaderboardResponse that hold Leaderboard details Get(String, Int32) Find a single leaderboard matching the token and gameId. Declaration public LeaderboardResponse Get(string token, int gameId) Parameters Type Name Description System.String token Token System.Int32 gameId Returns Type Description LeaderboardResponse Returns a single LeaderboardResponse that holds Leaderboard details GetAsync(Int32, Action<IEnumerable<LeaderboardResponse>>, Action<Exception>) Declaration public void GetAsync(int gameId, Action<IEnumerable<LeaderboardResponse>> onSuccess, Action<Exception> onError) Parameters Type Name Description System.Int32 gameId Action < IEnumerable < LeaderboardResponse >> onSuccess Action < Exception > onError GetAsync(String, Int32, Action<LeaderboardResponse>, Action<Exception>) Declaration public void GetAsync(string token, int gameId, Action<LeaderboardResponse> onSuccess, Action<Exception> onError) Parameters Type Name Description System.String token System.Int32 gameId Action < LeaderboardResponse > onSuccess Action < Exception > onError GetGlobal() Get all global leaderboards, ie. leaderboards that are not associated with a specific game Declaration public IEnumerable<LeaderboardResponse> GetGlobal() Returns Type Description IEnumerable < LeaderboardResponse > Returns multiple LeaderboardResponse that hold Leaderboard details GetGlobal(String) Find a single global leaderboard matching the token. Declaration public LeaderboardResponse GetGlobal(string token) Parameters Type Name Description System.String token Token Returns Type Description LeaderboardResponse Returns a single LeaderboardResponse that holds Leaderboard details GetGlobalAsync(Action<IEnumerable<LeaderboardResponse>>, Action<Exception>) Declaration public void GetGlobalAsync(Action<IEnumerable<LeaderboardResponse>> onSuccess, Action<Exception> onError) Parameters Type Name Description Action < IEnumerable < LeaderboardResponse >> onSuccess Action < Exception > onError GetGlobalAsync(String, Action<LeaderboardResponse>, Action<Exception>) Declaration public void GetGlobalAsync(string token, Action<LeaderboardResponse> onSuccess, Action<Exception> onError) Parameters Type Name Description System.String token Action < LeaderboardResponse > onSuccess Action < Exception > onError"
  },
  "api/PlayGen.SUGAR.Common.ActorType.html": {
    "href": "api/PlayGen.SUGAR.Common.ActorType.html",
    "title": "Enum ActorType | SUGAR",
    "keywords": "Enum ActorType Enum for selecting the target type of actor. Namespace : PlayGen.SUGAR.Common Assembly : PlayGen.SUGAR.Common.dll Syntax public enum ActorType : int Fields Name Description Group Intended for just Groups. Undefined Intended for either Users or Groups. User Intended for just Users."
  },
  "api/PlayGen.SUGAR.Common.EvaluationDataCategory.html": {
    "href": "api/PlayGen.SUGAR.Common.EvaluationDataCategory.html",
    "title": "Enum EvaluationDataCategory | SUGAR",
    "keywords": "Enum EvaluationDataCategory Namespace : PlayGen.SUGAR.Common Assembly : PlayGen.SUGAR.Common.dll Syntax public enum EvaluationDataCategory : int Fields Name Description Achievement GameData MatchData Resource Skill"
  },
  "api/PlayGen.SUGAR.Contracts.AccountSourceRequest.html": {
    "href": "api/PlayGen.SUGAR.Contracts.AccountSourceRequest.html",
    "title": "Class AccountSourceRequest | SUGAR",
    "keywords": "Class AccountSourceRequest Encapsulates log-in source details. Inheritance System.Object AccountSourceRequest Namespace : PlayGen.SUGAR.Contracts Assembly : PlayGen.SUGAR.Contracts.dll Syntax public class AccountSourceRequest : object Examples JSON { Name : \"SUGAR\", RequiresPassword : true } Properties AutoRegister Whether an account is created if one does not already exist for this source Declaration public bool? AutoRegister { get; set; } Property Value Type Description System.Nullable < System.Boolean > Description The source description. Declaration public string Description { get; set; } Property Value Type Description System.String RequiresPassword Whether the user needs to pass a password when logging in via this source Declaration public bool? RequiresPassword { get; set; } Property Value Type Description System.Nullable < System.Boolean > Token The source token. Declaration public string Token { get; set; } Property Value Type Description System.String Extension Methods AccountSourceExtensions.ToModel(AccountSourceRequest)"
  },
  "api/PlayGen.SUGAR.Contracts.TokenLoginRequest.html": {
    "href": "api/PlayGen.SUGAR.Contracts.TokenLoginRequest.html",
    "title": "Class TokenLoginRequest | SUGAR",
    "keywords": "Class TokenLoginRequest Inheritance System.Object TokenLoginRequest Namespace : PlayGen.SUGAR.Contracts Assembly : PlayGen.SUGAR.Contracts.dll Syntax public class TokenLoginRequest : object Fields TokenString Declaration public string TokenString Field Value Type Description System.String"
  },
  "api/PlayGen.SUGAR.Server.Authentication.Filters.html": {
    "href": "api/PlayGen.SUGAR.Server.Authentication.Filters.html",
    "title": "Namespace PlayGen.SUGAR.Server.Authentication.Filters | SUGAR",
    "keywords": "Namespace PlayGen.SUGAR.Server.Authentication.Filters Classes TokenReissueFilter"
  },
  "api/PlayGen.SUGAR.Server.Core.Controllers.AccountSourceController.html": {
    "href": "api/PlayGen.SUGAR.Server.Core.Controllers.AccountSourceController.html",
    "title": "Class AccountSourceController | SUGAR",
    "keywords": "Class AccountSourceController Inheritance System.Object AccountSourceController Namespace : PlayGen.SUGAR.Server.Core.Controllers Assembly : PlayGen.SUGAR.Server.Core.dll Syntax public class AccountSourceController : object Constructors AccountSourceController(ILogger<AccountSourceController>, AccountSourceController) Declaration public AccountSourceController(ILogger<AccountSourceController> logger, AccountSourceController accountSourceDbController) Parameters Type Name Description ILogger < AccountSourceController > logger AccountSourceController accountSourceDbController Methods Create(AccountSource) Declaration public AccountSource Create(AccountSource newSource) Parameters Type Name Description AccountSource newSource Returns Type Description AccountSource Delete(Int32) Declaration public void Delete(int id) Parameters Type Name Description System.Int32 id Get() Declaration public List<AccountSource> Get() Returns Type Description List < AccountSource > Get(Int32) Declaration public AccountSource Get(int id) Parameters Type Name Description System.Int32 id Returns Type Description AccountSource GetByToken(String) Declaration public AccountSource GetByToken(string token) Parameters Type Name Description System.String token Returns Type Description AccountSource Update(AccountSource) Declaration public void Update(AccountSource source) Parameters Type Name Description AccountSource source"
  },
  "api/PlayGen.SUGAR.Server.Model.EvaluationData.html": {
    "href": "api/PlayGen.SUGAR.Server.Model.EvaluationData.html",
    "title": "Class EvaluationData | SUGAR",
    "keywords": "Class EvaluationData Inheritance System.Object EvaluationData Implements IModificationHistory Namespace : PlayGen.SUGAR.Server.Model Assembly : PlayGen.SUGAR.Server.Model.dll Syntax public class EvaluationData : object, IModificationHistory Properties ActorId Declaration public int ActorId { get; set; } Property Value Type Description System.Int32 Category Declaration public EvaluationDataCategory Category { get; set; } Property Value Type Description EvaluationDataCategory DateCreated Declaration public DateTime DateCreated { get; set; } Property Value Type Description DateTime DateModified Declaration public DateTime DateModified { get; set; } Property Value Type Description DateTime EvaluationDataType Declaration public EvaluationDataType EvaluationDataType { get; set; } Property Value Type Description EvaluationDataType GameId Declaration public int GameId { get; set; } Property Value Type Description System.Int32 Id Declaration public int Id { get; set; } Property Value Type Description System.Int32 Key Declaration public string Key { get; set; } Property Value Type Description System.String Match Declaration public virtual Match Match { get; set; } Property Value Type Description Match MatchId Declaration public int? MatchId { get; set; } Property Value Type Description System.Nullable < System.Int32 > Value Declaration public string Value { get; set; } Property Value Type Description System.String Implements IModificationHistory"
  },
  "api/PlayGen.SUGAR.Server.Model.Game.html": {
    "href": "api/PlayGen.SUGAR.Server.Model.Game.html",
    "title": "Class Game | SUGAR",
    "keywords": "Class Game Inheritance System.Object Game Namespace : PlayGen.SUGAR.Server.Model Assembly : PlayGen.SUGAR.Server.Model.dll Syntax public class Game : object Properties Id Declaration public int Id { get; set; } Property Value Type Description System.Int32 Name Declaration public string Name { get; set; } Property Value Type Description System.String"
  },
  "api/PlayGen.SUGAR.Client.ISavedPrefsHandler.html": {
    "href": "api/PlayGen.SUGAR.Client.ISavedPrefsHandler.html",
    "title": "Interface ISavedPrefsHandler | SUGAR",
    "keywords": "Interface ISavedPrefsHandler Namespace : PlayGen.SUGAR.Client Assembly : PlayGen.SUGAR.Client.dll Syntax public interface ISavedPrefsHandler Properties Prefix Declaration string Prefix { get; } Property Value Type Description System.String Methods Delete(String) Declaration void Delete(string key) Parameters Type Name Description System.String key Get<T>(String) Declaration T Get<T>(string key) Parameters Type Name Description System.String key Returns Type Description T Type Parameters Name Description T Save<T>(String, T) Declaration void Save<T>(string key, T value) Parameters Type Name Description System.String key T value Type Parameters Name Description T"
  },
  "api/PlayGen.SUGAR.Server.EntityFramework.html": {
    "href": "api/PlayGen.SUGAR.Server.EntityFramework.html",
    "title": "Namespace PlayGen.SUGAR.Server.EntityFramework | SUGAR",
    "keywords": "Namespace PlayGen.SUGAR.Server.EntityFramework Classes SUGARContext Entity Framework Database Configuration SUGARContextFactory"
  },
  "api/PlayGen.SUGAR.Server.WebAPI.Controllers.UserFriendController.html": {
    "href": "api/PlayGen.SUGAR.Server.WebAPI.Controllers.UserFriendController.html",
    "title": "Class UserFriendController | SUGAR",
    "keywords": "Class UserFriendController Web Controller that facilitates User to User relationship specific operations. Inheritance System.Object UserFriendController Namespace : PlayGen.SUGAR.Server.WebAPI.Controllers Assembly : PlayGen.SUGAR.Server.WebAPI.dll Syntax public class UserFriendController : Controller Constructors UserFriendController(RelationshipController, IAuthorizationService) Declaration public UserFriendController(RelationshipController relationshipCoreController, IAuthorizationService authorizationService) Parameters Type Name Description RelationshipController relationshipCoreController IAuthorizationService authorizationService Methods CreateFriendRequest(RelationshipRequest) Create a new relationship request between two Users. Requires a relationship between the two to not already exist. Example Usage: POST api/userfriend Declaration public Task<IActionResult> CreateFriendRequest(RelationshipRequest relationship) Parameters Type Name Description RelationshipRequest relationship RelationshipRequest object that holds the details of the new relationship request. Returns Type Description Task < IActionResult > A RelationshipResponse containing the new Relationship details. GetFriendRequests(Int32) Get a list of all Users that have relationship requests for this . Example Usage: GET api/userfriend/requests/1 Declaration public Task<IActionResult> GetFriendRequests(int userId) Parameters Type Name Description System.Int32 userId ID of the group. Returns Type Description Task < IActionResult > A list of ActorResponse which match the search criteria. GetFriends(Int32) Get a list of all Users that have relationships with this . Example Usage: GET api/userfriend/friends/1 Declaration public IActionResult GetFriends(int userId) Parameters Type Name Description System.Int32 userId ID of the user. Returns Type Description IActionResult A list of ActorResponse which match the search criteria. GetSentRequests(Int32) Get a list of all Users that have been sent relationship requests for this . Example Usage: GET api/userfriend/sentrequests/1 Declaration public Task<IActionResult> GetSentRequests(int userId) Parameters Type Name Description System.Int32 userId ID of the user. Returns Type Description Task < IActionResult > A list of ActorResponse which match the search criteria. UpdateFriend(RelationshipStatusUpdate) Update an existing relationship between and . Requires the relationship to already exist between the two Users. Example Usage: PUT api/userfriend Declaration public Task<IActionResult> UpdateFriend(RelationshipStatusUpdate relationship) Parameters Type Name Description RelationshipStatusUpdate relationship RelationshipStatusUpdate object that holds the details of the relationship. Returns Type Description Task < IActionResult > UpdateFriendRequest(RelationshipStatusUpdate) Update an existing relationship request between and . Requires the relationship request to already exist between the two Users. Example Usage: PUT api/userfriend/request Declaration public Task<IActionResult> UpdateFriendRequest(RelationshipStatusUpdate relationship) Parameters Type Name Description RelationshipStatusUpdate relationship RelationshipStatusUpdate object that holds the details of the relationship. Returns Type Description Task < IActionResult >"
  },
  "api/PlayGen.SUGAR.Server.WebAPI.Controllers.VersionController.html": {
    "href": "api/PlayGen.SUGAR.Server.WebAPI.Controllers.VersionController.html",
    "title": "Class VersionController | SUGAR",
    "keywords": "Class VersionController Inheritance System.Object VersionController Namespace : PlayGen.SUGAR.Server.WebAPI.Controllers Assembly : PlayGen.SUGAR.Server.WebAPI.dll Syntax public class VersionController : Controller Methods Get() Declaration public IActionResult Get() Returns Type Description IActionResult"
  },
  "api/PlayGen.SUGAR.Server.WebAPI.Controllers.html": {
    "href": "api/PlayGen.SUGAR.Server.WebAPI.Controllers.html",
    "title": "Namespace PlayGen.SUGAR.Server.WebAPI.Controllers | SUGAR",
    "keywords": "Namespace PlayGen.SUGAR.Server.WebAPI.Controllers Classes AccountController Web Controller that facilitates account specific operations. AccountSourceController Web Controller that facilitates AccountSource specific operations. AchievementsController Web Controller that facilitates Achievement specific operations. ActorClaimController Web Controller that facilitates ActorClaim specific operations. ActorDataController Web Controller that facilitates ActorData specific operations. ActorRoleController Web Controller that facilitates ActorRole specific operations. AllianceController Web Controller that facilitates Group to Group relationship specific operations. EvaluationsController GameController Web Controller that facilitates Game specific operations. GameDataController Web Controller that facilitates GameData specific operations. GroupController Web Controller that facilitates Group specific operations. GroupMemberController Web Controller that facilitates User to Group relationship specific operations. LeaderboardsController Web Controller that facilitates Leaderboard specific operations. MatchController Web controller that facillitates Match specific operations. ResourceController Web Controller that facilitates UserData specific operations. RoleClaimController Web Controller that facilitates RoleClaim specific operations. RoleController Web Controller that facilitates Role specific operations. SessionController Web Controller that facilitates session specific operations. SkillsController Web Controller that facilitates Skill specific operations. UserController Web Controller that facilitates User specific operations. UserFriendController Web Controller that facilitates User to User relationship specific operations. VersionController"
  },
  "api/PlayGen.SUGAR.Server.WebAPI.Exceptions.ClaimNotFoundException.html": {
    "href": "api/PlayGen.SUGAR.Server.WebAPI.Exceptions.ClaimNotFoundException.html",
    "title": "Class ClaimNotFoundException | SUGAR",
    "keywords": "Class ClaimNotFoundException Inheritance System.Object SUGARException ClaimNotFoundException Namespace : PlayGen.SUGAR.Server.WebAPI.Exceptions Assembly : PlayGen.SUGAR.Server.WebAPI.dll Syntax public class ClaimNotFoundException : SUGARException Constructors ClaimNotFoundException(String) Declaration protected ClaimNotFoundException(string message) Parameters Type Name Description System.String message"
  },
  "api/PlayGen.SUGAR.Server.WebAPI.Extensions.RoleExtensions.html": {
    "href": "api/PlayGen.SUGAR.Server.WebAPI.Extensions.RoleExtensions.html",
    "title": "Class RoleExtensions | SUGAR",
    "keywords": "Class RoleExtensions Inheritance System.Object RoleExtensions Namespace : PlayGen.SUGAR.Server.WebAPI.Extensions Assembly : PlayGen.SUGAR.Server.WebAPI.dll Syntax public static class RoleExtensions : object Methods ToContract(Role) Declaration public static RoleResponse ToContract(this Role roleModel) Parameters Type Name Description Role roleModel Returns Type Description RoleResponse ToContractList(IEnumerable<Role>) Declaration public static IEnumerable<RoleResponse> ToContractList(this IEnumerable<Role> roleModels) Parameters Type Name Description IEnumerable < Role > roleModels Returns Type Description IEnumerable < RoleResponse > ToModel(RoleRequest) Declaration public static Role ToModel(this RoleRequest roleContract) Parameters Type Name Description RoleRequest roleContract Returns Type Description Role"
  },
  "api/PlayGen.SUGAR.Server.WebAPI.Extensions.SkillExtensions.html": {
    "href": "api/PlayGen.SUGAR.Server.WebAPI.Extensions.SkillExtensions.html",
    "title": "Class SkillExtensions | SUGAR",
    "keywords": "Class SkillExtensions Inheritance System.Object SkillExtensions Namespace : PlayGen.SUGAR.Server.WebAPI.Extensions Assembly : PlayGen.SUGAR.Server.WebAPI.dll Syntax public static class SkillExtensions : object Methods ToContract(Skill) Declaration public static EvaluationResponse ToContract(this Skill model) Parameters Type Name Description Skill model Returns Type Description EvaluationResponse ToContractList(IEnumerable<Skill>) Declaration public static IEnumerable<EvaluationResponse> ToContractList(this IEnumerable<Skill> models) Parameters Type Name Description IEnumerable < Skill > models Returns Type Description IEnumerable < EvaluationResponse > ToSkillModel(EvaluationCreateRequest) Declaration public static Skill ToSkillModel(this EvaluationCreateRequest skillContract) Parameters Type Name Description EvaluationCreateRequest skillContract Returns Type Description Skill ToSkillModel(EvaluationUpdateRequest) Declaration public static Skill ToSkillModel(this EvaluationUpdateRequest skillContract) Parameters Type Name Description EvaluationUpdateRequest skillContract Returns Type Description Skill"
  },
  "api/PlayGen.SUGAR.Server.WebAPI.Extensions.UserExtensions.html": {
    "href": "api/PlayGen.SUGAR.Server.WebAPI.Extensions.UserExtensions.html",
    "title": "Class UserExtensions | SUGAR",
    "keywords": "Class UserExtensions Inheritance System.Object UserExtensions Namespace : PlayGen.SUGAR.Server.WebAPI.Extensions Assembly : PlayGen.SUGAR.Server.WebAPI.dll Syntax public static class UserExtensions : object Methods ToContract(User) Declaration public static UserResponse ToContract(this User userModel) Parameters Type Name Description User userModel Returns Type Description UserResponse ToContractList(IEnumerable<User>) Declaration public static IEnumerable<UserResponse> ToContractList(this IEnumerable<User> userModels) Parameters Type Name Description IEnumerable < User > userModels Returns Type Description IEnumerable < UserResponse > ToUserModel(UserRequest) Declaration public static User ToUserModel(this UserRequest userContract) Parameters Type Name Description UserRequest userContract Returns Type Description User"
  },
  "api/PlayGen.SUGAR.Server.EntityFramework.Controllers.RoleClaimController.html": {
    "href": "api/PlayGen.SUGAR.Server.EntityFramework.Controllers.RoleClaimController.html",
    "title": "Class RoleClaimController | SUGAR",
    "keywords": "Class RoleClaimController Inheritance System.Object DbController RoleClaimController Inherited Members DbController.ContextFactory Namespace : PlayGen.SUGAR.Server.EntityFramework.Controllers Assembly : PlayGen.SUGAR.Server.EntityFramework.dll Syntax public class RoleClaimController : DbController Constructors RoleClaimController(SUGARContextFactory) Declaration public RoleClaimController(SUGARContextFactory contextFactory) Parameters Type Name Description SUGARContextFactory contextFactory Methods Create(RoleClaim) Declaration public RoleClaim Create(RoleClaim roleClaim) Parameters Type Name Description RoleClaim roleClaim Returns Type Description RoleClaim Delete(Int32, Int32) Declaration public void Delete(int role, int claim) Parameters Type Name Description System.Int32 role System.Int32 claim GetClaimsByRole(Int32) Declaration public List<Claim> GetClaimsByRole(int id) Parameters Type Name Description System.Int32 id Returns Type Description List < Claim > GetClaimsByRoles(List<Int32>) Declaration public List<Claim> GetClaimsByRoles(List<int> ids) Parameters Type Name Description List < System.Int32 > ids Returns Type Description List < Claim > GetRolesByClaim(Int32) Declaration public List<Role> GetRolesByClaim(int id) Parameters Type Name Description System.Int32 id Returns Type Description List < Role >"
  },
  "api/PlayGen.SUGAR.Server.EntityFramework.EntityConfigs.SkillConfig.html": {
    "href": "api/PlayGen.SUGAR.Server.EntityFramework.EntityConfigs.SkillConfig.html",
    "title": "Class SkillConfig | SUGAR",
    "keywords": "Class SkillConfig Inheritance System.Object SkillConfig Namespace : PlayGen.SUGAR.Server.EntityFramework.EntityConfigs Assembly : PlayGen.SUGAR.Server.EntityFramework.dll Syntax public class SkillConfig : IEntityTypeConfiguration<Skill> Methods Configure(EntityTypeBuilder<Skill>) Declaration public void Configure(EntityTypeBuilder<Skill> builder) Parameters Type Name Description EntityTypeBuilder < Skill > builder"
  },
  "api/PlayGen.SUGAR.Server.EntityFramework.EntityConfigs.UserConfig.html": {
    "href": "api/PlayGen.SUGAR.Server.EntityFramework.EntityConfigs.UserConfig.html",
    "title": "Class UserConfig | SUGAR",
    "keywords": "Class UserConfig Inheritance System.Object UserConfig Namespace : PlayGen.SUGAR.Server.EntityFramework.EntityConfigs Assembly : PlayGen.SUGAR.Server.EntityFramework.dll Syntax public class UserConfig : IEntityTypeConfiguration<User> Methods Configure(EntityTypeBuilder<User>) Declaration public void Configure(EntityTypeBuilder<User> builder) Parameters Type Name Description EntityTypeBuilder < User > builder"
  },
  "unity-client/features/client-prefabs.html": {
    "href": "unity-client/features/client-prefabs.html",
    "title": "Unity Client Prefabs | SUGAR",
    "keywords": "Unity Client Prefabs There are a number of prefabs included within the Unity package. Example usage can be viewed in the demo scene which can be found at: Assets/SUGAR/Example/Scene.unity After setting up a game using the quick start guide , all prefabs can be seen working by running the demo scene and entering the shortcuts to display each. Each of the prefabs can be activated using the SUGAR prefab provided (which must be added to the scene to use SUGAR). The SUGAR prefab has its own canvas which is rendered above the main Canvas which contains each of the panel prefabs. Each panel can be activated using their display functions, examples of which can be seen in: Assets/SUGAR/Example/Scripts/TestImplemtation.cs Panel Prefabs Panel Prefabs provided AccountPanel EvaluationPanel EvaluationPopup FriendsListPanel UserGroupsPanel GroupMembersPanel LeaderboardListPanel LeaderboardPanel There are 2 variations provided for each of the panels, one for landscape and one for portrait. To switch the orientation used, change the Interface references in the SUGAR prefab to the required orientation prefabs. Panel Overview AccountPanel Handles logging in to SUGAR with username and password entered, does not display if auto login is enabled and the login details are correct. EvaluationPanel Demo Shortcut: Hold T & Press K. Displays the achievements/skills for the current game and which ones have been completed. EvaluationPopup Demo Shortcut: Hold T & Press A. Displays a pop-up to notify users that an achievement or skill has been completed. FriendsListPanel Demo Shortcut: Hold T & Press F. Displays the users that the logged in account is friends with, allowing them to make new friendships, remove existing ones and review pending requests. UserGroupsPanel Demo Shortcut: Hold T & Press G. Displays the groups that the logged in account is a member of, allowing them to leave current groups, join new groups and see pending group requests. GroupMembersPanel Demo Shortcut: Hold T & Press G -> select a group. Displays the members of a specific group, allowing accounts with permissions to manage other accounts within that group. LeaderboardListPanel Demo Shortcut: Hold T & Press L. Displays a list of leaderboards for the current game, allowing users to select one and see the standings. LeaderboardPanel Demo Shortcut: Hold T & Press L -> select a leaderboard. Displays the current standings for the selected leaderboard, allows users to filter results by: Top (the best scores for the current leaderboard), Nearby (the scores near to the current users score), Friends (the current users' friends scores), Group Members (the scores for all members of your primary group), Alliances (the scores of all groups in an alliance with your primary group)."
  },
  "restapi/restapi.html": {
    "href": "restapi/restapi.html",
    "title": "SUGAR Engine REST API | SUGAR",
    "keywords": "SUGAR Engine REST API Account ApiAccountCreatePost Register a new account and creates an associated user. Requires the PlayGen.SUGAR.Contracts.AccountRequest.Name to be unique. Returns a JsonWebToken used for authorization in any further calls to the API. Example Usage: POST api/account/create Request POST /api/Account/create Parameters Name Type Value Notes accountRequest PlayGen.SUGAR.Contracts.AccountRequest object that contains the details of the new Account. Responses Status Code Description Samples 200 Success ApiAccountByIdDelete Delete Account with the ID provided. Example Usage: DELETE api/account/1 Request DELETE /api/Account/{id} Parameters Name Type Value Notes *id integer Account ID. Responses Status Code Description Samples 200 Success AccountSource ApiAccountSourceListGet Get a list of all AccountSources. Example Usage: GET api/accountSource/list Request GET /api/AccountSource/list Responses Status Code Description Samples 200 Success ApiAccountSourceFindbyidByIdGet Get AccountSource that matches provided. Example Usage: GET api/accountSource/findbyid/1 Request GET /api/AccountSource/findbyid/{id} Parameters Name Type Value Notes *id integer Responses Status Code Description Samples 200 Success ApiAccountSourcePost Create a new AccountSource. Requires the PlayGen.SUGAR.Contracts.AccountSourceRequest.Token to be unique. Example Usage: POST api/accountSource Request POST /api/AccountSource Parameters Name Type Value Notes newAccountSource PlayGen.SUGAR.Contracts.AccountSourceRequest object that contains the details of the new AccountSource. Responses Status Code Description Samples 200 Success ApiAccountSourceUpdateByIdPut Update an existing AccountSource. Example Usage: PUT api/accountSource/update/1 Request PUT /api/AccountSource/update/{id} Parameters Name Type Value Notes *id integer Id of the existing AccountSource. accountSource PlayGen.SUGAR.Contracts.AccountSourceRequest object that holds the details of the AccountSource. Responses Status Code Description Samples 200 Success ApiAccountSourceByIdDelete Delete AccountSource with the ID provided. Example Usage: DELETE api/accountSource/1 Request DELETE /api/AccountSource/{id} Parameters Name Type Value Notes *id integer AccountSource ID. Responses Status Code Description Samples 200 Success Achievements ApiAchievementsFindByTokenByGameIdGet Find an Achievement that matches and . Example Usage: GET api/achievements/find/ACHIEVEMENT_TOKEN/1 Request GET /api/Achievements/find/{token}/{gameId} Parameters Name Type Value Notes *token string Token of Achievement *gameId integer ID of the Game the Achievement is for Responses Status Code Description Samples 200 Success ApiAchievementsFindByTokenGlobalGet Find an Achievement that matches and . Example Usage: GET api/achievements/find/ACHIEVEMENT_TOKEN/1 Request GET /api/Achievements/find/{token}/global Parameters Name Type Value Notes *token string Token of Achievement *gameId integer ID of the Game the Achievement is for Responses Status Code Description Samples 200 Success ApiAchievementsGlobalListGet Find a list of Achievements that match . If global is provided instead of a gameId, get all global achievements, ie. achievements that are not associated with a specific game. Example Usage: GET api/achievements/game/1/list Request GET /api/Achievements/global/list Parameters Name Type Value Notes *gameId integer Game ID Responses Status Code Description Samples 200 Success ApiAchievementsGameByGameIdListGet Find a list of Achievements that match . If global is provided instead of a gameId, get all global achievements, ie. achievements that are not associated with a specific game. Example Usage: GET api/achievements/game/1/list Request GET /api/Achievements/game/{gameId}/list Parameters Name Type Value Notes *gameId integer Game ID Responses Status Code Description Samples 200 Success ApiAchievementsGameByGameIdEvaluateByActorIdGet Find the current progress for all achievements for a for . Example Usage: GET api/achievements/game/1/evaluate/1 Request GET /api/Achievements/game/{gameId}/evaluate/{actorId} Parameters Name Type Value Notes *gameId integer ID of Game *actorId integer ID of Group/User Responses Status Code Description Samples 200 Success ApiAchievementsGlobalEvaluateByActorIdGet Find the current progress for all achievements for a for . Example Usage: GET api/achievements/game/1/evaluate/1 Request GET /api/Achievements/global/evaluate/{actorId} Parameters Name Type Value Notes *gameId integer ID of Game *actorId integer ID of Group/User Responses Status Code Description Samples 200 Success ApiAchievementsByTokenByGameIdEvaluateByActorIdGet Find the current progress for an Achievement for . Example Usage: GET api/achievements/ACHIEVEMENT_TOKEN/1/evaluate/1 Request GET /api/Achievements/{token}/{gameId}/evaluate/{actorId} Parameters Name Type Value Notes *token string Token of Achievement *gameId integer ID of the Game the Achievement is for *actorId integer ID of Group/User Responses Status Code Description Samples 200 Success ApiAchievementsByTokenGlobalEvaluateByActorIdGet Find the current progress for an Achievement for . Example Usage: GET api/achievements/ACHIEVEMENT_TOKEN/1/evaluate/1 Request GET /api/Achievements/{token}/global/evaluate/{actorId} Parameters Name Type Value Notes *token string Token of Achievement *gameId integer ID of the Game the Achievement is for *actorId integer ID of Group/User Responses Status Code Description Samples 200 Success ApiAchievementsCreatePost Create a new Achievement. Requires PlayGen.SUGAR.Contracts.EvaluationCreateRequest.Name to be unique to that PlayGen.SUGAR.Contracts.EvaluationCreateRequest.GameId. Example Usage: POST api/achievements/create Request POST /api/Achievements/create Parameters Name Type Value Notes newAchievement PlayGen.SUGAR.Contracts.EvaluationCreateRequest object that holds the details of the new Achievement. Responses Status Code Description Samples 200 Success ApiAchievementsUpdatePut Update an existing Achievement. Example Usage: PUT api/achievements/update Request PUT /api/Achievements/update Parameters Name Type Value Notes achievement PlayGen.SUGAR.Contracts.EvaluationCreateRequest object that holds the details of the Achievement. Responses Status Code Description Samples 200 Success ApiAchievementsByTokenGlobalDelete Delete Achievement with the and provided. Example Usage: DELETE api/achievements/ACHIEVEMENT_TOKEN/1 Request DELETE /api/Achievements/{token}/global Parameters Name Type Value Notes *token string Token of Achievement *gameId integer ID of the Game the Achievement is for Responses Status Code Description Samples 200 Success ApiAchievementsByTokenByGameIdDelete Delete Achievement with the and provided. Example Usage: DELETE api/achievements/ACHIEVEMENT_TOKEN/1 Request DELETE /api/Achievements/{token}/{gameId} Parameters Name Type Value Notes *token string Token of Achievement *gameId integer ID of the Game the Achievement is for Responses Status Code Description Samples 200 Success ActorClaim ApiActorClaimClaimByClaimIdEntityByEntityIdGet Get a list of all Actors for this Claim and Entity. Example Usage: GET api/actorclaim/claim/1/entity/1 Request GET /api/ActorClaim/claim/{claimId}/entity/{entityId} Parameters Name Type Value Notes *claimId integer *entityId integer Responses Status Code Description Samples 200 Success ApiActorClaimActorByIdGet Get a list of all Claims for this Actor. Example Usage: GET api/actorclaim/actor/1/ Request GET /api/ActorClaim/actor/{id} Parameters Name Type Value Notes *id integer Responses Status Code Description Samples 200 Success ApiActorClaimPost Create a new ActorClaim. Example Usage: POST api/actorclaim Request POST /api/ActorClaim Parameters Name Type Value Notes newClaim PlayGen.SUGAR.Contracts.ActorClaimRequest object that contains the details of the new ActorClaim. Responses Status Code Description Samples 200 Success ApiActorClaimByIdDelete Delete ActorClaim with the ID provided. Example Usage: DELETE api/actorclaim/1 Request DELETE /api/ActorClaim/{id} Parameters Name Type Value Notes *id integer ActorClaim ID. Responses Status Code Description Samples 200 Success ActorData ApiActorDataGet Find a list of all ActorData that match the , and provided. Example Usage: GET api/actordata?actorId=1&gameId=1&key=key1&key=key2 Request GET /api/ActorData[?actorId&gameId&key] Parameters Name Type Value Notes actorId integer ID of a User/Group. gameId integer ID of a Game. key array Array of Key names. Responses Status Code Description Samples 200 Success ApiActorDataPost Create a new ActorData record. Example Usage: POST api/actordata Request POST /api/ActorData Parameters Name Type Value Notes newData PlayGen.SUGAR.Contracts.EvaluationDataRequest object that holds the details of the new ActorData. Responses Status Code Description Samples 200 Success ActorRole ApiActorRoleRoleByRoleIdEntityByEntityIdGet Get a list of all Actors for this Role and Entity. Example Usage: GET api/actorrole/role/1/entity/1 Request GET /api/ActorRole/role/{roleId}/entity/{entityId} Parameters Name Type Value Notes *roleId integer *entityId integer Responses Status Code Description Samples 200 Success ApiActorRoleActorByActorIdEntityByEntityIdClaimscopeByScopeNameGet Get a list of all Roles for this Actor, ClaimScope and Entity. Example Usage: GET api/actorrole/actor/1/entity/1/claimscope/game Request GET /api/ActorRole/actor/{actorId}/entity/{entityId}/claimscope/{scopeName} Parameters Name Type Value Notes *actorId integer *entityId integer *scopeName string Responses Status Code Description Samples 200 Success ApiActorRoleControlledGet Get a list of all Roles this Actor has control over. Example Usage: GET api/actorrole/controlled Request GET /api/ActorRole/controlled Responses Status Code Description Samples 200 Success ApiActorRolePost Create a new ActorRole. Example Usage: POST api/actorrole Request POST /api/ActorRole Parameters Name Type Value Notes newRole PlayGen.SUGAR.Contracts.ActorRoleRequest object that contains the details of the new ActorRole. Responses Status Code Description Samples 200 Success ApiActorRoleByIdDelete Delete ActorRole with the ID provided. Example Usage: DELETE api/actorrole/1 Request DELETE /api/ActorRole/{id} Parameters Name Type Value Notes *id integer ActorRole ID. Responses Status Code Description Samples 200 Success Alliance ApiAllianceRequestsByGroupIdGet Get a list of all groups that have relationship requests for this . Example Usage: GET api/alliance/requests/1 Request GET /api/Alliance/requests/{groupId} Parameters Name Type Value Notes *groupId integer ID of the group. Responses Status Code Description Samples 200 Success ApiAllianceSentrequestsByGroupIdGet Get a list of all Groups that have been sent relationship requests for this . Example Usage: GET api/alliance/sentrequests/1 Request GET /api/Alliance/sentrequests/{groupId} Parameters Name Type Value Notes *groupId integer ID of the group. Responses Status Code Description Samples 200 Success ApiAllianceByGroupIdGet Get a list of all groups that have relationships with this . Example Usage: GET api/alliance/1 Request GET /api/Alliance/{groupId} Parameters Name Type Value Notes *groupId integer ID of the group. Responses Status Code Description Samples 200 Success ApiAllianceCountByGroupIdGet Get a count of groups that have a relationship with this . Example Usage: GET api/alliances/count/1 Request GET /api/Alliance/count/{groupId} Parameters Name Type Value Notes *groupId integer ID of the group. Responses Status Code Description Samples 200 Success ApiAlliancePut Update an existing relationship between and . Requires the relationship to already exist between the User and Group. Example Usage: PUT api/alliance Request PUT /api/Alliance Parameters Name Type Value Notes relationship PlayGen.SUGAR.Contracts.RelationshipStatusUpdate object that holds the details of the relationship. Responses Status Code Description Samples 200 Success ApiAlliancePost Create a new relationship request between a Group and Group. Requires a relationship between the User and Group to not already exist. Example Usage: POST api/alliance Request POST /api/Alliance Parameters Name Type Value Notes relationship PlayGen.SUGAR.Contracts.RelationshipRequest object that holds the details of the new relationship request. Responses Status Code Description Samples 200 Success ApiAllianceRequestPut Update an existing relationship request between and . Requires the relationship request to already exist between a Group and Group. Example Usage: PUT api/alliancer/request Request PUT /api/Alliance/request Parameters Name Type Value Notes relationship PlayGen.SUGAR.Contracts.RelationshipStatusUpdate object that holds the details of the relationship. Responses Status Code Description Samples 200 Success Game ApiGameListGet Get a list of all Games. Example Usage: GET api/game/list Request GET /api/Game/list Responses Status Code Description Samples 200 Success ApiGameControlledGet Get a list of all Games this Actor has control over. Example Usage: GET api/game/controlled Request GET /api/Game/controlled Responses Status Code Description Samples 200 Success ApiGameFindByNameGet Get a list of Games that match provided. Example Usage: GET api/game/find/game1 Request GET /api/Game/find/{name} Parameters Name Type Value Notes *name string Game name Responses Status Code Description Samples 200 Success ApiGameFindbyidByIdGet Get Game that matches provided. Example Usage: GET api/game/findbyid/1 Request GET /api/Game/findbyid/{id} Parameters Name Type Value Notes *id integer Game id Responses Status Code Description Samples 200 Success ApiGamePost Create a new Game. Requires the PlayGen.SUGAR.Contracts.GameRequest.Name to be unique. Example Usage: POST api/game Request POST /api/Game Parameters Name Type Value Notes newGame PlayGen.SUGAR.Contracts.GameRequest object that contains the details of the new Game. Responses Status Code Description Samples 200 Success ApiGameUpdateByIdPut Update an existing Game. Example Usage: PUT api/game/update/1 Request PUT /api/Game/update/{id} Parameters Name Type Value Notes *id integer Id of the existing Game. game PlayGen.SUGAR.Contracts.GameRequest object that holds the details of the Game. Responses Status Code Description Samples 200 Success ApiGameByIdDelete Delete Game with the ID provided. Example Usage: DELETE api/game/1 Request DELETE /api/Game/{id} Parameters Name Type Value Notes *id integer Game ID. Responses Status Code Description Samples 200 Success GameData ApiGameDataGet Find a list of all GameData that match the , and provided. Example Usage: GET api/gamedata?actorId=1&gameId=1&key=key1&key=key2 Request GET /api/GameData[?actorId&gameId&key] Parameters Name Type Value Notes actorId integer ID of a User/Group. gameId integer ID of a Game. key array Array of Key names. Responses Status Code Description Samples 200 Success ApiGameDataPost Create a new GameData record. Example Usage: POST api/gamedata Request POST /api/GameData Parameters Name Type Value Notes newData PlayGen.SUGAR.Contracts.EvaluationDataRequest object that holds the details of the new GameData. Responses Status Code Description Samples 200 Success ApiGameDataGameactorsByIdGet Find a list of all Actors that have data saved for the game provided. Example Usage: GET api/gamedata/gameactors/1 Request GET /api/GameData/gameactors/{id} Parameters Name Type Value Notes *id integer ID of a Game. Responses Status Code Description Samples 200 Success ApiGameDataGamekeysByIdGet Find a list of all GameData keys for the provided. Example Usage: GET api/gamedata/gamekeys/1 Request GET /api/GameData/gamekeys/{id} Parameters Name Type Value Notes *id integer ID of a Game. Responses Status Code Description Samples 200 Success ApiGameDataLeaderboardTypeByActorIdByGameIdByKeyByDataTypeBySortTypeGet Find GameData that matches the , , , and provided. Example Usage: GET api/gamedata/leaderboardType/1/1/datakey/long/highest Request GET /api/GameData/leaderboardType/{actorId}/{gameId}/{key}/{dataType}/{sortType} Parameters Name Type Value Notes *actorId integer ID of a User/Group. *gameId integer ID of a Game. *key string Array of Key names. *dataType string Data type of value *sortType string Responses Status Code Description Samples 200 Success Group ApiGroupListGet Get a list of all Groups. Example Usage: GET api/group/list Request GET /api/Group/list Responses Status Code Description Samples 200 Success ApiGroupControlledGet Get a list of all Groups this Actor has control over. Example Usage: GET api/group/controlled Request GET /api/Group/controlled Responses Status Code Description Samples 200 Success ApiGroupFindByNameGet Get a list of Groups that match provided. Example Usage: GET api/group/find/group1 Request GET /api/Group/find/{name} Parameters Name Type Value Notes *name string Group name. Responses Status Code Description Samples 200 Success ApiGroupFindbyidByIdGet Get Group that matches provided. Example Usage: GET api/group/findbyid/1 Request GET /api/Group/findbyid/{id} Parameters Name Type Value Notes *id integer Group id. Responses Status Code Description Samples 200 Success ApiGroupPost Create a new Group. Requires the !:GroupRequest.Name to be unique for Groups. Example Usage: POST api/group Request POST /api/Group Parameters Name Type Value Notes actor PlayGen.SUGAR.Contracts.GroupRequest object that holds the details of the new Group. Responses Status Code Description Samples 200 Success ApiGroupUpdateByIdPut Update an existing Group. Example Usage: PUT api/group/update/1 Request PUT /api/Group/update/{id} Parameters Name Type Value Notes *id integer Id of the existing Group. group PlayGen.SUGAR.Contracts.GroupRequest object that holds the details of the Group. Responses Status Code Description Samples 200 Success ApiGroupByIdDelete Delete group with the provided. Example Usage: DELETE api/group/1 Request DELETE /api/Group/{id} Parameters Name Type Value Notes *id integer Group ID. Responses Status Code Description Samples 200 Success GroupMember ApiGroupMemberRequestsByGroupIdGet Get a list of all Users that have relationship requests for this . Example Usage: GET api/groupmember/requests/1 Request GET /api/GroupMember/requests/{groupId} Parameters Name Type Value Notes *groupId integer ID of the group. Responses Status Code Description Samples 200 Success ApiGroupMemberSentrequestsByUserIdGet Get a list of all Groups that have been sent relationship requests for this . Example Usage: GET api/groupmember/sentrequests/1 Request GET /api/GroupMember/sentrequests/{userId} Parameters Name Type Value Notes *userId integer ID of the user. Responses Status Code Description Samples 200 Success ApiGroupMemberMembersByGroupIdGet Get a list of all Users that have relationships with this . Example Usage: GET api/groupmember/members/1 Request GET /api/GroupMember/members/{groupId} Parameters Name Type Value Notes *groupId integer ID of the group. Responses Status Code Description Samples 200 Success ApiGroupMemberMembercountByGroupIdGet Get a count of users that have a relationship with this . Example Usage: GET api/groupmember/membercount/1 Request GET /api/GroupMember/membercount/{groupId} Parameters Name Type Value Notes *groupId integer ID of the group. Responses Status Code Description Samples 200 Success ApiGroupMemberUsergroupsByUserIdGet Get a list of all Groups that have relationships with this . Example Usage: GET api/groupmember/usergroups/1 Request GET /api/GroupMember/usergroups/{userId} Parameters Name Type Value Notes *userId integer ID of the User. Responses Status Code Description Samples 200 Success ApiGroupMemberPut Update an existing relationship between and . Requires the relationship to already exist between the User and Group. Example Usage: PUT api/groupmember Request PUT /api/GroupMember Parameters Name Type Value Notes relationship PlayGen.SUGAR.Contracts.RelationshipStatusUpdate object that holds the details of the relationship. Responses Status Code Description Samples 200 Success ApiGroupMemberPost Create a new relationship request between the User and Group. Requires a relationship between the User and Group to not already exist. Example Usage: POST api/groupmember Request POST /api/GroupMember Parameters Name Type Value Notes relationship PlayGen.SUGAR.Contracts.RelationshipRequest object that holds the details of the new relationship request. Responses Status Code Description Samples 200 Success ApiGroupMemberRequestPut Update an existing relationship request between and . Requires the relationship request to already exist between the User and Group. Example Usage: PUT api/groupmember/request Request PUT /api/GroupMember/request Parameters Name Type Value Notes relationship PlayGen.SUGAR.Contracts.RelationshipStatusUpdate object that holds the details of the relationship. Responses Status Code Description Samples 200 Success Leaderboards ApiLeaderboardsGlobalListGet Find a list of leaderboards that match . If global is provided instead of a gameId, get all global leaderboards, ie. leaderboards that are not associated with a specific game. Example Usage: GET api/leaderboards/game/1/list Request GET /api/Leaderboards/global/list Parameters Name Type Value Notes *gameId integer Game ID Responses Status Code Description Samples 200 Success ApiLeaderboardsGameByGameIdListGet Find a list of leaderboards that match . If global is provided instead of a gameId, get all global leaderboards, ie. leaderboards that are not associated with a specific game. Example Usage: GET api/leaderboards/game/1/list Request GET /api/Leaderboards/game/{gameId}/list Parameters Name Type Value Notes *gameId integer Game ID Responses Status Code Description Samples 200 Success ApiLeaderboardsByTokenGlobalGet Find a single leaderboard matching the token and gameId. Example Usage: GET api/leaderboards/LEADERBOARD_TOKEN/1 Request GET /api/Leaderboards/{token}/global Parameters Name Type Value Notes *token string Token *gameId integer Responses Status Code Description Samples 200 Success ApiLeaderboardsByTokenGlobalDelete Delete Leaderboard with the and provided. Example Usage: DELETE api/leaderboards/LEADERBOARD_TOKEN/1 Request DELETE /api/Leaderboards/{token}/global Parameters Name Type Value Notes *token string Token of Leaderboard *gameId integer ID of the Game the Leaderboard is for Responses Status Code Description Samples 200 Success ApiLeaderboardsByTokenByGameIdGet Find a single leaderboard matching the token and gameId. Example Usage: GET api/leaderboards/LEADERBOARD_TOKEN/1 Request GET /api/Leaderboards/{token}/{gameId} Parameters Name Type Value Notes *token string Token *gameId integer Responses Status Code Description Samples 200 Success ApiLeaderboardsByTokenByGameIdDelete Delete Leaderboard with the and provided. Example Usage: DELETE api/leaderboards/LEADERBOARD_TOKEN/1 Request DELETE /api/Leaderboards/{token}/{gameId} Parameters Name Type Value Notes *token string Token of Leaderboard *gameId integer ID of the Game the Leaderboard is for Responses Status Code Description Samples 200 Success ApiLeaderboardsCreatePost Create a new Leaderboard. Requires PlayGen.SUGAR.Contracts.LeaderboardRequest.Name and PlayGen.SUGAR.Contracts.LeaderboardRequest.Token to be unique to that PlayGen.SUGAR.Contracts.LeaderboardRequest.GameId. Example Usage: POST api/leaderboards/create Request POST /api/Leaderboards/create Parameters Name Type Value Notes newLeaderboard PlayGen.SUGAR.Contracts.LeaderboardRequest object that holds the details of the new Leaderboard. Responses Status Code Description Samples 200 Success ApiLeaderboardsStandingsPost Get the standings for a Leaderboard using a PlayGen.SUGAR.Contracts.LeaderboardStandingsRequest. Example Usage: POST api/leaderboards/standings Request POST /api/Leaderboards/standings Parameters Name Type Value Notes leaderboardDetails PlayGen.SUGAR.Contracts.LeaderboardStandingsRequest object that holds the details that are wanted from the Leaderboard. Responses Status Code Description Samples 200 Success ApiLeaderboardsUpdatePut Update an existing Leaderboard. Example Usage: PUT api/leaderboards/update Request PUT /api/Leaderboards/update Parameters Name Type Value Notes leaderboard PlayGen.SUGAR.Contracts.LeaderboardRequest object that holds the details of the Leaderboard. Responses Status Code Description Samples 200 Success Match ApiMatchCreateByGameIdGet Method for admins to creates a match for a game they are not logged into. Example Usage: GET api/match/create/1 Request GET /api/Match/create/{gameId} Parameters Name Type Value Notes *gameId integer Responses Status Code Description Samples 200 Success ApiMatchCreateGet Method to create a match for a game a user is currently logged into Example Usage: GET api/match/create Request GET /api/Match/create Responses Status Code Description Samples 200 Success ApiMatchCreateandstartGet Method to create a match for a game a user is currently logged into which is also started automatically. Example Usage: GET api/match/create Request GET /api/Match/createandstart Responses Status Code Description Samples 200 Success ApiMatchByMatchIdStartGet Start a match for the game the user is currently logged into. Example Usage: GET api/match/1/start Request GET /api/Match/{matchId}/start Parameters Name Type Value Notes *matchId integer Responses Status Code Description Samples 200 Success ApiMatchByMatchIdEndGet Ends a match for the game that the user is currently logged in for. Example Usage: GET api/match/1/end Request GET /api/Match/{matchId}/end Parameters Name Type Value Notes *matchId integer Responses Status Code Description Samples 200 Success ApiMatchByGameIdByMatchIdEndGet Method for admins to end a match for a game they are not logged into. Example Usage: GET api/match/1/end Request GET /api/Match/{gameId}/{matchId}/end Parameters Name Type Value Notes *gameId integer *matchId integer Responses Status Code Description Samples 200 Success ApiMatchByStartByEndGet Get a list of matches filtered by a time range. Example Usage: GET api/match/2016-12-20T15:40:30/2016-12-20T16:50:40 Request GET /api/Match/{start}/{end} Parameters Name Type Value Notes *start string *end string Responses Status Code Description Samples 200 Success ApiMatchGameByGameIdGet Get a list of matches for a specific game. Example Usage: GET api/match/game/1 Request GET /api/Match/game/{gameId} Parameters Name Type Value Notes *gameId integer Responses Status Code Description Samples 200 Success ApiMatchGameByGameIdByStartByEndGet Get a list of matches for a specific game, filtered by a time range. Example Usage: GET api/match/game/1/2016-12-20T15:40:30/2016-12-20T16:50:40 Request GET /api/Match/game/{gameId}/{start}/{end} Parameters Name Type Value Notes *gameId integer *start string *end string Responses Status Code Description Samples 200 Success ApiMatchCreatorByCreatorIdGet Get a list of matches that were created by a specific actor. Example Usage: GET api/match/creator/1 Request GET /api/Match/creator/{creatorId} Parameters Name Type Value Notes *creatorId integer Responses Status Code Description Samples 200 Success ApiMatchCreatorByCreatorIdByStartByEndGet Get a list of matches that were created by a specific actor, filtered by a time range. Example Usage: GET api/match/creator/1/2016-12-20T15:40:30/2016-12-20T16:50:40 Request GET /api/Match/creator/{creatorId}/{start}/{end} Parameters Name Type Value Notes *creatorId integer *start string *end string Responses Status Code Description Samples 200 Success ApiMatchGameByGameIdCreatorByCreatorIdGet Get a list of matches for a specific game created by a specific actor. Example Usage: GET api/match/game/1/creator/1 Request GET /api/Match/game/{gameId}/creator/{creatorId} Parameters Name Type Value Notes *gameId integer *creatorId integer Responses Status Code Description Samples 200 Success ApiMatchGameByGameIdCreatorByCreatorIdByStartByEndGet Get a list of matches for a specific game created by a specific user, filtered by a time range. Example Usage: GET api/match/game/1/creator/1/2016-12-20T15:40:30/2016-12-20T16:50:40 Request GET /api/Match/game/{gameId}/creator/{creatorId}/{start}/{end} Parameters Name Type Value Notes *gameId integer *creatorId integer *start string *end string Responses Status Code Description Samples 200 Success ApiMatchGet Find a list of all MatchData that match the input parameters. Example Usage: GET api/match/1/data Request GET /api/Match?matchId[&keys] Parameters Name Type Value Notes *matchId integer Id of a User/Group. keys array Array of Key names. Responses Status Code Description Samples 200 Success ApiMatchPost Create a new GameData record. Example Usage: POST api/match/1/data Request POST /api/Match Parameters Name Type Value Notes newData PlayGen.SUGAR.Contracts.EvaluationDataRequest object that holds the details of the new Match Data. Responses Status Code Description Samples 200 Success Resource ApiResourceGet Find a list of all Resources filtered by the , and provided. Example Usage: GET api/resource?actorId=1&gameId=1&key=key1&key=key2 Request GET /api/Resource[?gameId&actorId&keys] Parameters Name Type Value Notes gameId integer ID of a Game. actorId integer ID of a User/Group. keys array Optional array of Key names to filter results by. Responses Status Code Description Samples 200 Success ApiResourcePost Creates or updates a Resource record. Example Usage: POST api/resource Request POST /api/Resource Parameters Name Type Value Notes resourceRequest PlayGen.SUGAR.Contracts.ResourceAddRequest object that holds the details of the ResourceData. Responses Status Code Description Samples 200 Success ApiResourceTransferPost Transfers a quantity of a specific resource. Example Usage: Post api/resource/transfer Request POST /api/Resource/transfer Parameters Name Type Value Notes transferRequest PlayGen.SUGAR.Contracts.ResourceTransferRequest object that holds the details of the resoruce transfer. Responses Status Code Description Samples 200 Success Role ApiRoleListGet Get a list of all Roles. Example Usage: GET api/role/list Request GET /api/Role/list Responses Status Code Description Samples 200 Success ApiRoleScopeByNameGet Get a list of all Roles for the scope with this name. Example Usage: GET api/role/scope/game Request GET /api/Role/scope/{name} Parameters Name Type Value Notes *name string Responses Status Code Description Samples 200 Success ApiRoleScopedefaultByNameGet Get default Role for the scope with this name. Example Usage: GET api/role/scopedefault/game Request GET /api/Role/scopedefault/{name} Parameters Name Type Value Notes *name string Responses Status Code Description Samples 200 Success ApiRolePost Create a new Role. Requires the PlayGen.SUGAR.Contracts.RoleRequest.Name to be unique. Example Usage: POST api/role Request POST /api/Role Parameters Name Type Value Notes newRole PlayGen.SUGAR.Contracts.RoleRequest object that contains the details of the new Role. Responses Status Code Description Samples 200 Success ApiRoleByIdDelete Delete Role with the ID provided. Example Usage: DELETE api/role/1 Request DELETE /api/Role/{id} Parameters Name Type Value Notes *id integer Role ID. Responses Status Code Description Samples 200 Success RoleClaim ApiRoleClaimRoleByIdGet Get a list of all Claims for this Role. Example Usage: GET api/roleclaim/role/1 Request GET /api/RoleClaim/role/{id} Parameters Name Type Value Notes *id integer Responses Status Code Description Samples 200 Success ApiRoleClaimPost Create a new RoleClaim. Example Usage: POST api/roleclaim Request POST /api/RoleClaim Parameters Name Type Value Notes newRoleClaim PlayGen.SUGAR.Contracts.RoleClaimRequest object that contains the details of the new RoleClaim. Responses Status Code Description Samples 200 Success ApiRoleClaimRoleByRoleIdClaimByClaimIdDelete Delete RoleClaim with the ID provided. Example Usage: DELETE api/roleclaim/role/1/claim/1 Request DELETE /api/RoleClaim/role/{roleId}/claim/{claimId} Parameters Name Type Value Notes *roleId integer Role ID. *claimId integer Claim ID. Responses Status Code Description Samples 200 Success Session ApiLoginplatformPost Logs in an account based on the name and password combination. Returns a JsonWebToken used for authorization in any further calls to the API. Example Usage: POST api/loginplatform Request POST /api/loginplatform Parameters Name Type Value Notes accountRequest PlayGen.SUGAR.Contracts.AccountRequest object that contains the account details provided. Responses Status Code Description Samples 200 Success ApiByGameIdLogingamePost Logs in an account based on the name and password combination. Returns a JsonWebToken used for authorization in any further calls to the API. Example Usage: POST api/1/logingame Request POST /api/{gameId}/logingame Parameters Name Type Value Notes *gameId integer Optional Id of the game the account is logging in for. accountRequest PlayGen.SUGAR.Contracts.AccountRequest object that contains the account details provided. Optional IssueLoginToken will return a token to remember login for future use Responses Status Code Description Samples 200 Success ApiLogintokenPost Login to the game using a provided token Request POST /api/logintoken Parameters Name Type Value Notes tokenLogin The login token receievd from a previous successful login, if requested Responses Status Code Description Samples 200 Success ApiCreateandloginplatformPost Creates a new account and login that account. Example Usage: POST api/createandloginplatform Request POST /api/createandloginplatform Parameters Name Type Value Notes accountRequest PlayGen.SUGAR.Contracts.AccountRequest object that contains the account details provided. Responses Status Code Description Samples 200 Success ApiByGameIdCreateandlogingamePost Creates a new account and login that account. Example Usage: POST api/1/createandlogingame Request POST /api/{gameId}/createandlogingame Parameters Name Type Value Notes *gameId integer Optional Id of the game the account is logging in for. accountRequest PlayGen.SUGAR.Contracts.AccountRequest object that contains the account details provided. Responses Status Code Description Samples 200 Success ApiHeartbeatGet Heartbeat method to keep the specific session alive. Calling it within a server defined interval will notify the server that the session is still active. Request GET /api/heartbeat Responses Status Code Description Samples 200 Success ApiLogoutGet Logs out the currently logged in account, ending it's session and removing the authorization token. Request GET /api/logout Responses Status Code Description Samples 200 Success Skills ApiSkillsFindByTokenByGameIdGet Find a Skill that matches and . Example Usage: GET api/skills/find/SKILL_TOKEN/1 Request GET /api/Skills/find/{token}/{gameId} Parameters Name Type Value Notes *token string Token of Skill *gameId integer ID of the Game the Skill is for Responses Status Code Description Samples 200 Success ApiSkillsFindByTokenGlobalGet Find a Skill that matches and . Example Usage: GET api/skills/find/SKILL_TOKEN/1 Request GET /api/Skills/find/{token}/global Parameters Name Type Value Notes *token string Token of Skill *gameId integer ID of the Game the Skill is for Responses Status Code Description Samples 200 Success ApiSkillsGlobalListGet Find a list of Skills that match . If global is provided instead of a gameId, get all global skills, ie. skills that are not associated with a specific game. Example Usage: GET api/skills/game/1/list Request GET /api/Skills/global/list Parameters Name Type Value Notes *gameId integer Game ID Responses Status Code Description Samples 200 Success ApiSkillsGameByGameIdListGet Find a list of Skills that match . If global is provided instead of a gameId, get all global skills, ie. skills that are not associated with a specific game. Example Usage: GET api/skills/game/1/list Request GET /api/Skills/game/{gameId}/list Parameters Name Type Value Notes *gameId integer Game ID Responses Status Code Description Samples 200 Success ApiSkillsGameByGameIdEvaluateByActorIdGet Find the current progress for all skills for a for . Example Usage: GET api/skills/game/1/evaluate/1 Request GET /api/Skills/game/{gameId}/evaluate/{actorId} Parameters Name Type Value Notes *gameId integer ID of Game *actorId integer ID of Group/User Responses Status Code Description Samples 200 Success ApiSkillsGlobalEvaluateByActorIdGet Find the current progress for all skills for a for . Example Usage: GET api/skills/game/1/evaluate/1 Request GET /api/Skills/global/evaluate/{actorId} Parameters Name Type Value Notes *gameId integer ID of Game *actorId integer ID of Group/User Responses Status Code Description Samples 200 Success ApiSkillsByTokenByGameIdEvaluateByActorIdGet Find the current progress for a Skill for . Example Usage: GET api/skills/SKILL_TOKEN/1/evaluate/1 Request GET /api/Skills/{token}/{gameId}/evaluate/{actorId} Parameters Name Type Value Notes *token string Token of Skill *gameId integer ID of the Game the Skill is for *actorId integer ID of Group/User Responses Status Code Description Samples 200 Success ApiSkillsByTokenGlobalEvaluateByActorIdGet Find the current progress for a Skill for . Example Usage: GET api/skills/SKILL_TOKEN/1/evaluate/1 Request GET /api/Skills/{token}/global/evaluate/{actorId} Parameters Name Type Value Notes *token string Token of Skill *gameId integer ID of the Game the Skill is for *actorId integer ID of Group/User Responses Status Code Description Samples 200 Success ApiSkillsCreatePost Create a new Skill. Requires PlayGen.SUGAR.Contracts.EvaluationCreateRequest.Name to be unique to that PlayGen.SUGAR.Contracts.EvaluationCreateRequest.GameId. Example Usage: POST api/skills/create Request POST /api/Skills/create Parameters Name Type Value Notes newSkill PlayGen.SUGAR.Contracts.EvaluationCreateRequest object that holds the details of the new Skill. Responses Status Code Description Samples 200 Success ApiSkillsUpdatePut Update an existing Skill. Example Usage: PUT api/skills/update Request PUT /api/Skills/update Parameters Name Type Value Notes skill PlayGen.SUGAR.Contracts.EvaluationCreateRequest object that holds the details of the Skill. Responses Status Code Description Samples 200 Success ApiSkillsByTokenGlobalDelete Delete Skill with the and provided. Example Usage: DELETE api/skills/SKILL_TOKEN/1 Request DELETE /api/Skills/{token}/global Parameters Name Type Value Notes *token string Token of Skill *gameId integer ID of the Game the Skill is for Responses Status Code Description Samples 200 Success ApiSkillsByTokenByGameIdDelete Delete Skill with the and provided. Example Usage: DELETE api/skills/SKILL_TOKEN/1 Request DELETE /api/Skills/{token}/{gameId} Parameters Name Type Value Notes *token string Token of Skill *gameId integer ID of the Game the Skill is for Responses Status Code Description Samples 200 Success User ApiUserListGet Get a list of all Users. Example Usage: GET api/user/list Request GET /api/User/list Responses Status Code Description Samples 200 Success ApiUserFindByNameGet Get a list of Users that match provided. Example Usage: GET api/user/find/user1 Request GET /api/User/find/{name}?exactMatch Parameters Name Type Value Notes *name string User name. *exactMatch boolean Match the name exactly. Responses Status Code Description Samples 200 Success ApiUserFindByNameByExactMatchGet Get a list of Users that match provided. Example Usage: GET api/user/find/user1 Request GET /api/User/find/{name}/{exactMatch} Parameters Name Type Value Notes *name string User name. *exactMatch boolean Match the name exactly. Responses Status Code Description Samples 200 Success ApiUserFindbyidByIdGet Get User that matches provided. Example Usage: GET api/user/findbyid/1 Request GET /api/User/findbyid/{id} Parameters Name Type Value Notes *id integer User id. Responses Status Code Description Samples 200 Success ApiUserPost Create a new User. Requires the PlayGen.SUGAR.Contracts.UserRequest's Name to be unique for Users. Example Usage: POST api/user Request POST /api/User Parameters Name Type Value Notes actor PlayGen.SUGAR.Contracts.UserRequest object that holds the details of the new User. Responses Status Code Description Samples 200 Success ApiUserUpdateByIdPut Update an existing User. Example Usage: PUT api/user/update/1 Request PUT /api/User/update/{id} Parameters Name Type Value Notes *id integer Id of the existing User. user PlayGen.SUGAR.Contracts.UserRequest object that holds the details of the User. Responses Status Code Description Samples 200 Success ApiUserByIdDelete Delete user with the provided. Example Usage: DELETE api/user/1 Request DELETE /api/User/{id} Parameters Name Type Value Notes *id integer User ID. Responses Status Code Description Samples 200 Success UserFriend ApiUserFriendRequestsByUserIdGet Get a list of all Users that have relationship requests for this . Example Usage: GET api/userfriend/requests/1 Request GET /api/UserFriend/requests/{userId} Parameters Name Type Value Notes *userId integer ID of the group. Responses Status Code Description Samples 200 Success ApiUserFriendSentrequestsByUserIdGet Get a list of all Users that have been sent relationship requests for this . Example Usage: GET api/userfriend/sentrequests/1 Request GET /api/UserFriend/sentrequests/{userId} Parameters Name Type Value Notes *userId integer ID of the user. Responses Status Code Description Samples 200 Success ApiUserFriendFriendsByUserIdGet Get a list of all Users that have relationships with this . Example Usage: GET api/userfriend/friends/1 Request GET /api/UserFriend/friends/{userId} Parameters Name Type Value Notes *userId integer ID of the user. Responses Status Code Description Samples 200 Success ApiUserFriendPut Update an existing relationship between and . Requires the relationship to already exist between the two Users. Example Usage: PUT api/userfriend Request PUT /api/UserFriend Parameters Name Type Value Notes relationship PlayGen.SUGAR.Contracts.RelationshipStatusUpdate object that holds the details of the relationship. Responses Status Code Description Samples 200 Success ApiUserFriendPost Create a new relationship request between two Users. Requires a relationship between the two to not already exist. Example Usage: POST api/userfriend Request POST /api/UserFriend Parameters Name Type Value Notes relationship PlayGen.SUGAR.Contracts.RelationshipRequest object that holds the details of the new relationship request. Responses Status Code Description Samples 200 Success ApiUserFriendRequestPut Update an existing relationship request between and . Requires the relationship request to already exist between the two Users. Example Usage: PUT api/userfriend/request Request PUT /api/UserFriend/request Parameters Name Type Value Notes relationship PlayGen.SUGAR.Contracts.RelationshipStatusUpdate object that holds the details of the relationship. Responses Status Code Description Samples 200 Success Version ApiVersionGet Request GET /api/Version Responses Status Code Description Samples 200 Success"
  }
}