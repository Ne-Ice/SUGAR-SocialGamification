{
  "concepts/criteria.html": {
    "href": "concepts/criteria.html",
    "title": "Evalutation Criteria | SUGAR",
    "keywords": "Evalutation Criteria <xref:PlayGen.SUGAR.Contracts.EvaluationCriteriaCreateRequest> are the goals which a Users or Group are set in order to complete an Achievement or Skills . At least one must be assigned and only information stored within EvaluationData can be queried against. In order to set up an <xref:PlayGen.SUGAR.Contracts.EvaluationCriteriaCreateRequest> , the following must be passed: Key - The fundermental piece of any criteria. All data collected will require the key to match with what is given here. <xref:PlayGen.SUGAR.Common.EvaluationDataType> - The type of data being queried against. As with key, only data that matches this type will be collected. Example - if \"String\" is given as DataType, only data also stored as \"String\" will be checked against. <xref:PlayGen.SUGAR.Common.CriteriaQueryType> - The type of query that will be performed against the collected data. \"Any\" checks to see if the criteria has been ever met by the collected data. \"Latest\" checks if the last data that matched Key and GameDataType met the criteria. \"Sum\" is used by numeric EvaluationDataTypes (Long and Float) and adds the value of all collected data together. <xref:PlayGen.SUGAR.Common.ComparisonType> - How the retrieved data will be compared against the target value. If the retrieved data compared to the value matches the ComparisonType provided, then the criteria has been met. Example - if the retrieved data equals 20, the value is 15 and the ComparisonType is \"GreaterThan\", the criteria has been met. If the ComparisonType was \"Equals\" then the criteria would not have been met. <xref:PlayGen.SUGAR.Common.CriteriaScope> - The range of data collected for this Actor . The \"Actor\" scope only looks at data stored against the actor directly. \"RelatedActors\" will collect data that have a relationship with the provided actor. Example - \"RelatedActor\" could be used with a group to collect data for all members of that group. Value - The target value which will be checked evaluated against. Must always be passed as a string. Examples Key = \"Gold\", DataType = \"Long\", Scope = \"Actor\", Value = \"15\", ComparisonType = \"GreaterOrEqual\", CriteriaQueryType = \"Sum\" Key = \"Level_1_Time\", DataType = \"Float\", Scope = \"Actor\", Value = \"9.25\", ComparisonType = \"Less\", CriteriaQueryType = \"Any\""
  },
  "features/unity/sendGameData.html": {
    "href": "features/unity/sendGameData.html",
    "title": "Sending GameData | SUGAR",
    "keywords": "Sending GameData For SUGAR to evaluate achievement progresses or leaderboard standings, GameData must be submitted to the server. There is no script component on the core controller gameObject for this. Instead there is a static reference to the GameDataUnityClass via SUGARManager.cs. Whenever any data that is to be evaluated by SUGAR needs to be submitted. call: SUGARManager.GameData.Send(key, value); from your game code."
  },
  "features/unity/leaderboards.html": {
    "href": "features/unity/leaderboards.html",
    "title": "Implementing Leaderboards | SUGAR",
    "keywords": "Implementing Leaderboards Leaderboard and Leaderboard List Unity Client script components handle the display of SUGAR leaderboards. The Leaderboard Interface field is for the panel that contains all the Leaderboards available for the game. There is a fully functional LeaderboardPanel prefab template for this and any custom objects must have a LeaderboardUserInterface attached. The Leaderboard List Interface field is for the list of users that appear in a leaderboard. There is a fully functional LeaderboardListPanel prefab template in the prefabs folder and any custom objects must have a LeaderboardListUserInterface attached."
  },
  "features/unity/configuration.html": {
    "href": "features/unity/configuration.html",
    "title": "Configure Manager | SUGAR",
    "keywords": "Configure Manager The first step is to drag-and-drop the SUGAR prefab into your scene. This prefab is the core controller of all the SUGAR interactions. The SUGAR Unity Manager script component on the prefab holds universal information required by other SUGAR components. Configuring this component is necessary to connect to SUGAR. Base Address - web address of SUGAR server (e.g. http://localhost:62312/ or http://www.mysugarserver.com ). This is overwritten by the value set inside the config.json file (found in \"Assets/StreamingAssets\"). Game Token - name of the Game used for database lookup. Game Id - database row Id of the Game , returned from token lookup. Use Achievements - check this to enable SUGAR Achievement Use Leaderboards - check this to enable SUGAR Leaderboard"
  },
  "features/unity/achievements.html": {
    "href": "features/unity/achievements.html",
    "title": "4. Implementing Achievements | SUGAR",
    "keywords": "4. Implementing Achievements The Achievement Unity Client script component handles all the visual elements of the game's achievements. Achievement List Interface - Gameobject for displaying the full list of achievements available in the game. There is a fully functional template to use in the SUGAR prefabs folder. Any custom gameobjects must have the AchievementListInterace script attached to it. Achievement Popup - Gameobject to notify player when an achievement criteria has been met. There is also a template for this in the prefabs folder, custom gameobjects require AchievementPopupInterface attached to it. Notification Check Rate - Rate at which the client checks to see if any new notifications (such as achievement criterias being met) are ready to display."
  },
  "features/admin/user.html": {
    "href": "features/admin/user.html",
    "title": "Users | SUGAR",
    "keywords": "Users For more information on users view the documentation The users page allows admins to do the following actions: Create new users Manage users' friends Manage users' groups Delete users Create new users The admin can create new users by selecting the \"Create new User\" button, this will prompt a popup to show requesting a username and password to be entered for the new user, the new user will be added to the table in alphatbetical order. Manage users' actor data A user can have actor data for a game, this is managed through the \"Actor Data\" tab. By selecting a game from the drop down list and loading the data, admins will be able to see all the data saved for the current user in that game. If new actor data is needed, simply click the \"Create New Actor Data\" button and fill in the required fields Manage users' friends Each user can have friends, pending friend requests and sent friend requests, from the friends page, admins can remove accepted friends, cancel sent friend requests and accept/reject requests from other users. The 'Add Friend' button will prompt a user name to be entered, the name entered must be an existing user for the friend request to be sent Manage users' groups Each user can be a member of a group, from the groups page admins can make the user join or leave groups. The \"Add Group\" button will prompt a group name to be entered, the name entered must be an existing group for the user to join successfully Users' Details The User Details tab allows the admin to make changes to user metadata. The delete button from the details tab will delete the selected user from the table"
  },
  "demo/index.html": {
    "href": "demo/index.html",
    "title": "Demo | SUGAR",
    "keywords": "Demo Game The demo game serves as a simple tutorial of how one could implement the features of the SUGAR engine. Unity Demo"
  },
  "concepts/session.html": {
    "href": "concepts/session.html",
    "title": "Session | SUGAR",
    "keywords": "Session When a user logs in to a game, a new, unique session is created. When the user logs out, that session is ended. Sessions will automatically be ended if there has been no activity within a certain period. The \"Heartbeat\" method can be used to keep sessions active. Features Login Logout Heartbeat API Client <xref:PlayGen.SUGAR.Client.SessionClient> Contracts <xref:PlayGen.SUGAR.Contracts.AccountRequest> <xref:PlayGen.SUGAR.Contracts.AccountResponse> WebAPI <xref:PlayGen.SUGAR.Server.WebAPI.Controllers.SessionController>"
  },
  "concepts/rewards.html": {
    "href": "concepts/rewards.html",
    "title": "Reward | SUGAR",
    "keywords": "Reward Rewards can be provided to Users and Groups upon completion of Achievements and Skills . Rewards given are stored within GameData, meaning they can in theory be used toward further Criteria and Leaderboards . In order to set up aa <xref:PlayGen.SUGAR.Contracts.RewardCreateRequest>, the following must be passed: Key - The unique identifier for the reward being provided within GameData. DataType - The <xref:PlayGen.SUGAR.Common.EvaluationDataType> of data being stored. Value - The value which is being stored. Examples Key = \"Gold\", DataType = \"Long\", Value = \"15\" Key = \"Bonus_Points\", DataType = \"Float\", Value = \"2.5\","
  },
  "concepts/leaderboardstandings.html": {
    "href": "concepts/leaderboardstandings.html",
    "title": "LeaderboardStandings | SUGAR",
    "keywords": "LeaderboardStandings LeaderboardStandings are used to obtain a collection of Users or Groups based on a specific Leaderboard . In order to setup a <xref:PlayGen.SUGAR.Contracts.LeaderboardStandingsRequest>, the following must be passed: LeaderboardToken - Used to identify the specific Leaderboard that this LeaderboardStandings applies to. GameId - The Game that this LeaderboardStandings and leaderboard is specific to. ActorId - The Actor that we are most concerned with. The actor is used in conjunction with the LeaderboardFilterType. <xref:PlayGen.SUGAR.Common.LeaderboardFilterType> - Allows you to specify how you want the results returned in relation to the actor: Top: Returns the top globally ranked actors. Near: Returns the actors in relation to the actorId Provided. This works in conjunction with the PageOffset. By default it will return a collection that contains the provided actor. Friends: If the actor is a user, only the friends of that user are returned. GroupMembers: If the actor is a group, only the members of that group are returned. PageLimit: The maximum amount of rankings to return. PageOffset: Used in conjunction with the LeaderboardFilterType Near. Example 1 - if the actorId = a user's Id, LeaderboardFilterType = Near, PageLimit = 50 and PageOffset = 0, with the user ranked 80th, a collection of rankings will be returned where the user is at position 30, with 29 rankings before and 20 after. Example 2 - if the actorId = a user's Id, LeaderboardFilterType = Near, PageLimit = 50 and PageOffset = 1, with the user ranked 40th, a collection of rankings between 51th and 100th will be returned, with the user not included. DateStart: Because the leaderboard associated with the LeaderboardStandings queries the GameData of actors to determine their ranking; you can specify a StartDate and EndDate where on the GameData added to the system during that time span will be considered in determining actors' rankings. DateEnd: The end of the date range for gameData to be considered in determining an actor's ranking. Both the DateStart and DateEnd can be left empty in which case all of the gameData for the actors will be considered. Examples LeaderboardToken = \"Player High Score\", GameId = 5, actorId = 23, LeaderboardFilterType = \"Near\", PageLimit = 20, PageOffset = 1, DateStart = null, DateEnd = null,"
  },
  "concepts/entityModel.html": {
    "href": "concepts/entityModel.html",
    "title": "Entity Model | SUGAR",
    "keywords": "Entity Model A Users is the person playing the game. A Group is made up of a collection of Users. Users and Groups both derive from the Actor type. This means that objects that reference an Actor can apply to either a User or a Group. Actors can save GameData . GameData could be: A User's inventory A User's high score A Group's high score etc or any other kind of data that you need to persist between play sessions. Resources are items that can be traded or consumed. An Actor may collect 20 gems and decide to give 10 of them to another actor at a later point, resulting in both actors having 10 gems. As with GameData, Resources can be obtained and given by both Users and Groups. Leaderboards are used to calculate an Actor's ranking against other actors of the same type. One leaderboard may rank Groups by the amount of members they have, in a game where one goal is to make as big a group as possible. Another leaderboard could be the typical high score, where Users are ranked by the score they have saved in the GameData. Achievements look at the GameData of a specfic Actor to see whether they have met the completion criteria for the achievement. An achievement may check to see if an Actor's score is over 100, and if so, the Actor is evaluated as having completed the Achievement. Skills operate in the same way as Achievements but are conceptually different. A Skill has the aim of teaching the player a \"skill\" in the process of completing it. For example, a Skill may be to give 10 gems to 10 different people to complete the \"sharing\" Skill. Achievements and Skills both have Evalutation Criteria which is a set of conditions that need to be met in order for the Skill or Achievement to be considered as completed. AchievementCriteria can look for specific data in GameData. Once completed, an Achievement or Skill may offer rewards to the Actor. These rewards would be in the form of GameData. For example, an Actor may be credited with 20 points on completing an Achievement or Skill. Those 20 points would be saved in that Actor's GameData. Users can create, join and leave Groups. Users can also befriend other Users. Because there may be multiple Games , the Game is used to associate Achievements, Skills, Leaderboards, GameData and Resources whithin that specific game. Each user has an Account . The Account is only used to faciliatate user registration and logging in. After the user has logged in, the Account is not used until the next time they log in."
  },
  "features/admin/skill.html": {
    "href": "features/admin/skill.html",
    "title": "Skills | SUGAR",
    "keywords": "Skills For more information on skills view the documentation The skills page controls the skills for a given game and global skills by selecting from a list of games or the global skills option After selecting a platform the admin can: Create new skills Delete an existing skill Create new skills By selecting \"Create New Skill\" a new page will be opened including all the fields needed for a skill, skills can have multiple criterias added using the \"Add Criteria\" and \"Remove Criteria\" buttons at the bottom of the screen to control the number required. Delete an existing skill Delete button will delete the selected skill from the table"
  },
  "features/admin/SiteMap.html": {
    "href": "features/admin/SiteMap.html",
    "title": "Site Map | SUGAR",
    "keywords": "Site Map The site map below outlines the navigation of pages in the admin panel and the interactions that can be made on each page"
  },
  "features/admin/resource.html": {
    "href": "features/admin/resource.html",
    "title": "Resources | SUGAR",
    "keywords": "Resources For more information on resources view the documentation The resources page controls the resources for a given game and global resources After selecting a platform the admin has two options: Manage available resources Manage resources for users and groups Manage available resources The managing resources screen shows the resources assosiated with the selected platform, with the ability to add new resources or remove existing resources from the platform. Creating Resources Creating resources will show a prompt requesting the admin to enter the data related to the resource Deleting Resources Delete button will delete the selected resource from the table Manage resources for users and groups Users and groups can have a number of resources associated with a platform, this page allows admins to switch between user and group tables to manage resources of a selected actor, by selecting an actor the admin will be shown a list of the resources for the platform and the value the actor currently has for the given resource, using the text entry box, the admin can update values in the table."
  },
  "features/admin/login.html": {
    "href": "features/admin/login.html",
    "title": "Login Screen | SUGAR",
    "keywords": "Login Screen By entering an account name and password, an admin panel user can: Sign in Register a new account Sign in If an account already exists, use the log in details and select the \"Sign In\" button, if successful the main page will be shown. Register a new account The admin panel will by default only have 1 user, admin. (default credentials: username: admin, password: admin). If new accounts are required, this can be done through the Create New User functionality. Main Page After successfully signing in to a new or existing account, the main page is shown, from which there is access to the rest of the admin panel as shown in the Site Map along with the option to log out in the top right of the screen. The navigation bar at the top of the screen will persisit through pages whilst logged in."
  },
  "features/admin/leaderboard.html": {
    "href": "features/admin/leaderboard.html",
    "title": "Leaderboard | SUGAR",
    "keywords": "Leaderboard For more information on leaderboards view the documentation The leaderboards page prompts the admin to select a platform from the list of games or global leaderboards, once a platform has been selected, the user is shown the list of leaderboards that are already associated with that platform, from here the admin can: View a leaderboard Create a new leaderboard Delete a leaderboard configuration View a leaderboard If the table of leaderboards for the selected platform is not empty, selecting an existing leaderboard in the table will launch the list of actors and their standings Create a new leaderboard By selecting the \"Create New Leaderboard\" button, the admin is directed to add the required fields for a new leaderboard, including; leaderboard name, a unique token used for accessing the leaderboard outside of the admin panel, the actor type, the type of game data that is being tracked and the order the leaderboard should be shown in Delete a leaderboard configuration Delete button will delete the selected leaderboard from the table"
  },
  "features/skill.html": {
    "href": "features/skill.html",
    "title": "Skills | SUGAR",
    "keywords": "Skills Skills represent a players proficiency or ability. SUGAR allows the game designer to define and track which skills the game is designed to teach. Such a skill is globally defined with a game-specific criteria. The criteria checks the GameData table for occurrences that serve as evidence of that skill's demonstration. Note Both Skills and Achievements build on \"Evaluations\" which may contain a multitude of \"EvaluationCriteria\", specifiying the conditions that need to be satisfied for this specific Evaluation to be considered complete. Features Get all skills Get all skills that match a name/id Get all skills associated with a particular game Get a player's performance of a particular skill Can be global or game-specific CRUD Skill CRUD Skill Metadata Search Skill (ID/name/metadata/Actor) API Client <xref:PlayGen.SUGAR.Client.SkillClient> Contracts <xref:PlayGen.SUGAR.Contracts.EvaluationCriteriaCreateRequest> <xref:PlayGen.SUGAR.Contracts.EvaluationProgressResponse> <xref:PlayGen.SUGAR.Contracts.EvaluationCreateRequest> <xref:PlayGen.SUGAR.Contracts.EvaluationUpdateRequest> <xref:PlayGen.SUGAR.Contracts.EvaluationResponse> <xref:PlayGen.SUGAR.Common.EvaluationDataType> <xref:PlayGen.SUGAR.Common.CriteriaQueryType> <xref:PlayGen.SUGAR.Common.ComparisonType> <xref:PlayGen.SUGAR.Common.ActorType> <xref:PlayGen.SUGAR.Common.CriteriaScope> WebAPI <xref:PlayGen.SUGAR.Server.WebAPI.Controllers.SkillsController> Examples Create a skill Skills work identically to Achievements , utilising the same contracts and GameData . This example shows how to set up the Swordsmanship skill for a game. The skill has an [<xref:PlayGen.SUGAR.Contracts.EvaluationCriteriaCreateRequest> specifying the value and ComparisonType to determine at which point the skill has been learnt, key \"Swordsmanship\" and CriteriaQueryType to sum all GameData entry values matching the key. public SUGARClient sugarClient = new SUGARClient(BaseUri); private SkillClient _skillClient; private int _gameId; private void SetUpSkill() { // create instance of the achievement client _skillClient = sugarClient.Skill; // create an EvaluationCriteria list var EvaluationCriteria = new List<EvaluationCriteria>() { new EvaluationCriteria() { DataType = GameDataType.Long, Value = \"100\", Key = \"Swordsmanship\", CriteriaQueryType = CriteriaQueryType.Sum, ComparisonType = ComparisonType.GreaterOrEqual, Scope = CriteriaScope.Actor } }; // place the criteria inside an EvaluationCreateRequest var EvaluationCreateRequest = new EvaluationCreateRequest() { GameId = _gameId, Name = \"Swordsmanship Skill!\", ActorType = ActorType.User, Token = \"swordsmanship\", CompletionCriteria = EvaluationCriteria }; // create the skill _skillClient.Create(EvaluationCreateRequest); } Submitting data for when somthing which may be used to evaluate progress towards a Skill A skill uses keys in GameData that match its <xref:PlayGen.SUGAR.Contracts.EvaluationCriteriaCreateRequest>. This data is submitted at points in the game which demonstrate progress towards the skill (as well as other uses). private void SwingSword() { // *Sword Swinging Code* // // create instance of GameDataClient var gameDataClient = sugarClient.GameData; // create GameDataRequest var gameDataRequest = new GameDataRequest() { GameId = _gameId, ActorId = _userId, GameDataType = GameDataType.Long, Value = \"1\", Key = \"Swordsmanship\" }; // add the GameData gameDataClient.Add(gameDataRequest); } Automatically recieve skill progress completion notifications: Enable and use automatic notifications: _skillClient.EnableNotifications(true); And then poll to see if any achievements have been recieved. EvaluationNotification notification; if(_skillClient.TryGetPendingNotification(out notification)) { // There was a penging skill notification, so do something with it Log.Info($\"Got skill notification: {notification.Name} \" + $\"with progress: {notification.Progress}\"); } Requesting specific using the SkillClient 's GetSkillProgress function and specifying the GameId, ActorId and Token returns an <xref:PlayGen.SUGAR.Contracts.EvaluationProgressResponse> object for that Actor's progress towards the skill in that game. private float CheckSkillProgress() { // Check the user's progress towards the achievements in the specified game var skillProgressResponse = _skillClient.GetSkillProgress ( \"swordsmanship\", _gameId, _userId ); // Output the progress return skillProgressResponse.Progress; }"
  },
  "features/roadmap.html": {
    "href": "features/roadmap.html",
    "title": "Roadmap | SUGAR",
    "keywords": "Roadmap This page provides an overview of upcoming development for the platform. Features Matches Track play sessions and associated data Schedule competitive/cooperative games Pre-configure player to game role mapping Provide synchronisation mechanism for match/round/session start Matchmaking Matching players based on arbitrary criteria using game data evaluation Score matching History matching Plugin external matching algorithms (to support matching functions from RAGE) Integration with Tournaments Tournaments Providing a variety of team based game dynamics, tournaments can be configured as: Round-robin Knock-out Combination of both Challenge system Issue challenges to players, groups or globally Set time and arbitary criteria restrictions on challenge eligibility Portable achievement system Integration with achievement systems on popular app stores and game distribution platforms. Rewards Resources can be awarded for participation in Matches and Tournaments. Group Permissioning Group roles with configurable permissions Group resource accessibility restrictions Group Alliance Extended Group Achievements See Group Tech Standalone API Create an offline and/or in memory GameData store and expose criteria evaluation functions. Implement state machine and game logic decisions using GameData evaluation WebSockets Add push messaging and event/message aggregation to API. ???"
  },
  "features/resource.html": {
    "href": "features/resource.html",
    "title": "Resources | SUGAR",
    "keywords": "Resources Resources provide a flexible set of game objects which may be associated with actors. Resources may represent or track such objects as scores, experience points, in-game currency or in-game items. They may be earned, spent, gifted or otherwise associated. Resource provide the ability for inventories to be assigned to individual or group actors. Resources are game objects which are obtained and exchanged by players. They may be consumable or permanent. Examples of resources include in-game currency, items, gifts and tools. A resource can be set to exist outside a game instance, allowing exchanges from external social platforms. Modulation of resources is handled by the EvaluationData system. Resources can belong to a group, where it becomes shared by all members of that group. Features CRUD Resources Search Resources (ID/Name/Actor/Relationship) Gift resource from one actor to another API Client ResourceClient Contracts ResourceAddRequest ResourceResponse ResourceTransferRequest ResourceTransferResponse WebAPI ResourceController Examples Creating a resource The ResourceClient has an AddOrUpdate function which adds a new resource entry belonging to the user into GameData or automatically updates an existing one if a duplicate entry was to be made. The function takes a ResourceAddRequest parameter and returns a ResourceResponse . This example will show how to both add a new entry or increment a player's amount of Valyrian steel. This is done by specifying the key \"ValyrianSteel\" which will be added with a value matching the quantity to GameData. If the entry already exists, it will add the quantity to its value (or subtract if the quantity is negative). public SUGARClient sugarClient = new SUGARClient(BaseUri); private ResourceClient _resourceClient; private int _gameId; private int _userId; private void AddOrUpdateResource(int quantity) { // create instance of the resource client _resourceClient = sugarClient.Resource; // create a ResourceAddRequest var resourceAddRequest = new ResourceAddRequest { GameId = _gameId, ActorId = _userId, Key = \"ValyrianSteel\", Quantity = quantity }; // Add the resource or update an existing key _resourceClient.AddOrUpdate(resourceAddRequest); } Transfer a resource This example will show how to give Valryian to another player. The ResourceClient 's Transfer function handles this taking a ResourceTransferRequest parameter and returning a ResourceTransferResponse object. When the transfer is made, it adds the resource quantity to the target user, and subtracts it from the source user. private void TransferResource(int quantity, int targetUser) { // create a ResourceTransferRequest var resourceTransferRequest = new ResourceTransferRequest { GameId = _gameId, SenderActorId = _userId, RecipientActorId = targetUser, Key = \"ValyrianSteel\", Quantity = quantity, }; // transfer the resources from the user to the target _resourceClient.Transfer(resourceTransferRequest); } Roadmap Read/write access management for group resources Extended permissions. Proving mechanism to set ownership, and control of usage access. For example a player may own an item in the game which they can ‘lend’ to another player to use for a period, without the other player owning it. *Extended metadata. Providing mechanism to record additional metadata against resources such as being able to rate them or track a history of owners or uses. *Tradable resources Providing mechanism for actors to trade and exchange resource, including management of agreement by multiple parties through escrow system."
  },
  "features/relationship.html": {
    "href": "features/relationship.html",
    "title": "Relationship | SUGAR",
    "keywords": "Relationship Relationships are connections between two or more entities. For example a user belonging to a group or a user being friends or following another user. Relationships may follow a step by step process depending on the use case, for example in adding a ‘friend’, the relationship is initially stored as a request from the requester to the receiver until accepted by the receiver. Whereas the receiver may also refuse or block the request. Features CRUD Relationship CRUD Relationship request Search Relationship (ID/Actor) API Client <xref:PlayGen.SUGAR.Client.GroupMemberClient> <xref:PlayGen.SUGAR.Client.UserFriendClient> <xref:PlayGen.SUGAR.Client.AllianceClient> Contracts <xref:PlayGen.SUGAR.Contracts.RelationshipStatusUpdate> <xref:PlayGen.SUGAR.Contracts.RelationshipRequest> <xref:PlayGen.SUGAR.Contracts.RelationshipResponse> <xref:PlayGen.SUGAR.Contracts.ActorResponse> Examples Adding a User to a Group A Group can be joined by an actor. This will create a user to group relationship request. In this example, we will set the AutoAccept property in the <xref:PlayGen.SUGAR.Contracts.RelationshipRequest> object to true, so the relationship will be stored directly as a user to group relationship. The joined group's id is then extracted from the <xref:PlayGen.SUGAR.Contracts.RelationshipResponse>. public SUGARClient sugarClient = new SUGARClient(BaseUri); private GroupMemberClient _groupMemberClient; private int _userId; private int _groupId; private void JoinGroup(int groupId) { // create instance of the group member client _groupMemberClient = sugarClient.GroupMember; // create a RelationshipRequest var relationshipRequest = new RelationshipRequest { AcceptorId = groupId, RequestorId = _userId, AutoAccept = true }; // create the member request and store the response var relationshipResponse = _groupMemberClient.CreateMemberRequest(relationshipRequest); // store the id of the group for use in other functions _groupId = relationshipResponse.AcceptorId; } Leaving a group A user to group relationship status can be updated using a <xref:PlayGen.SUGAR.Contracts.RelationshipStatusUpdate> with the <xref:PlayGen.SUGAR.Client.GroupMemberClient>'s UpdateMember function. This example shows the user leaving the group joined in the previous example. Calling the function automatically breaks the relationship between the group and player if there is one, without the need of passing the additional Accepted property in the RelationshipStatusUpdate. private void LeaveGroup() { // create a RelationshipStatusUpdate var relationshipStatusUpdate = new RelationshipStatusUpdate { AcceptorId = _groupId, RequestorId = _userId }; // create the member request and store the response _groupMemberClient.UpdateMember(relationshipStatusUpdate); } Adding a friend Works identically to joining a group, except creating user to user relationships and using the <xref:PlayGen.SUGAR.Client.UserFriendClient>. public SUGARClient sugarClient = new SUGARClient(BaseUri); private UserFriendClient _userFriendClient; private int _userId; private int _friendId; private void JoinGroup(int targetUserId) { // create instance of the user friend client _userFriendClient = sugarClient.UserFriend; // create a RelationshipRequest var relationshipRequest = new RelationshipRequest { AcceptorId = targetUserId, RequestorId = _userId, AutoAccept = true }; // create the friend request and store the response var relationshipResponse = _userFriendClient.CreateFriendRequest(relationshipRequest); // store the id of the group for use in other functions _friendId = relationshipResponse.AcceptorId; } Removing a friend Like leaving a group, removing a friend updates the user to user relationship using a <xref:PlayGen.SUGAR.Contracts.RelationshipStatusUpdate> with <xref:PlayGen.SUGAR.Client.UserFriendClient>'s UpdateFriend function. private void RemoveFriend() { // create a RelationshipStatusUpdate var relationshipStatusUpdate = new RelationshipStatusUpdate { AcceptorId = _friendId, RequestorId = _userId, Accepted = true }; // create the member request and store the response _userFriendClient.UpdateFriend(relationshipStatusUpdate); } Creating an alliance Two Groups can be joined together in an alliance. This will create a group to group relationship request. In this example, we will set the AutoAccept property in the <xref:PlayGen.SUGAR.Contracts.Shared.RelationshipRequest> object to true, so the relationship will be stored directly as a group to group relationship. The joined group's id is then extracted from the <xref:PlayGen.SUGAR.Contracts.Shared.RelationshipResponse>. public SUGARClient sugarClient = new SUGARClient(BaseUri); private AllianceClient _allianceClient; private int _requestorGroupId; private int _acceptorGroupId; private void CreateAlliance(int groupId) { // create instance of the Alliance client _allianceClient = sugarClient.Alliance; // create a RelationshipRequest var relationshipRequest = new RelationshipRequest { RequestorId = _requestorGroupId, AcceptorId = _acceptorGroupId, AutoAccept = true }; // create the member request and store the response var relationshipResponse = _allianceClient.CreateAlliance(relationshipRequest); // store the id of the group for use in other functions _acceptorGroupId = relationshipResponse.AcceptorId; } Breaking an alliance A group to group relationship status can be updated using a <xref:PlayGen.SUGAR.Contracts.Shared.RelationshipStatusUpdate> with the <xref:PlayGen.SUGAR.Client.AllianceClient>'s UpdateAlliance function. This example shows the user breaking the alliance created in the previous example. Calling the function automatically breaks the relationship between the two groups if there is one, without the need of passing the additional Accepted property in the RelationshipStatusUpdate. private void BreakAlliance() { // create a RelationshipStatusUpdate var relationshipStatusUpdate = new RelationshipStatusUpdate { AcceptorId = _acceptorGroupId, RequestorId = _requestorGroupId }; // create the member request and store the response _allianceClient.UpdateAlliance(relationshipStatusUpdate); }"
  },
  "features/match.html": {
    "href": "features/match.html",
    "title": "Matches | SUGAR",
    "keywords": "Matches A match is an entity with a start time, end time, game and creator. It can have various data attrubuted to it via the MatchData mechanism. Features CRUD Match Search Matches with filters: game, creator, start time, end time Add and Get Match specific data API Client <xref:PlayGen.SUGAR.Client.MatchClient> Contracts <xref:PlayGen.SUGAR.Contracts.MatchResponse> WebAPI <xref:PlayGen.SUGAR.Server.WebAPI.Controllers.MatchController> Examples Create a match public SUGARClient sugarClient = new SUGARClient(BaseUri); private MatchClient _matchClient; private int _gameId; private void CreateMatch() { // create instance of the match client _matchClient = sugarClient.Match; // create the match and store the response var matchResponse = _matchClient.Create(); // store the id of the match for use in other features _matchId = matchResponse.Id; } Starting a match private MatchResponse StartMatch(int matchId) { // check for the match and store the response var matchResponse = _matchClient.Get(matchId); // Start the match matchResponse = _matchClient?.Start(matchResponse.Id); return matchResponse: } Ending a match private MatchResponse EndMatch(int matchId) { // check for the match and store the response var matchResponse = _matchClient.Get(matchId); // End the match matchResponse = _matchClient?.End(matchResponse.Id); return matchResponse: } Adding match data private EvaluationDataResponse AddMatchData(int matchId, int userId) { var matchResponse = _matchClient.Get(matchId); var matchData = SUGARClient.Match.AddData(new EvaluationDataRequest { RelatedEntityId = matchResponse.Id, GameId = matchResponse.Game.Id, CreatingActorId = userId, EvaluationDataType = EvaluationDataType.Long, Key = \"MyMatchScore\", Value = 100 }); return matchData: } Getting match data private EvaluationDataResponse GetAllMatchData(int matchId) { var matchResponse = _matchClient.Get(matchId); var allDataForMatch = SUGARClient.Match.GetData(matchId); return allDataForMatch: }"
  },
  "features/leaderboard.html": {
    "href": "features/leaderboard.html",
    "title": "Leaderboard | SUGAR",
    "keywords": "Leaderboard Leaderboards provide a visual comparison tool for measurements of resources or objects associated with actors. A wide variety of leaderboards are supported including those based achievement or resource based on individual, group or single and multiple games. Leaderboards can utilise any GameData , Actor , Skill or Resource . Features Generate a leaderboard by: Game / Resource / Skill / Actor ActorType (Group, Player) Key (from GameData, Resource, Actor, Skill) Aggregation of values by: Frequency Summation Earliest/Latest occurrence Highest/Lowest overall occurrence Filter results by threshold values (e.g. top 20 or around current player's rank) or Relationships API Client <xref:PlayGen.SUGAR.Client.LeaderboardClient> Contracts <xref:PlayGen.SUGAR.Contracts.LeaderboardRequest> <xref:PlayGen.SUGAR.Contracts.LeaderboardResponse> <xref:PlayGen.SUGAR.Contracts.LeaderboardStandingsRequest> <xref:PlayGen.SUGAR.Contracts.LeaderboardStandingsResponse> <xref:PlayGen.SUGAR.Common.LeaderboardType> <xref:PlayGen.SUGAR.Common.LeaderboardFilterType> <xref:PlayGen.SUGAR.Common.EvaluationDataType> <xref:PlayGen.SUGAR.Common.CriteriaScope> <xref:PlayGen.SUGAR.Common.ActorType> Examples Create a leaderboard This example shows how to create a leaderboard which will display the highest rankings for the combined total of kingdoms the players have conquered. This uses <xref:PlayGen.SUGAR.Client.LeaderboardClient>'s Create function, passing a <xref:PlayGen.SUGAR.Contracts.LeaderboardRequest> as the parameter. This request will specify the identifier token \"MOST_KINGDOMS_CONQUERED\", key for which to check in GameData \"KingdomsConquered\" and <xref:PlayGen.SUGAR.Common.LeaderboardType> Cumulative to add all the values of every entry matching the key. The code will then store the Token of the leaderboard from the <xref:PlayGen.SUGAR.Contracts.LeaderboardResponse> for later use. public SUGARClient sugarClient = new SUGARClient(BaseUri); private LeaderboardClient _leaderboardClient; private int _gameId; private string _leaderboardToken; private void CreateLeaderboard() { // create instance of the leaderboard client _leaderboardClient = sugarClient.Leaderboard; // create a LeaderboardRequest var leaderboardRequest = new LeaderboardRequest { GameId = _gameId, Name = \"Most Kingdoms Conquered\", Token = \"MOST_KINGDOMS_CONQUERED\", Key = \"KingdomsConquered\", ActorType = ActorType.User, GameDataType = GameDataType.Long, CriteriaScope = CriteriaScope.Actor, LeaderboardType = LeaderboardType.Cumulative }; // create the leaderboard and store the response var leaderboardResponse = _leaderboardClient.Create(leaderboardRequest); // store the token of the leaderboard for use in other functions _leaderboardToken = leaderboardResponse.Token; } Get standings for a leaderboard To display the leaderboard inside the game, the current standings of the leaderboard must be retreived. The <xref:PlayGen.SUGAR.Client.LeaderboardClient>'s CreateGetLeaderboardStandings function is called by passing a <xref:PlayGen.SUGAR.Contracts.LeaderboardStandingsRequest> object as the parameter, which specifies filters for the returned results. This example will retreive the 8 rankings nearest to the player by setting the <xref:PlayGen.SUGAR.Common.LeaderboardFilterType> to Near, the limit to 8 and offset as 0. The returned <xref:PlayGen.SUGAR.Contracts.LeaderboardStandingsResponse> contains all the data to populate the visual representation of the leaderboard. private void GetLeaderboardStadings() { // create a LeaderboardStandingsRequest var leaderboardStandingsRequest = new LeaderboardStandingsRequest { LeaderboardToken = _leaderboardToken, GameId = _gameId, ActorId = _userId, LeaderboardFilterType = LeaderboardFilterType.Near, PageLimit = 8, PageOffset = 0 }; // retreive the standings and store the responses var leaderboardStandingsResponse = _leaderboardClient.CreateGetLeaderboardStandings(leaderboardStandingReqeusts); // output the leaderboard foreach (var standing in leaderboardStandings) { Console.WriteLine(standing.Ranking.ToString() + \" | \" + standing.ActorName + \" | Conquered: \" + standing.Value); } }"
  },
  "features/admin/game.html": {
    "href": "features/admin/game.html",
    "title": "Games | SUGAR",
    "keywords": "Games For more information on games view the documentation The games page shows a list of all games that the admin has permission to view, from here admins can create, edit and delete games. Create new games The admin can create new games by selecting the \"Create New Game\" button which will prompt admins to add a game with a name and a description, the new game will be added to the table in alphabetical order. Game Details After selecting a game, metadata for the selected game is displayed, from which admins can make changes or delete the game. The tabs available direct to different pages to manage the game and create Game Data , Achievements , Skills , Resources and leaderboards for the current game. Creating Game Data From the Game Data tab, New game data can be added for each user by filling out the form, then can be viewed by selecting a user and loading their data Creating Game Achievements and Skills Both the Achievements and Skills tabs have the same functionality where they allow admins to view existing, create new and delete Achievements and Skills. When creating a new achievment or skill, a page will show that contains all the fields required and allows for multiple criteria to added for each achievement or skill. Creating Game Resources The resources tab allows admins to view each users resources for the current game and make any changes they wish, this tab also allows for new resources to be created for each user. Creating Game Leaderbaords Leaderboards for a game can be viewed from the leaderboards tab, from here; new leaderboards can be created, existing leaderboards can be edited, deleted or can be viewed to see actor standings. Managing Game Roles The final tab allows admins to manage which users have access to the game, by adding new accounts, more users will have permissions to make changes to this game."
  },
  "features/admin/achievement.html": {
    "href": "features/admin/achievement.html",
    "title": "Achievement | SUGAR",
    "keywords": "Achievement For more information on achievements view the documentation From a game profile, admins can create, view and edit achievemnets. The image below shows a list of achievements for a game, clicking \"View\" will expand the achievement and provide more details about the criteria and rewards Create a new achievement By selecting \"Create New Achievement\" a new page will be opened including all the fields needed for an achievement, achievements can have multiple criterias added using the \"Add Criteria\" and \"Remove Criteria\" buttons at the bottom of the screen to control the number required. Delete an existing achievement Delete button will delete the selected achievement from the table"
  },
  "features/user.html": {
    "href": "features/user.html",
    "title": "Users | SUGAR",
    "keywords": "Users Users are individuals interacting with the system. They may fulfil a range of roles including player, game master, game admin, teacher or system admin. Users can have metadata associated with them, such as nice name, profile image and bio. Features CRUD users Search users (name/id) CRUD user metadata User Name User Bio User profile icon API Client UserClient Contracts AchievementProgressResponse ActorRequest ActorResponse WebAPI UserController Roadmap Integration of permission system. Providing the ability to set system or game specific permission across the platform functionalities. User id mapping. Providing the ability for an individual to have multiple usernames depending on their role, or connect with one or more social media accounts for example for authentication."
  },
  "concepts/index.html": {
    "href": "concepts/index.html",
    "title": "Overview | SUGAR",
    "keywords": "Overview This section provides more detailed descriptions on how elements of the SUGAR system could and should be utilised. The following is included within this section: Account : Data used for logging in and permissions. Session : User active sessions. Entity Model : Diagram and descriptions of the different parts of the entity model and how they work together. Evalutation Criteria : How <xref:PlayGen.SUGAR.Contracts.EvaluationCriteriaCreateRequest> for Achievement and Skills can be utilised within the system. Reward : Details on what can be rewarded for completing Achievements and Skills . LeaderboardStandings : How <xref:PlayGen.SUGAR.Contracts.LeaderboardStandingsRequest> should be provided and how this request differs from a normal <xref:PlayGen.SUGAR.Contracts.LeaderboardRequest>."
  },
  "development/index.html": {
    "href": "development/index.html",
    "title": "Development and Deployment | SUGAR",
    "keywords": "Development and Deployment SUGAR is currently in active development and subject to change. We are committed to delivering a feature complete version of the components by the end of 2017. For upcoming features and development direction see the roadmap Source Repositories All source code is provided under the Apache License, Version 2.0 and is hosten on GitHub. We welcome pull requests for bug fixes and engagement in discussion on feature development. API Service Repository Admin Web UI Repository Unity Demo Repository API Service The SUGAR API Service is build using ASP.NET Core (MVC/WebAPI). Currently the service is built for the .NETCoreApp 2.0 target so will only run on Windows systems, however this will soon be made compatible with the cross-platform NetStandard runtimes. Building the WebAPI project produces a Windows or Linux executable that can be executed directly to run the service in a console mode for debugging, or alternatively the service can be hosted in IIS or IIS express. SUGAR is setup to also run in a windows or linux hosted docker container. See the docker section . Database The service currently uses MySQL for it's data storage, we reccomend using the MariaDB release if you are hosting your own database instance. In the near future the gameData key/value storage will most likely be migrated to a NoSQL data store, however no decision on this technology has been taken yet. Development Dependencies Visual Studio 2017 Version 15.4.5 minimum. .NET Core SDK for your platform The API documentation is generated with DocFX Building the entire solution including client assemblies has additional requirements for compatibility with Unity3D See Below IIS Hosting The server requires the .NET Core (Server Hosting) runtime URL Rewrite is reccomended to redirect HTTP requests to a HTTPS endpoint, using a web.config rewrite rule as below <rewrite> <rules> <rule name=\"HTTPS-Upgrade\" enabled=\"true\" stopProcessing=\"true\"> <match url=\"(.*)\" /> <conditions> <add input=\"{HTTPS}\" pattern=\"^OFF$\" /> </conditions> <action type=\"Redirect\" url=\"https://{HTTP_HOST}/{R:1}\" /> </rule> </rules> </rewrite> API Client The API client provides a C# interface to the RESTful API exposed by the service. The client is intended to be hosted in C# projects and in Unity3D applications. Development Dependencies JSON Serialization .NET MVC Uses the tried and tested JSON.NET library from Newtonsoft. For API consistency the C# client uses JSON.net for explicit serialization operations, however the generally released version of this library utilises System.Reflection operations that are not available in Unity's WebGL environment. This issue has been addressed by SaladLab who have produced a lightweight version of the JSON.Net library specifically for use in Unity projects ( https://github.com/SaladLab/Json.Net.Unity3D ). We have decided to use this library for the C# client regardless of the target platform as it provided all required functionality. SaladLab only currently provide this in the unitypackage format, we have packaged this for NuGet which can currently be downloaded here , however this will be published to the nuget.org package feed in the near future. For details on how to configure a local filesystem based NuGeT package feed see here . Unity Unity uses Mono in place of Microsoft's .NET implementation and provides .NET 3.5 compatibility, because of this there a number or limitations on different platforms and those that we are currently aware of are detailed below: WebClient In Unity WebGL builds the socket operations performed by the System.Net.WebClient are not available and an alternative method must be used to perform HTTP operations. This has been solved in the <xref:PlayGen.SUGAR.Client> by delegating the HTTP operations to a platform specific implementation. Unity WebGL applications can use the browsers native XMLHttpRequest via external calls to a JavaScript library embedded in the project. TODO: JSLib installation instructions HTTPS Mono does not use the system certificate store and by default has no root trust certificates present causing all SSL certificates to be treated as untrusted. Mono can be configured to trust certificates from any source via the methods detailed here , however there does not currently appear to be a way to use the machines trust store by default. This issue is discussed extensively by the Unity community We have not currently arrived at a satisfactory solution with the options below being considered at present: Validate the fingerprint of specific certifictes by intercepting the validation operation as detailed here Add specific certificates corresponding to the root of trust for your instance of the API service to the mono trust store during application installation or initialization Both of these methods have limitations that undermine the security and maintenance of the system as approved certificates or fingerprints must be embedded in the application deployable. Application updates must be deployed if server certificates change. Security could be undermined if application integrity cannot be verified and binaries were tampered with by a 3rd party. Certificate revocation checks would have to be performed explicitly and could also be subject to tampering."
  },
  "development/docker.html": {
    "href": "development/docker.html",
    "title": "Docker | SUGAR",
    "keywords": "Docker Requirements Linux or Windows with Subsytem for Linux enabled . Docker : Lowest tested version is 17. Docker Compose : Compose file format is version 2. Quick Start To run the SUGAR docker services without having to build the SUGAR image: Make sure you've got the requirements inatalled . Run the docker/docker-compose_image_deploy_map-port.bat (or .sh on linux) script. When docker has finished deploying, check that the server is running by visiting http://localhost:59400 where you should see the SUGAR documentation. This will use the latest docker image of SUGAR from the Automated Builds and create and link the database container. SUGAR Admin Interface: If you want to use the SUGAR Admin Interface on your local machine too: Download the repository . Run the relevant docker_build_and_deploy_map_ports file. Browse to the mapped url e.g: \" http://localhost:59440 \". Automated Builds Using the automated build service , Docker Hub does a build of SUGAR each time a commit is pushed to the master branch on GitHub . You can find and download the image here . Building To build and run SUGAR, run the docker/docker-compose_build_deploy script. This will build the SUGAR image using the Dockerfile in the root of the repository, and then create and link the database container. Configuration Dockerfile The Dockerfile for SUGAR is in the project root. It is built off the base image recommended by Microsoft for .NETCoreApp2.0 applications. It copies the contents of the SUGAR repository into the filesystem of the container. The container contains the necessary environment to build this project thanks to the base image provided by Microsoft. The next steps restore the NuGet packages, build the project and launch the server via the PlayGen.SUGAR.Server.WebAPI entrypoint. Docker-Compose file The SUGAR docker-compose files have been split into 3 parts: docker-compose.image.yml : this has the configuration to pull the SUGAR image from DockerHub. docker-compose.build.yml : this has the configuration to build SUGAR image from source. docker-compose.map-port.yml : this has the configuration to expose and map the sugar server to a port on the local machine. docker-compose.base.yml : this contains all the shared settings for the SUGAR container as well as the database and inter-container links. docker-compose.image.yml See the docker/docker-compose_image_deploy script. It uses this in conjunction with docker-compose.base.yml . docker-compose.build.yml See the docker/docker-compose_build_deploy script. It uses this in conjunction with docker-compose.base.yml . docker-compose.map-port.yml See the docker/docker-compose_build_deploy_map-port or docker/docker-compose_image_deploy_map-port scripts. It uses this in conjunction with the other docker compose files. This will map port 59400 of the SUGAR server container to 59400 on your local machine. Test that it has done so by going to http://localhost:59400 . docker-compose.base.yml The SUGAR compose configuration requires the sugar-mariadb container which hosts the databse. This is simply built from the mariadb image. When launching SUGAR, one of the first steps it does is to setup the database which requires it to be able to connect to the database within the sugar-mariadb container. If the database takes longer to startup than the SUGAR server, the server will attempt to connect to the database and fail. This is the reason for the wait-for-db container. It's purpose is to stay active until the database is fully initialized and ready to accept connections. This compose file along with the command sequence in the docker-compose_deploy scripts ensures that the container SUGAR is only launched after the database is ready."
  },
  "concepts/account.html": {
    "href": "concepts/account.html",
    "title": "Account | SUGAR",
    "keywords": "Account Accounts are used by the User's to register and login to SUGAR. Each account is associated with a user. A user may have multiple accounts but an account may only have one user. Each account stores a unique login name and password for the associated user. Features CRUD Account CRUD Account Metadata Account Name Account Password Account User (User) API Client <xref:PlayGen.SUGAR.Client.AccountClient> Contracts <xref:PlayGen.SUGAR.Contracts.AccountRequest> <xref:PlayGen.SUGAR.Contracts.AccountResponse> WebAPI <xref:PlayGen.SUGAR.Server.WebAPI.Controllers.AccountController>"
  },
  "features/unity/setup.html": {
    "href": "features/unity/setup.html",
    "title": "Setting up the database | SUGAR",
    "keywords": "Setting up the database The asset package provides a modifiable editor script which will setup the game, achievements and leaderboards in the database. The SeedSUGARDatabase.cs script is found in \"Assets/Plugins/SUGAR/Scripts\". To run the script, select Tools > Seed SUGAR Database. This will show a popup to login as admin. In it's default state, the script will connect to the database specified in the base address field of the SUGAR Unity manager component and update the Game Id field with the row that matches the Game Token. If such a token does not exist in the database, a new entry will be made and that enty's Id will be placed into the Game Id field. To set up achievements and leaderboards, some editing of the script is required. The CreateAchievements() function contains a commented out template for creating an achievements. Multiple achievements can be made by duplicating the code. For information about each of the required fields please refer to the Evalutation Criteria section. The CreateLeaderboards() function has the same purpose but for generating leaderboards. Please refer to the LeaderboardStandings section for my information."
  },
  "features/unity/index.html": {
    "href": "features/unity/index.html",
    "title": "Unity UI Component | SUGAR",
    "keywords": "Unity UI Component The UI component is a Unity package developers can import into their Unity project to allow easy interactions with the SUGAR engine. The package includes a folder of prefabs at \"Assets/SUGAR/Prefabs\"."
  },
  "features/unity/accounts.html": {
    "href": "features/unity/accounts.html",
    "title": "Account Setup | SUGAR",
    "keywords": "Account Setup The next component on the SUGAR prefab is the Account Unity Client script component. This is used to handle the player's login to their SUGAR account or the registration of new accounts. There are two ways of logging in a user. This can be done by a typical login panel gameobject or login can occur automatically via code if credentials come in from an external source. Login User Interface - Login panel gameobject, which appears to prompt the user to login. The gameobject must have the LoginUserInterface script attached. Included in the prefabs folder (\"Assets/SUGAR/Prefabs\") is a fully functional login panel template. Allow Auto Login - This enables the use of auto-login (bypassing the need for the login panel). If this is checked, and the command line arguments for auto login have been passed, then the Account Unity Client will attempt to login with the credentials. The command line options format is game.exe -u [username] -s [source] -autologin . Allow Register - Currently, this displays the makes the register on the login panel visible for custom registration handlers. Default Source Token - Source tokens are set to ensure the player is logging in from an allowed source. If the source is not set in the commandline options, then this value becomes the default."
  },
  "development/documentation.html": {
    "href": "development/documentation.html",
    "title": "Documentation | SUGAR",
    "keywords": "Documentation SUGAR's documentation is generated using DocFX using tripple slash code comments and Swagger to generate the REST API. Building There are various build scripts in doc/tools to build, copy and serve the docs. Unity-Client The Unity Client documentation can be bundled and hosted with the SUGAR server documentation. It requires the Unity Client repository folder to be at the same level as the SUGAR server and for the Unity Client's documentation to have been built. Requirements DocFX \"docfx\" as a command needs to be availabe via the command console for the scripts to work. Hosting Docs are built and copied to the PlayGen.SUGAR.Server.WebAPI.Server/wwwroot where they are served from."
  },
  "features/index.html": {
    "href": "features/index.html",
    "title": "Feature Overview | SUGAR",
    "keywords": "Feature Overview This section provides detailed description of SUGAR’s features. The high level features of SUGAR in the current version (July 2016) can be grouped under : Game : Individual instance of application. Actor : Individuals or groups using the system. User : Individual user of the system. Group : Group of actors. Relationship : Connections between two or more actors. Achievement : Tasks accomplishable by actors, either binary or incrementally. Skill : Represent a players proficiency or ability. Leaderboard : Comparison of measurements between actors, resources, skills. EvaluationData : Storage system for game and system objects. GameData : Game specific data storage. Resource : Transferable and consumable item storage. Matches : Matches and match specific data storage. Roadmap See Roadmap for new features being implemented for future releases."
  },
  "features/group.html": {
    "href": "features/group.html",
    "title": "Group | SUGAR",
    "keywords": "Group Groups are actors representing collection of actors. They may be individual or multiple game persistent. Groups can be moderated through administrator tools or users, or set up and managed through the game as described by the game designers. Relationships describe which actors belong to which groups. Groups can have associated achievements, which can be set for all members of a group to complete. Actors can join, leave or add another actor to a group. Features CRUD Groups CRUD Group Metadata Group Name Group Description Group Icon Update Group Membership Search Group (ID/name/Actor) API Client <xref:PlayGen.SUGAR.Client.GroupClient> Contracts <xref:PlayGen.SUGAR.Contracts.ActorResponse> <xref:PlayGen.SUGAR.Contracts.ActorRequest> Examples Create a group This example will show how to create a group called \"Wildlings\" using the <xref:PlayGen.SUGAR.Client.GroupClient>'s Create function, passing an <xref:PlayGen.SUGAR.Contracts.ActorRequest> as the parameter and storing the group's id returned inside the <xref:PlayGen.SUGAR.Contracts.ActorResponse> object. public SUGARClient sugarClient = new SUGARClient(BaseUri); private GroupClient _groupClient; private int _groupId; private void CreateGroup() { // create instance of the game client _groupClient = sugarClient.Group; // create an ActorRequest var actorRequest = new ActorRequest { Name = \"Wildlings\" }; // create the group and store the response var actorResponse = _groupClient.Create(actorRequest); // store the id of the game for use in other functions _groupId = actorResponse.Id; } Retreiving a game Checking if a Group exists or finding the id of a Group may be desired functionalities. This is done using <xref:PlayGen.SUGAR.Client.GroupClient>'s Get function and passing the name of the group to match. private bool CheckGroupExists() { // check for the game and store the responses var actorResponses = _groupClient.Get(\"Wildlings\"); foreach (response in actorResponses) { // check if the name matches the desired game exactly if (response.Name == \"Wildlings\") { Console.WriteLine(\"Sorry, the group name has been taken, try another one\"); return false; } } return true; } Roadmap Groups Alliance. Provide the ability for relationship between groups. To form an <xref:alliance> Group leader. Providing the ability for individual actors to control the group membership, to add or remove other actors. Extended group achievements. Provide the ability to set the parameters such as number of actors required to meet the achievement criteria before it’s considered complete."
  },
  "features/gameData.html": {
    "href": "features/gameData.html",
    "title": "GameData | SUGAR",
    "keywords": "GameData GameData provides a method of recording and querying key value pairs of data specific to a certain Game and optional Actor . Features CRUD Resources Search Resources (ID/Name/Actor/Relationship) Gift resource from one actor to another Features CRD GameData Search GameData (by ID/Game/Actor/Skill) GameData Categories General Data - All information that does not fit into any other category. Example - A Users gaining 10 points in level 2. Resources - Long-only data which can be transferred to and from Actor within the system. Example - A user collecting 10 gold, a consumable item within the game. Achievements - Stored completion of all <xref:PlayGen.SUGAR.Contracts.EvaluationCriteriaCreateRequest> for an achievement. Example - A user meeting the criteria for the achievement \"Score 10,000 points\" in a game. Skills - Stored completion of all <xref:PlayGen.SUGAR.Contracts.EvaluationCriteriaCreateRequest> for an skill. Example - A user meeting the criteria for the \"Social\" skill in a game. API Client <xref:PlayGen.SUGAR.Client.GameDataClient> Contracts <xref:PlayGen.SUGAR.Contracts.EvaluationDataRequest> <xref:PlayGen.SUGAR.Contracts.EvaluationDataResponse> <xref:PlayGen.SUGAR.Common.CriteriaQueryType> Examples Submitting custom GameData Custom GameData is submitted using the <xref:PlayGen.SUGAR.Client.GameDataClient>'s Add function with a <xref:PlayGen.SUGAR.Contracts.EvaluationDataRequest> as the parameter. This explains how to track the number of dragon eggs hatched by the user, specifying \"EggHatched\" as the key. public SUGARClient sugarClient = new SUGARClient(BaseUri); private GameDataClient _gameDataClient; private int _gameId; private int _userId; private void OnEggHatched() { // create instance of GameDataClient var gameDataClient = sugarClient.GameData; // create GameDataRequest var gameDataRequest = new GameDataRequest() { GameId = _gameId, ActorId = _userId, GameDataType = GameDataType.Long, Value = \"1\", Key = \"EggHatched\" }; // add the GameData gameDataClient.Add(gameDataRequest); } Querying for GameData GameData is retreived using the <xref:PlayGen.SUGAR.Client.GameDataClient>'s Get function with the ActorId and GameId you want to query as parameters. The parameters also takes a list of keys you want to find entries for in gameData. This example shows how to retrieve the user's \"EggHatched\" <xref:PlayGen.SUGAR.Contracts.EvaluationDataResponse> objects and count them. private long GetEggsHatched() { // add the GameData var gameDataResponses = gameDataClient.Get ( _actorId, _gameId, new string[] { \"EggHatched\" } ); long totalClicks = 0; // count values from each GameDataResponse foreach (var response in gameDataResponses) { totalClicks += long.Parse(response.Value); } return totalClicks; }"
  },
  "features/game.html": {
    "href": "features/game.html",
    "title": "Game | SUGAR",
    "keywords": "Game A game is an individual application as defined by the platform. A single instance of the platform has the capacity to service multiple games. This allows for users to take part in multiple of games under the same login and to potentially share resource across games depending on the game design. Features CRUD Game CRUD Game Metadata Game Name Game Description Game Skills (Skills) Search Game (ID/Name/Actor) API Client <xref:PlayGen.SUGAR.Client.GameClient> Contracts <xref:PlayGen.SUGAR.Contracts.GameRequest> <xref:PlayGen.SUGAR.Contracts.GameResponse> Examples Create a game Creating a game using the <xref:PlayGen.SUGAR.Client.GameClient>'s Create function, passing a <xref:PlayGen.SUGAR.Contracts.GameRequest> object as the parameter. This example will be used to create a game with the name \"Thrones\" and store its Id from the returned <xref:PlayGen.SUGAR.Contracts.GameResponse>. public SUGARClient sugarClient = new SUGARClient(BaseUri); private GameClient _gameClient; private int _gameId; private void CreateGame() { // create instance of the game client _gameClient = sugarClient.Game; // create a GameRequest var gameRequest = new GameRequest { Name = \"Thrones\" }; // create the game and store the response var gameResponse = _gameClient.Create(gameRequest); // store the id of the game for use in other features _gameId = gameResponse.Id; } Retreiving a game Checking if a Game exists or storing the id of the Game prior to allowing the user to play may be vital. This is done using <xref:PlayGen.SUGAR.Client.GameClient>'s Get function and passing the name of the game to match. private int CheckGame() { // check for the game and store the responses var gameResponses = _gameClient.Get(\"Thrones\"); int id = -1; foreach (response in gameResponses) { // check if the name matches the desired game exactly if (response.Name == \"Thrones\") { // store the game's id id = response.Id; } } return id; }"
  },
  "features/evaluationData.html": {
    "href": "features/evaluationData.html",
    "title": "EvaluationData | SUGAR",
    "keywords": "EvaluationData EvaluationData is a storage system, following a key-value structure. It is used by SUGAR features and provides flexibility in providing custom game-specific storage solutions. EvaluationData provides storage for Achievement , Skills , Resources , Matches and GameData . EvaluationData is queried by Achievement , Leaderboard and Skills in their evaluations."
  },
  "features/actor.html": {
    "href": "features/actor.html",
    "title": "Actor | SUGAR",
    "keywords": "Actor An Actor can represent a Users or a Group . Where the term Actor is used, one may substitute User or Group."
  },
  "features/achievement.html": {
    "href": "features/achievement.html",
    "title": "Achievement | SUGAR",
    "keywords": "Achievement Achievements provide a flexible and simple way to increase user engagement, tracking their actions within and across multiple games. Achievements may be viewed as goals that individual or multiple actors can acquire through meeting one or more criteria. The criteria is flexible and can be written by the game developer or provided by the platform based on any game specific action. Achievements can be binary or incremental, ie. (complete/not complete) or have levels or percentages of progression toward their completion. They can be global, across all games, or associated with a single game. Note Both Achievements and Skills build on \"Evaluations\" which may contain a multitude of \"EvaluationCriteria\", specifiying the conditions that need to be satisfied for this specific Evaluation to be considered complete. Features Add/Update/Delete achievements Search for achievements by Id/Game/Name/Actor API Client <xref:PlayGen.SUGAR.Client.AchievementClient> Contracts <xref:PlayGen.SUGAR.Contracts.EvaluationCriteriaCreateRequest> <xref:PlayGen.SUGAR.Contracts.EvaluationCriteriaUpdateRequest> <xref:PlayGen.SUGAR.Contracts.EvaluationCriteriaResponse> <xref:PlayGen.SUGAR.Contracts.EvaluationProgressResponse> <xref:PlayGen.SUGAR.Contracts.EvaluationCreateRequest> <xref:PlayGen.SUGAR.Contracts.EvaluationUpdateRequest> <xref:PlayGen.SUGAR.Contracts.EvaluationResponse> <xref:PlayGen.SUGAR.Common.EvaluationDataType> <xref:PlayGen.SUGAR.Common.CriteriaQueryType> <xref:PlayGen.SUGAR.Common.ComparisonType> <xref:PlayGen.SUGAR.Common.ActorType> <xref:PlayGen.SUGAR.Common.CriteriaScope> Examples Specifying an achievement This example will describe how to implement the 'Slay 10 Enemies!' achievement. An achievement must be specified with an <xref:PlayGen.SUGAR.Contracts.EvaluationCreateRequest> with a list of <xref:PlayGen.SUGAR.Contracts.EvaluationCriteriaCreateRequest> that will be evalutated against to determine progress. All 'EnemiesSlain' keys will be checked in gameData and whether the sum of their values is greater than or equal to 10. public SUGARClient sugarClient = new SUGARClient(BaseUri); private AchievementClient _achievementClient; private int _gameId; private int _userId; private void SetUpAchievement() { // create instance of the achievement client _achievementClient = sugarClient.Achievement; // create an AchievementCriteria list var achievementCriteria = new List<EvaluationCriteriaCreateRequest>() { new EvaluationCriteriaCreateRequest() { DataType = GameDataType.Long, Value = \"10\", Key = \"EnemiesSlain\", CriteriaQueryType = CriteriaQueryType.Sum, ComparisonType = ComparisonType.GreaterOrEqual, Scope = CriteriaScope.Actor } }; // place the criteria inside an AchievementRequest var achievementRequest = new EvaluationCreateRequest() { GameId = _gameId, Name = \"Slay 10 Enemies!\", ActorType = ActorType.User, Token = \"slay_10_enemies\", CompletionCriteria = EvaluationCriteria }; // create the achievement _achievementClient.Create(EvaluationCreateRequest); } Submitting data for when somthing which may be used to evaluate progress towards an Achievement An achievement uses keys in GameData that match its <xref:PlayGen.SUGAR.Contracts.EvaluationCriteriaCreateRequest>. This data is submitted at points in the game which demonstrate progress towards the achievement (as well as other uses). private void SlayEnemies(int quantity) { // *Enemy Slaying Code* // // create instance of GameDataClient var gameDataClient = sugarClient.GameData; // create GameDataRequest var gameDataRequest = new GameDataRequest() { GameId = _gameId, ActorId = _userId, GameDataType = GameDataType.Long, Value = quantity, Key = \"EnemiesSlain\" }; // add the GameData gameDataClient.Add(gameDataRequest); } Automatically recieve achievemnt progress completion notifications: Enable and use automatic notifications: _achievementClient.EnableNotifications(true); And then poll to see if any skills have been recieved. EvaluationNotification notification; if(_achievementClient.TryGetPendingNotification(out notification)) { // There was a penging achievement notification, so do something with it Log.Info($\"Got achievement notification: {notification.Name} \" + $\"with progress: {notification.Progress}\"); } Requesting specific achievement progress using the <xref:PlayGen.SUGAR.Client.AchievementClient> and specifying the GameId, ActorId and Token, returns an <xref:PlayGen.SUGAR.Contracts.EvaluationProgressResponse> object for that Actor's progress towards the achievement in that game. private float CheckAchievementProgress() { // Check the user's progress towards the achievements in the specified game var achievementProgressResponse = _achievementClient.GetAchievementProgress ( \"slay_10_enemies\", _gameId, _userId ); // Output the progress return achivementProgressResponse.Progress; } Roadmap Portable achievement system. Many game networks such as the Google play services, Apple gamkits, Microsoft game centre, Facebook game services and Steam Works offer achievements. Integrating multiple achievement systems into a game is time consuming. Additionally platform providers regularly update their APIs, creating a head-ache for keeping up-to-date with multiple systems. The achievement system will provide the ability for the actors’ achievement to be recorded automatically against other 3rd party systems. Challenge system. Achievement system will be extended by adding temporal (time based) and ownership component. This extension will be referred to as Challenge. Challenges may be seen as achievements that can be suggested to actors, gifted by one actor to another, accepted or rejected by an actor, as well as tracked to see if actors attempted or abandoned them."
  },
  "development/versioning.html": {
    "href": "development/versioning.html",
    "title": "Versioning | SUGAR",
    "keywords": "Versioning The Server and Client share an API Version, used to ensure compatibility. The API Version is made up of three parts in the format Major . Minor . Build version numbers. Major : Should increment when API Breaking changes are added. Minor : Should increment for Fixes and Additions that won't cause existing clients with the same Major version to break. Build : Should increment for every build. Version compatibility is ensured by the APIVersion filter in the PlayGen.SUGAR.Server.WebAPI project. When the Client sends a request, it must include the API Version string with the key \"APIVersion\" as a header. The APIVersion is shared between Server and Client projects in PlayGen.SUGAR.Common.APIVersion."
  },
  "development/admin.html": {
    "href": "development/admin.html",
    "title": "sga-admin | SUGAR",
    "keywords": "sga-admin This project is generated with yo angular generator version 0.15.1. Build & development Change the api.baseUrl in app/scripts/app.js to that of your SUGAR server. Run grunt build for building and grunt serve for preview. Default login user: admin, password: admin Deployment The admin panel can be hosted as a static website or in a docker container, The admin panel does not use a docker-compose file to setup the container, instead it comes with a series of batch and shell scripts to get you started, these can be found in the root of the project docker_build_and_deploy.bat docker_build_and_deploy.sh docker_build_and_deploy_map_port.bat docker_build_and_deploy_map_port.sh By default the admin panel will expose port 4200, this can be changed in the Dockerfile and in the docker_build scripts above. Documentation You can find the SUGAR Admin Interface docs here ."
  },
  "features/admin/index.html": {
    "href": "features/admin/index.html",
    "title": "Admin Interface | SUGAR",
    "keywords": "Admin Interface The admin panel contains pages that can be used to manage games using the SUGAR engine by giving admins access to features that they can add, remove or edit Navigation between the pages in the admin panel can be seen in the Site Map"
  },
  "features/admin/group.html": {
    "href": "features/admin/group.html",
    "title": "Groups | SUGAR",
    "keywords": "Groups For more information on games view the documentation The groups page shows a list of groups, from which an admin can select one to see more details or create a new group Create new groups The admin can create new groups by using the \"Create new Group\" button, this will prompt a popup requesting a group name and group description to be entered for the new group, once created the group will be added to the table in alpgabetical order. Delete Details Group details are shown on the base page for each group, where metadata can be editted and the group can also be deleted Manage group members Each group can have members, the number of members currently within the group are shown on the groups page, by selecting the \"Members\" button, the admin can view the users currently in the group, remove them by selecting the remove button or add new members to the group by entering the users name into the prompt shown Manage Group Alliances Groups can have relationships with other groups, called alliances . These aliances can be managed through the \"Alliance Tab\", in a similar way to the group members functionality"
  },
  "index.html": {
    "href": "index.html",
    "title": "SUGAR | SUGAR",
    "keywords": "SUGAR Welcome to the documentation for SUGAR also known as the RAGE Social Gamification Asset. SUGAR provides a software platform consisting of Web API and Client side components that enable game developers to integrate group based gamification into their applications. It supports features such as clans, group resources and goals and tournaments. The documentation includes : Installation : Simple guide to getting the SUGAR server running with docker. Features : Detailed description of features supported by the software including the roadmap for up-and-coming features. Core Concepts : Description of core concepts behind features within SUGAR. Admin Interface : Description of the platform’s admin panel. Client API Reference : Client API documentation and examples. RESTful API : Web API documentation and examples. The link to the repositories can be found below : Repositories: Server API Repository Admin Panel Repository Client Demo Repository SUGAR is partially funded by the RAGE project . Realising an Applied Gaming Eco-system (RAGE) aims to develop, transform and enrich advanced technologies from the leisure games industry into self-contained gaming assets that support game studios at developing applied games easier, faster and more cost-effectively."
  },
  "unity-client/api/PlayGen.SUGAR.Unity.Editor.AutoLogIn.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.Editor.AutoLogIn.html",
    "title": "Class AutoLogIn | SUGAR",
    "keywords": "Class AutoLogIn Inheritance System.Object UnityEngine.Object UnityEngine.ScriptableObject UnityEditor.EditorWindow AutoLogIn Inherited Members UnityEditor.EditorWindow.GetWindow(System.Type, System.Boolean, System.String) UnityEditor.EditorWindow.GetWindow(System.Type, System.Boolean) UnityEditor.EditorWindow.GetWindow(System.Type) UnityEditor.EditorWindow.GetWindow(System.Type, System.Boolean, System.String, System.Boolean) UnityEditor.EditorWindow.GetWindowWithRect(System.Type, UnityEngine.Rect, System.Boolean) UnityEditor.EditorWindow.GetWindowWithRect(System.Type, UnityEngine.Rect) UnityEditor.EditorWindow.GetWindowWithRect(System.Type, UnityEngine.Rect, System.Boolean, System.String) UnityEditor.EditorWindow.BeginWindows() UnityEditor.EditorWindow.EndWindows() UnityEditor.EditorWindow.ShowNotification(UnityEngine.GUIContent) UnityEditor.EditorWindow.RemoveNotification() UnityEditor.EditorWindow.ShowTab() UnityEditor.EditorWindow.Focus() UnityEditor.EditorWindow.ShowUtility() UnityEditor.EditorWindow.ShowPopup() UnityEditor.EditorWindow.ShowAsDropDown(UnityEngine.Rect, UnityEngine.Vector2) UnityEditor.EditorWindow.Show() UnityEditor.EditorWindow.Show(System.Boolean) UnityEditor.EditorWindow.ShowAuxWindow() UnityEditor.EditorWindow.GetWindow<T>() UnityEditor.EditorWindow.GetWindow<T>(System.Boolean) UnityEditor.EditorWindow.GetWindow<T>(System.Boolean, System.String) UnityEditor.EditorWindow.GetWindow<T>(System.String) UnityEditor.EditorWindow.GetWindow<T>(System.String, System.Boolean) UnityEditor.EditorWindow.GetWindow<T>(System.Boolean, System.String, System.Boolean) UnityEditor.EditorWindow.GetWindow<T>(System.Type[]) UnityEditor.EditorWindow.GetWindow<T>(System.String, System.Type[]) UnityEditor.EditorWindow.GetWindow<T>(System.String, System.Boolean, System.Type[]) UnityEditor.EditorWindow.FocusWindowIfItsOpen(System.Type) UnityEditor.EditorWindow.FocusWindowIfItsOpen<T>() UnityEditor.EditorWindow.GetWindowWithRect<T>(UnityEngine.Rect) UnityEditor.EditorWindow.GetWindowWithRect<T>(UnityEngine.Rect, System.Boolean) UnityEditor.EditorWindow.GetWindowWithRect<T>(UnityEngine.Rect, System.Boolean, System.String) UnityEditor.EditorWindow.GetWindowWithRect<T>(UnityEngine.Rect, System.Boolean, System.String, System.Boolean) UnityEditor.EditorWindow.Close() UnityEditor.EditorWindow.Repaint() UnityEditor.EditorWindow.SendEvent(UnityEngine.Event) UnityEditor.EditorWindow.wantsMouseMove UnityEditor.EditorWindow.wantsMouseEnterLeaveWindow UnityEditor.EditorWindow.autoRepaintOnSceneChange UnityEditor.EditorWindow.maximized UnityEditor.EditorWindow.focusedWindow UnityEditor.EditorWindow.mouseOverWindow UnityEditor.EditorWindow.minSize UnityEditor.EditorWindow.maxSize UnityEditor.EditorWindow.title UnityEditor.EditorWindow.titleContent UnityEditor.EditorWindow.depthBufferBits UnityEditor.EditorWindow.antiAlias UnityEditor.EditorWindow.position UnityEngine.ScriptableObject.SetDirty() UnityEngine.ScriptableObject.CreateInstance(System.String) UnityEngine.ScriptableObject.CreateInstance(System.Type) UnityEngine.ScriptableObject.CreateInstance<T>() UnityEngine.Object.Destroy(UnityEngine.Object, System.Single) UnityEngine.Object.Destroy(UnityEngine.Object) UnityEngine.Object.DestroyImmediate(UnityEngine.Object, System.Boolean) UnityEngine.Object.DestroyImmediate(UnityEngine.Object) UnityEngine.Object.FindObjectsOfType(System.Type) UnityEngine.Object.DontDestroyOnLoad(UnityEngine.Object) UnityEngine.Object.DestroyObject(UnityEngine.Object, System.Single) UnityEngine.Object.DestroyObject(UnityEngine.Object) UnityEngine.Object.FindSceneObjectsOfType(System.Type) UnityEngine.Object.FindObjectsOfTypeIncludingAssets(System.Type) UnityEngine.Object.FindObjectsOfTypeAll(System.Type) UnityEngine.Object.ToString() UnityEngine.Object.GetInstanceID() UnityEngine.Object.GetHashCode() UnityEngine.Object.Equals(System.Object) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Vector3, UnityEngine.Quaternion) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Transform) UnityEngine.Object.Instantiate(UnityEngine.Object) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Transform) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Transform, System.Boolean) UnityEngine.Object.Instantiate<T>(T) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Vector3, UnityEngine.Quaternion) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Transform) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Transform) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Transform, System.Boolean) UnityEngine.Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType(System.Type) UnityEngine.Object.name UnityEngine.Object.hideFlags System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : PlayGen.SUGAR.Unity.Editor Assembly : PlayGen.SUGAR.Unity.Editor.dll Syntax public class AutoLogIn : EditorWindow"
  },
  "unity-client/api/PlayGen.SUGAR.Unity.EvaluationUnityClient.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.EvaluationUnityClient.html",
    "title": "Class EvaluationUnityClient | SUGAR",
    "keywords": "Class EvaluationUnityClient Unity client for calls related to evaluations. Inheritance System.Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour BaseUnityClient < BaseEvaluationListInterface > EvaluationUnityClient Inherited Members BaseUnityClient<BaseEvaluationListInterface>._interface BaseUnityClient<BaseEvaluationListInterface>.HasInterface BaseUnityClient<BaseEvaluationListInterface>.IsActive BaseUnityClient<BaseEvaluationListInterface>.Hide() UnityEngine.MonoBehaviour.Invoke(System.String, System.Single) UnityEngine.MonoBehaviour.InvokeRepeating(System.String, System.Single, System.Single) UnityEngine.MonoBehaviour.CancelInvoke() UnityEngine.MonoBehaviour.CancelInvoke(System.String) UnityEngine.MonoBehaviour.IsInvoking(System.String) UnityEngine.MonoBehaviour.IsInvoking() UnityEngine.MonoBehaviour.StartCoroutine(System.Collections.IEnumerator) UnityEngine.MonoBehaviour.StartCoroutine_Auto(System.Collections.IEnumerator) UnityEngine.MonoBehaviour.StartCoroutine(System.String, System.Object) UnityEngine.MonoBehaviour.StartCoroutine(System.String) UnityEngine.MonoBehaviour.StopCoroutine(System.String) UnityEngine.MonoBehaviour.StopCoroutine(System.Collections.IEnumerator) UnityEngine.MonoBehaviour.StopCoroutine(UnityEngine.Coroutine) UnityEngine.MonoBehaviour.StopAllCoroutines() UnityEngine.MonoBehaviour.print(System.Object) UnityEngine.MonoBehaviour.useGUILayout UnityEngine.MonoBehaviour.runInEditMode UnityEngine.Behaviour.enabled UnityEngine.Behaviour.isActiveAndEnabled UnityEngine.Component.GetComponent(System.Type) UnityEngine.Component.GetComponent<T>() UnityEngine.Component.GetComponent(System.String) UnityEngine.Component.GetComponentInChildren(System.Type, System.Boolean) UnityEngine.Component.GetComponentInChildren(System.Type) UnityEngine.Component.GetComponentInChildren<T>() UnityEngine.Component.GetComponentInChildren<T>(System.Boolean) UnityEngine.Component.GetComponentsInChildren(System.Type) UnityEngine.Component.GetComponentsInChildren(System.Type, System.Boolean) UnityEngine.Component.GetComponentsInChildren<T>(System.Boolean) UnityEngine.Component.GetComponentsInChildren<T>(System.Boolean, System.Collections.Generic.List<T>) UnityEngine.Component.GetComponentsInChildren<T>() UnityEngine.Component.GetComponentsInChildren<T>(System.Collections.Generic.List<T>) UnityEngine.Component.GetComponentInParent(System.Type) UnityEngine.Component.GetComponentInParent<T>() UnityEngine.Component.GetComponentsInParent(System.Type) UnityEngine.Component.GetComponentsInParent(System.Type, System.Boolean) UnityEngine.Component.GetComponentsInParent<T>(System.Boolean) UnityEngine.Component.GetComponentsInParent<T>(System.Boolean, System.Collections.Generic.List<T>) UnityEngine.Component.GetComponentsInParent<T>() UnityEngine.Component.GetComponents(System.Type) UnityEngine.Component.GetComponents(System.Type, System.Collections.Generic.List<UnityEngine.Component>) UnityEngine.Component.GetComponents<T>(System.Collections.Generic.List<T>) UnityEngine.Component.GetComponents<T>() UnityEngine.Component.CompareTag(System.String) UnityEngine.Component.SendMessageUpwards(System.String, System.Object, UnityEngine.SendMessageOptions) UnityEngine.Component.SendMessageUpwards(System.String, System.Object) UnityEngine.Component.SendMessageUpwards(System.String) UnityEngine.Component.SendMessageUpwards(System.String, UnityEngine.SendMessageOptions) UnityEngine.Component.SendMessage(System.String, System.Object, UnityEngine.SendMessageOptions) UnityEngine.Component.SendMessage(System.String, System.Object) UnityEngine.Component.SendMessage(System.String) UnityEngine.Component.SendMessage(System.String, UnityEngine.SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object, UnityEngine.SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object) UnityEngine.Component.BroadcastMessage(System.String) UnityEngine.Component.BroadcastMessage(System.String, UnityEngine.SendMessageOptions) UnityEngine.Component.transform UnityEngine.Component.gameObject UnityEngine.Component.tag UnityEngine.Component.rigidbody UnityEngine.Component.rigidbody2D UnityEngine.Component.camera UnityEngine.Component.light UnityEngine.Component.animation UnityEngine.Component.constantForce UnityEngine.Component.renderer UnityEngine.Component.audio UnityEngine.Component.guiText UnityEngine.Component.networkView UnityEngine.Component.guiElement UnityEngine.Component.guiTexture UnityEngine.Component.collider UnityEngine.Component.collider2D UnityEngine.Component.hingeJoint UnityEngine.Component.particleEmitter UnityEngine.Component.particleSystem UnityEngine.Object.Destroy(UnityEngine.Object, System.Single) UnityEngine.Object.Destroy(UnityEngine.Object) UnityEngine.Object.DestroyImmediate(UnityEngine.Object, System.Boolean) UnityEngine.Object.DestroyImmediate(UnityEngine.Object) UnityEngine.Object.FindObjectsOfType(System.Type) UnityEngine.Object.DontDestroyOnLoad(UnityEngine.Object) UnityEngine.Object.DestroyObject(UnityEngine.Object, System.Single) UnityEngine.Object.DestroyObject(UnityEngine.Object) UnityEngine.Object.FindSceneObjectsOfType(System.Type) UnityEngine.Object.FindObjectsOfTypeIncludingAssets(System.Type) UnityEngine.Object.FindObjectsOfTypeAll(System.Type) UnityEngine.Object.ToString() UnityEngine.Object.GetInstanceID() UnityEngine.Object.GetHashCode() UnityEngine.Object.Equals(System.Object) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Vector3, UnityEngine.Quaternion) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Transform) UnityEngine.Object.Instantiate(UnityEngine.Object) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Transform) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Transform, System.Boolean) UnityEngine.Object.Instantiate<T>(T) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Vector3, UnityEngine.Quaternion) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Transform) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Transform) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Transform, System.Boolean) UnityEngine.Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType(System.Type) UnityEngine.Object.name UnityEngine.Object.hideFlags System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : PlayGen.SUGAR.Unity Assembly : PlayGen.SUGAR.Unity.dll Syntax [DisallowMultipleComponent] public class EvaluationUnityClient : BaseUnityClient<BaseEvaluationListInterface> Properties Progress Current completion status for evaluations in this application for this user. Declaration public List<EvaluationProgressResponse> Progress { get; } Property Value Type Description System.Collections.Generic.List < PlayGen.SUGAR.Contracts.EvaluationProgressResponse > Methods DisplayAchievementList() Gathers current evaluation completion status and displays UI object if provided. Declaration public void DisplayAchievementList() DisplaySkillList() Gathers current skill completion status and displays UI object if provided. Declaration public void DisplaySkillList() ForceNotificationTest(String) Force an evaluation notification to be displayed with the provided text. Declaration public void ForceNotificationTest(string notification = \"Test Notification\") Parameters Type Name Description System.String notification"
  },
  "unity-client/api/PlayGen.SUGAR.Unity.GameDataUnityClient.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.GameDataUnityClient.html",
    "title": "Class GameDataUnityClient | SUGAR",
    "keywords": "Class GameDataUnityClient Unity client for calls related to gamedata. Inheritance System.Object GameDataUnityClient Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : PlayGen.SUGAR.Unity Assembly : PlayGen.SUGAR.Unity.dll Syntax public class GameDataUnityClient Methods Get(Action<IEnumerable<EvaluationDataResponse>>, String[]) Declaration public void Get(Action<IEnumerable<EvaluationDataResponse>> success, string[] keys = null) Parameters Type Name Description System.Action < System.Collections.Generic.IEnumerable < PlayGen.SUGAR.Contracts.EvaluationDataResponse >> success System.String [] keys GetCount(String, EvaluationDataType, Action<EvaluationDataResponse>) Get the count for this user for the key provided. Declaration public void GetCount(string key, EvaluationDataType dataType, Action<EvaluationDataResponse> success) Parameters Type Name Description System.String key PlayGen.SUGAR.Common.EvaluationDataType dataType System.Action < PlayGen.SUGAR.Contracts.EvaluationDataResponse > success GetCumulative(String, EvaluationDataType, Action<EvaluationDataResponse>) Get the cumulative value for this user for the key provided. Declaration public void GetCumulative(string key, EvaluationDataType dataType, Action<EvaluationDataResponse> success) Parameters Type Name Description System.String key PlayGen.SUGAR.Common.EvaluationDataType dataType System.Action < PlayGen.SUGAR.Contracts.EvaluationDataResponse > success GetEarliest(String, EvaluationDataType, Action<EvaluationDataResponse>) Get the earliest value for this user for the key provided. Declaration public void GetEarliest(string key, EvaluationDataType dataType, Action<EvaluationDataResponse> success) Parameters Type Name Description System.String key PlayGen.SUGAR.Common.EvaluationDataType dataType System.Action < PlayGen.SUGAR.Contracts.EvaluationDataResponse > success GetHighest(String, EvaluationDataType, Action<EvaluationDataResponse>) Get the highest value for this user for the key provided. Declaration public void GetHighest(string key, EvaluationDataType dataType, Action<EvaluationDataResponse> success) Parameters Type Name Description System.String key PlayGen.SUGAR.Common.EvaluationDataType dataType System.Action < PlayGen.SUGAR.Contracts.EvaluationDataResponse > success GetLatest(String, EvaluationDataType, Action<EvaluationDataResponse>) Get the latest value for this user for the key provided. Declaration public void GetLatest(string key, EvaluationDataType dataType, Action<EvaluationDataResponse> success) Parameters Type Name Description System.String key PlayGen.SUGAR.Common.EvaluationDataType dataType System.Action < PlayGen.SUGAR.Contracts.EvaluationDataResponse > success GetLowest(String, EvaluationDataType, Action<EvaluationDataResponse>) Get the lowest value for this user for the key provided. Declaration public void GetLowest(string key, EvaluationDataType dataType, Action<EvaluationDataResponse> success) Parameters Type Name Description System.String key PlayGen.SUGAR.Common.EvaluationDataType dataType System.Action < PlayGen.SUGAR.Contracts.EvaluationDataResponse > success Send(String, Boolean) Send a piece of gamedata with key and value provided. Declaration public void Send(string key, bool value) Parameters Type Name Description System.String key System.Boolean value Send(String, Int64) Send a piece of gamedata with key and value provided. Declaration public void Send(string key, long value) Parameters Type Name Description System.String key System.Int64 value Send(String, Single) Send a piece of gamedata with key and value provided. Declaration public void Send(string key, float value) Parameters Type Name Description System.String key System.Single value Send(String, String) Send a piece of gamedata with key and value provided. Declaration public void Send(string key, string value) Parameters Type Name Description System.String key System.String value"
  },
  "unity-client/api/PlayGen.SUGAR.Unity.AccountUnityClient.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.AccountUnityClient.html",
    "title": "Class AccountUnityClient | SUGAR",
    "keywords": "Class AccountUnityClient Unity client for calls related to accounts Inheritance System.Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour AccountUnityClient Inherited Members UnityEngine.MonoBehaviour.Invoke(System.String, System.Single) UnityEngine.MonoBehaviour.InvokeRepeating(System.String, System.Single, System.Single) UnityEngine.MonoBehaviour.CancelInvoke() UnityEngine.MonoBehaviour.CancelInvoke(System.String) UnityEngine.MonoBehaviour.IsInvoking(System.String) UnityEngine.MonoBehaviour.IsInvoking() UnityEngine.MonoBehaviour.StartCoroutine(System.Collections.IEnumerator) UnityEngine.MonoBehaviour.StartCoroutine_Auto(System.Collections.IEnumerator) UnityEngine.MonoBehaviour.StartCoroutine(System.String, System.Object) UnityEngine.MonoBehaviour.StartCoroutine(System.String) UnityEngine.MonoBehaviour.StopCoroutine(System.String) UnityEngine.MonoBehaviour.StopCoroutine(System.Collections.IEnumerator) UnityEngine.MonoBehaviour.StopCoroutine(UnityEngine.Coroutine) UnityEngine.MonoBehaviour.StopAllCoroutines() UnityEngine.MonoBehaviour.print(System.Object) UnityEngine.MonoBehaviour.useGUILayout UnityEngine.MonoBehaviour.runInEditMode UnityEngine.Behaviour.enabled UnityEngine.Behaviour.isActiveAndEnabled UnityEngine.Component.GetComponent(System.Type) UnityEngine.Component.GetComponent<T>() UnityEngine.Component.GetComponent(System.String) UnityEngine.Component.GetComponentInChildren(System.Type, System.Boolean) UnityEngine.Component.GetComponentInChildren(System.Type) UnityEngine.Component.GetComponentInChildren<T>() UnityEngine.Component.GetComponentInChildren<T>(System.Boolean) UnityEngine.Component.GetComponentsInChildren(System.Type) UnityEngine.Component.GetComponentsInChildren(System.Type, System.Boolean) UnityEngine.Component.GetComponentsInChildren<T>(System.Boolean) UnityEngine.Component.GetComponentsInChildren<T>(System.Boolean, System.Collections.Generic.List<T>) UnityEngine.Component.GetComponentsInChildren<T>() UnityEngine.Component.GetComponentsInChildren<T>(System.Collections.Generic.List<T>) UnityEngine.Component.GetComponentInParent(System.Type) UnityEngine.Component.GetComponentInParent<T>() UnityEngine.Component.GetComponentsInParent(System.Type) UnityEngine.Component.GetComponentsInParent(System.Type, System.Boolean) UnityEngine.Component.GetComponentsInParent<T>(System.Boolean) UnityEngine.Component.GetComponentsInParent<T>(System.Boolean, System.Collections.Generic.List<T>) UnityEngine.Component.GetComponentsInParent<T>() UnityEngine.Component.GetComponents(System.Type) UnityEngine.Component.GetComponents(System.Type, System.Collections.Generic.List<UnityEngine.Component>) UnityEngine.Component.GetComponents<T>(System.Collections.Generic.List<T>) UnityEngine.Component.GetComponents<T>() UnityEngine.Component.CompareTag(System.String) UnityEngine.Component.SendMessageUpwards(System.String, System.Object, UnityEngine.SendMessageOptions) UnityEngine.Component.SendMessageUpwards(System.String, System.Object) UnityEngine.Component.SendMessageUpwards(System.String) UnityEngine.Component.SendMessageUpwards(System.String, UnityEngine.SendMessageOptions) UnityEngine.Component.SendMessage(System.String, System.Object, UnityEngine.SendMessageOptions) UnityEngine.Component.SendMessage(System.String, System.Object) UnityEngine.Component.SendMessage(System.String) UnityEngine.Component.SendMessage(System.String, UnityEngine.SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object, UnityEngine.SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object) UnityEngine.Component.BroadcastMessage(System.String) UnityEngine.Component.BroadcastMessage(System.String, UnityEngine.SendMessageOptions) UnityEngine.Component.transform UnityEngine.Component.gameObject UnityEngine.Component.tag UnityEngine.Component.rigidbody UnityEngine.Component.rigidbody2D UnityEngine.Component.camera UnityEngine.Component.light UnityEngine.Component.animation UnityEngine.Component.constantForce UnityEngine.Component.renderer UnityEngine.Component.audio UnityEngine.Component.guiText UnityEngine.Component.networkView UnityEngine.Component.guiElement UnityEngine.Component.guiTexture UnityEngine.Component.collider UnityEngine.Component.collider2D UnityEngine.Component.hingeJoint UnityEngine.Component.particleEmitter UnityEngine.Component.particleSystem UnityEngine.Object.Destroy(UnityEngine.Object, System.Single) UnityEngine.Object.Destroy(UnityEngine.Object) UnityEngine.Object.DestroyImmediate(UnityEngine.Object, System.Boolean) UnityEngine.Object.DestroyImmediate(UnityEngine.Object) UnityEngine.Object.FindObjectsOfType(System.Type) UnityEngine.Object.DontDestroyOnLoad(UnityEngine.Object) UnityEngine.Object.DestroyObject(UnityEngine.Object, System.Single) UnityEngine.Object.DestroyObject(UnityEngine.Object) UnityEngine.Object.FindSceneObjectsOfType(System.Type) UnityEngine.Object.FindObjectsOfTypeIncludingAssets(System.Type) UnityEngine.Object.FindObjectsOfTypeAll(System.Type) UnityEngine.Object.ToString() UnityEngine.Object.GetInstanceID() UnityEngine.Object.GetHashCode() UnityEngine.Object.Equals(System.Object) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Vector3, UnityEngine.Quaternion) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Transform) UnityEngine.Object.Instantiate(UnityEngine.Object) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Transform) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Transform, System.Boolean) UnityEngine.Object.Instantiate<T>(T) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Vector3, UnityEngine.Quaternion) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Transform) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Transform) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Transform, System.Boolean) UnityEngine.Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType(System.Type) UnityEngine.Object.name UnityEngine.Object.hideFlags System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : PlayGen.SUGAR.Unity Assembly : PlayGen.SUGAR.Unity.dll Syntax [DisallowMultipleComponent] public class AccountUnityClient : MonoBehaviour Properties HasInterface Has a UI object been provided for this Unity Client? Declaration public bool HasInterface { get; } Property Value Type Description System.Boolean IsActive Is there a UI object and if so is it currently active? Declaration public bool IsActive { get; } Property Value Type Description System.Boolean Methods DisplayPanel(Action<Boolean>) Displays UI object if provided and allowAutoLogin is false. Attempts automatic sign in using provided details if allowAutoLogin is true. Note: allowAutoLogin is made false after automatic sign in is first attempted. Declaration public void DisplayPanel(Action<bool> success) Parameters Type Name Description System.Action < System.Boolean > success Hide() Hide the UI object if it is currently active. Declaration public void Hide() Logout(Action<Boolean>) Declaration public void Logout(Action<bool> success) Parameters Type Name Description System.Action < System.Boolean > success"
  },
  "unity-client/api/PlayGen.SUGAR.Unity.BaseEvaluationPopupInterface.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.BaseEvaluationPopupInterface.html",
    "title": "Class BaseEvaluationPopupInterface | SUGAR",
    "keywords": "Class BaseEvaluationPopupInterface Base abstract class for controlling the UI object related to evaluation notifications. Inheritance System.Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour BaseEvaluationPopupInterface Inherited Members UnityEngine.MonoBehaviour.Invoke(System.String, System.Single) UnityEngine.MonoBehaviour.InvokeRepeating(System.String, System.Single, System.Single) UnityEngine.MonoBehaviour.CancelInvoke() UnityEngine.MonoBehaviour.CancelInvoke(System.String) UnityEngine.MonoBehaviour.IsInvoking(System.String) UnityEngine.MonoBehaviour.IsInvoking() UnityEngine.MonoBehaviour.StartCoroutine(System.Collections.IEnumerator) UnityEngine.MonoBehaviour.StartCoroutine_Auto(System.Collections.IEnumerator) UnityEngine.MonoBehaviour.StartCoroutine(System.String, System.Object) UnityEngine.MonoBehaviour.StartCoroutine(System.String) UnityEngine.MonoBehaviour.StopCoroutine(System.String) UnityEngine.MonoBehaviour.StopCoroutine(System.Collections.IEnumerator) UnityEngine.MonoBehaviour.StopCoroutine(UnityEngine.Coroutine) UnityEngine.MonoBehaviour.StopAllCoroutines() UnityEngine.MonoBehaviour.print(System.Object) UnityEngine.MonoBehaviour.useGUILayout UnityEngine.MonoBehaviour.runInEditMode UnityEngine.Behaviour.enabled UnityEngine.Behaviour.isActiveAndEnabled UnityEngine.Component.GetComponent(System.Type) UnityEngine.Component.GetComponent<T>() UnityEngine.Component.GetComponent(System.String) UnityEngine.Component.GetComponentInChildren(System.Type, System.Boolean) UnityEngine.Component.GetComponentInChildren(System.Type) UnityEngine.Component.GetComponentInChildren<T>() UnityEngine.Component.GetComponentInChildren<T>(System.Boolean) UnityEngine.Component.GetComponentsInChildren(System.Type) UnityEngine.Component.GetComponentsInChildren(System.Type, System.Boolean) UnityEngine.Component.GetComponentsInChildren<T>(System.Boolean) UnityEngine.Component.GetComponentsInChildren<T>(System.Boolean, System.Collections.Generic.List<T>) UnityEngine.Component.GetComponentsInChildren<T>() UnityEngine.Component.GetComponentsInChildren<T>(System.Collections.Generic.List<T>) UnityEngine.Component.GetComponentInParent(System.Type) UnityEngine.Component.GetComponentInParent<T>() UnityEngine.Component.GetComponentsInParent(System.Type) UnityEngine.Component.GetComponentsInParent(System.Type, System.Boolean) UnityEngine.Component.GetComponentsInParent<T>(System.Boolean) UnityEngine.Component.GetComponentsInParent<T>(System.Boolean, System.Collections.Generic.List<T>) UnityEngine.Component.GetComponentsInParent<T>() UnityEngine.Component.GetComponents(System.Type) UnityEngine.Component.GetComponents(System.Type, System.Collections.Generic.List<UnityEngine.Component>) UnityEngine.Component.GetComponents<T>(System.Collections.Generic.List<T>) UnityEngine.Component.GetComponents<T>() UnityEngine.Component.CompareTag(System.String) UnityEngine.Component.SendMessageUpwards(System.String, System.Object, UnityEngine.SendMessageOptions) UnityEngine.Component.SendMessageUpwards(System.String, System.Object) UnityEngine.Component.SendMessageUpwards(System.String) UnityEngine.Component.SendMessageUpwards(System.String, UnityEngine.SendMessageOptions) UnityEngine.Component.SendMessage(System.String, System.Object, UnityEngine.SendMessageOptions) UnityEngine.Component.SendMessage(System.String, System.Object) UnityEngine.Component.SendMessage(System.String) UnityEngine.Component.SendMessage(System.String, UnityEngine.SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object, UnityEngine.SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object) UnityEngine.Component.BroadcastMessage(System.String) UnityEngine.Component.BroadcastMessage(System.String, UnityEngine.SendMessageOptions) UnityEngine.Component.transform UnityEngine.Component.gameObject UnityEngine.Component.tag UnityEngine.Component.rigidbody UnityEngine.Component.rigidbody2D UnityEngine.Component.camera UnityEngine.Component.light UnityEngine.Component.animation UnityEngine.Component.constantForce UnityEngine.Component.renderer UnityEngine.Component.audio UnityEngine.Component.guiText UnityEngine.Component.networkView UnityEngine.Component.guiElement UnityEngine.Component.guiTexture UnityEngine.Component.collider UnityEngine.Component.collider2D UnityEngine.Component.hingeJoint UnityEngine.Component.particleEmitter UnityEngine.Component.particleSystem UnityEngine.Object.Destroy(UnityEngine.Object, System.Single) UnityEngine.Object.Destroy(UnityEngine.Object) UnityEngine.Object.DestroyImmediate(UnityEngine.Object, System.Boolean) UnityEngine.Object.DestroyImmediate(UnityEngine.Object) UnityEngine.Object.FindObjectsOfType(System.Type) UnityEngine.Object.DontDestroyOnLoad(UnityEngine.Object) UnityEngine.Object.DestroyObject(UnityEngine.Object, System.Single) UnityEngine.Object.DestroyObject(UnityEngine.Object) UnityEngine.Object.FindSceneObjectsOfType(System.Type) UnityEngine.Object.FindObjectsOfTypeIncludingAssets(System.Type) UnityEngine.Object.FindObjectsOfTypeAll(System.Type) UnityEngine.Object.ToString() UnityEngine.Object.GetInstanceID() UnityEngine.Object.GetHashCode() UnityEngine.Object.Equals(System.Object) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Vector3, UnityEngine.Quaternion) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Transform) UnityEngine.Object.Instantiate(UnityEngine.Object) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Transform) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Transform, System.Boolean) UnityEngine.Object.Instantiate<T>(T) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Vector3, UnityEngine.Quaternion) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Transform) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Transform) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Transform, System.Boolean) UnityEngine.Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType(System.Type) UnityEngine.Object.name UnityEngine.Object.hideFlags System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : PlayGen.SUGAR.Unity Assembly : PlayGen.SUGAR.Unity.dll Syntax public abstract class BaseEvaluationPopupInterface : MonoBehaviour Fields _evaluationQueue Queue of notifications to be displayed. Declaration protected readonly List<EvaluationNotification> _evaluationQueue Field Value Type Description System.Collections.Generic.List < PlayGen.SUGAR.Client.EvaluationEvents.EvaluationNotification > _image Image displayed alongside notification. Can be left null. Declaration [Tooltip(\"Image displayed alongside notification. Can be left null.\")] [SerializeField] protected Image _image Field Value Type Description UnityEngine.UI.Image _name Text used for display notification string (usually evaluation name). Can be left null. Declaration [Tooltip(\"Text used for display notification string (usually evaluation name). Can be left null.\")] [SerializeField] protected Text _name Field Value Type Description UnityEngine.UI.Text Methods Display(EvaluationNotification) Functionality to be triggered when a notification is received. Declaration protected abstract void Display(EvaluationNotification notification) Parameters Type Name Description PlayGen.SUGAR.Client.EvaluationEvents.EvaluationNotification notification"
  },
  "unity-client/api/PlayGen.SUGAR.Unity.BaseGroupMemberInterface.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.BaseGroupMemberInterface.html",
    "title": "Class BaseGroupMemberInterface | SUGAR",
    "keywords": "Class BaseGroupMemberInterface Base abstract class for controlling the UI object related to group member lists. Inheritance System.Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour BaseInterface BaseGroupMemberInterface Inherited Members BaseInterface._errorText BaseInterface._closeButton BaseInterface._signinButton BaseInterface.Awake() BaseInterface.PreDisplay() BaseInterface.Show(Boolean) BaseInterface.Draw() BaseInterface.OnSignIn() UnityEngine.MonoBehaviour.Invoke(System.String, System.Single) UnityEngine.MonoBehaviour.InvokeRepeating(System.String, System.Single, System.Single) UnityEngine.MonoBehaviour.CancelInvoke() UnityEngine.MonoBehaviour.CancelInvoke(System.String) UnityEngine.MonoBehaviour.IsInvoking(System.String) UnityEngine.MonoBehaviour.IsInvoking() UnityEngine.MonoBehaviour.StartCoroutine(System.Collections.IEnumerator) UnityEngine.MonoBehaviour.StartCoroutine_Auto(System.Collections.IEnumerator) UnityEngine.MonoBehaviour.StartCoroutine(System.String, System.Object) UnityEngine.MonoBehaviour.StartCoroutine(System.String) UnityEngine.MonoBehaviour.StopCoroutine(System.String) UnityEngine.MonoBehaviour.StopCoroutine(System.Collections.IEnumerator) UnityEngine.MonoBehaviour.StopCoroutine(UnityEngine.Coroutine) UnityEngine.MonoBehaviour.StopAllCoroutines() UnityEngine.MonoBehaviour.print(System.Object) UnityEngine.MonoBehaviour.useGUILayout UnityEngine.MonoBehaviour.runInEditMode UnityEngine.Behaviour.enabled UnityEngine.Behaviour.isActiveAndEnabled UnityEngine.Component.GetComponent(System.Type) UnityEngine.Component.GetComponent<T>() UnityEngine.Component.GetComponent(System.String) UnityEngine.Component.GetComponentInChildren(System.Type, System.Boolean) UnityEngine.Component.GetComponentInChildren(System.Type) UnityEngine.Component.GetComponentInChildren<T>() UnityEngine.Component.GetComponentInChildren<T>(System.Boolean) UnityEngine.Component.GetComponentsInChildren(System.Type) UnityEngine.Component.GetComponentsInChildren(System.Type, System.Boolean) UnityEngine.Component.GetComponentsInChildren<T>(System.Boolean) UnityEngine.Component.GetComponentsInChildren<T>(System.Boolean, System.Collections.Generic.List<T>) UnityEngine.Component.GetComponentsInChildren<T>() UnityEngine.Component.GetComponentsInChildren<T>(System.Collections.Generic.List<T>) UnityEngine.Component.GetComponentInParent(System.Type) UnityEngine.Component.GetComponentInParent<T>() UnityEngine.Component.GetComponentsInParent(System.Type) UnityEngine.Component.GetComponentsInParent(System.Type, System.Boolean) UnityEngine.Component.GetComponentsInParent<T>(System.Boolean) UnityEngine.Component.GetComponentsInParent<T>(System.Boolean, System.Collections.Generic.List<T>) UnityEngine.Component.GetComponentsInParent<T>() UnityEngine.Component.GetComponents(System.Type) UnityEngine.Component.GetComponents(System.Type, System.Collections.Generic.List<UnityEngine.Component>) UnityEngine.Component.GetComponents<T>(System.Collections.Generic.List<T>) UnityEngine.Component.GetComponents<T>() UnityEngine.Component.CompareTag(System.String) UnityEngine.Component.SendMessageUpwards(System.String, System.Object, UnityEngine.SendMessageOptions) UnityEngine.Component.SendMessageUpwards(System.String, System.Object) UnityEngine.Component.SendMessageUpwards(System.String) UnityEngine.Component.SendMessageUpwards(System.String, UnityEngine.SendMessageOptions) UnityEngine.Component.SendMessage(System.String, System.Object, UnityEngine.SendMessageOptions) UnityEngine.Component.SendMessage(System.String, System.Object) UnityEngine.Component.SendMessage(System.String) UnityEngine.Component.SendMessage(System.String, UnityEngine.SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object, UnityEngine.SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object) UnityEngine.Component.BroadcastMessage(System.String) UnityEngine.Component.BroadcastMessage(System.String, UnityEngine.SendMessageOptions) UnityEngine.Component.transform UnityEngine.Component.gameObject UnityEngine.Component.tag UnityEngine.Component.rigidbody UnityEngine.Component.rigidbody2D UnityEngine.Component.camera UnityEngine.Component.light UnityEngine.Component.animation UnityEngine.Component.constantForce UnityEngine.Component.renderer UnityEngine.Component.audio UnityEngine.Component.guiText UnityEngine.Component.networkView UnityEngine.Component.guiElement UnityEngine.Component.guiTexture UnityEngine.Component.collider UnityEngine.Component.collider2D UnityEngine.Component.hingeJoint UnityEngine.Component.particleEmitter UnityEngine.Component.particleSystem UnityEngine.Object.Destroy(UnityEngine.Object, System.Single) UnityEngine.Object.Destroy(UnityEngine.Object) UnityEngine.Object.DestroyImmediate(UnityEngine.Object, System.Boolean) UnityEngine.Object.DestroyImmediate(UnityEngine.Object) UnityEngine.Object.FindObjectsOfType(System.Type) UnityEngine.Object.DontDestroyOnLoad(UnityEngine.Object) UnityEngine.Object.DestroyObject(UnityEngine.Object, System.Single) UnityEngine.Object.DestroyObject(UnityEngine.Object) UnityEngine.Object.FindSceneObjectsOfType(System.Type) UnityEngine.Object.FindObjectsOfTypeIncludingAssets(System.Type) UnityEngine.Object.FindObjectsOfTypeAll(System.Type) UnityEngine.Object.ToString() UnityEngine.Object.GetInstanceID() UnityEngine.Object.GetHashCode() UnityEngine.Object.Equals(System.Object) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Vector3, UnityEngine.Quaternion) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Transform) UnityEngine.Object.Instantiate(UnityEngine.Object) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Transform) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Transform, System.Boolean) UnityEngine.Object.Instantiate<T>(T) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Vector3, UnityEngine.Quaternion) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Transform) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Transform) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Transform, System.Boolean) UnityEngine.Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType(System.Type) UnityEngine.Object.name UnityEngine.Object.hideFlags System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : PlayGen.SUGAR.Unity Assembly : PlayGen.SUGAR.Unity.dll Syntax public abstract class BaseGroupMemberInterface : BaseInterface Fields _groupName Text used for providing the group name for this list. Can be left null. Declaration [Tooltip(\"Input field used for providing usernames. Required.\")] [SerializeField] protected Text _groupName Field Value Type Description UnityEngine.UI.Text Methods ErrorDraw(Boolean) Used to set error text in case of no user being signed in, loading issues or if no results are available. Declaration protected override void ErrorDraw(bool loadingSuccess) Parameters Type Name Description System.Boolean loadingSuccess Overrides BaseInterface.ErrorDraw(Boolean) HideInterfaces() Hides Account, Evaluation, Leaderboard, GameLeaderboard and UserFriend UI objects. Set groupName text to match name of CurrentGroup. Declaration protected override void HideInterfaces() Overrides BaseInterface.HideInterfaces() LoadErrorText() Get error string from Localization with key \"GROUPS_LOAD_ERROR\" if there were issues loading the evaluation list. Declaration protected override string LoadErrorText() Returns Type Description System.String Overrides BaseInterface.LoadErrorText() NoResultsErrorText() Get error string from Localization with key \"NO_RESULTS_ERROR\" if there were no group members to display. Declaration protected override string NoResultsErrorText() Returns Type Description System.String Overrides BaseInterface.NoResultsErrorText()"
  },
  "unity-client/api/PlayGen.SUGAR.Unity.BaseUserFriendInterface.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.BaseUserFriendInterface.html",
    "title": "Class BaseUserFriendInterface | SUGAR",
    "keywords": "Class BaseUserFriendInterface Base abstract class for controlling the UI object related to friends lists Inheritance System.Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour BaseInterface BaseUserFriendInterface Inherited Members BaseInterface._errorText BaseInterface._closeButton BaseInterface._signinButton BaseInterface.Awake() BaseInterface.PreDisplay() BaseInterface.Show(Boolean) BaseInterface.Draw() BaseInterface.ErrorDraw(Boolean) BaseInterface.OnSignIn() UnityEngine.MonoBehaviour.Invoke(System.String, System.Single) UnityEngine.MonoBehaviour.InvokeRepeating(System.String, System.Single, System.Single) UnityEngine.MonoBehaviour.CancelInvoke() UnityEngine.MonoBehaviour.CancelInvoke(System.String) UnityEngine.MonoBehaviour.IsInvoking(System.String) UnityEngine.MonoBehaviour.IsInvoking() UnityEngine.MonoBehaviour.StartCoroutine(System.Collections.IEnumerator) UnityEngine.MonoBehaviour.StartCoroutine_Auto(System.Collections.IEnumerator) UnityEngine.MonoBehaviour.StartCoroutine(System.String, System.Object) UnityEngine.MonoBehaviour.StartCoroutine(System.String) UnityEngine.MonoBehaviour.StopCoroutine(System.String) UnityEngine.MonoBehaviour.StopCoroutine(System.Collections.IEnumerator) UnityEngine.MonoBehaviour.StopCoroutine(UnityEngine.Coroutine) UnityEngine.MonoBehaviour.StopAllCoroutines() UnityEngine.MonoBehaviour.print(System.Object) UnityEngine.MonoBehaviour.useGUILayout UnityEngine.MonoBehaviour.runInEditMode UnityEngine.Behaviour.enabled UnityEngine.Behaviour.isActiveAndEnabled UnityEngine.Component.GetComponent(System.Type) UnityEngine.Component.GetComponent<T>() UnityEngine.Component.GetComponent(System.String) UnityEngine.Component.GetComponentInChildren(System.Type, System.Boolean) UnityEngine.Component.GetComponentInChildren(System.Type) UnityEngine.Component.GetComponentInChildren<T>() UnityEngine.Component.GetComponentInChildren<T>(System.Boolean) UnityEngine.Component.GetComponentsInChildren(System.Type) UnityEngine.Component.GetComponentsInChildren(System.Type, System.Boolean) UnityEngine.Component.GetComponentsInChildren<T>(System.Boolean) UnityEngine.Component.GetComponentsInChildren<T>(System.Boolean, System.Collections.Generic.List<T>) UnityEngine.Component.GetComponentsInChildren<T>() UnityEngine.Component.GetComponentsInChildren<T>(System.Collections.Generic.List<T>) UnityEngine.Component.GetComponentInParent(System.Type) UnityEngine.Component.GetComponentInParent<T>() UnityEngine.Component.GetComponentsInParent(System.Type) UnityEngine.Component.GetComponentsInParent(System.Type, System.Boolean) UnityEngine.Component.GetComponentsInParent<T>(System.Boolean) UnityEngine.Component.GetComponentsInParent<T>(System.Boolean, System.Collections.Generic.List<T>) UnityEngine.Component.GetComponentsInParent<T>() UnityEngine.Component.GetComponents(System.Type) UnityEngine.Component.GetComponents(System.Type, System.Collections.Generic.List<UnityEngine.Component>) UnityEngine.Component.GetComponents<T>(System.Collections.Generic.List<T>) UnityEngine.Component.GetComponents<T>() UnityEngine.Component.CompareTag(System.String) UnityEngine.Component.SendMessageUpwards(System.String, System.Object, UnityEngine.SendMessageOptions) UnityEngine.Component.SendMessageUpwards(System.String, System.Object) UnityEngine.Component.SendMessageUpwards(System.String) UnityEngine.Component.SendMessageUpwards(System.String, UnityEngine.SendMessageOptions) UnityEngine.Component.SendMessage(System.String, System.Object, UnityEngine.SendMessageOptions) UnityEngine.Component.SendMessage(System.String, System.Object) UnityEngine.Component.SendMessage(System.String) UnityEngine.Component.SendMessage(System.String, UnityEngine.SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object, UnityEngine.SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object) UnityEngine.Component.BroadcastMessage(System.String) UnityEngine.Component.BroadcastMessage(System.String, UnityEngine.SendMessageOptions) UnityEngine.Component.transform UnityEngine.Component.gameObject UnityEngine.Component.tag UnityEngine.Component.rigidbody UnityEngine.Component.rigidbody2D UnityEngine.Component.camera UnityEngine.Component.light UnityEngine.Component.animation UnityEngine.Component.constantForce UnityEngine.Component.renderer UnityEngine.Component.audio UnityEngine.Component.guiText UnityEngine.Component.networkView UnityEngine.Component.guiElement UnityEngine.Component.guiTexture UnityEngine.Component.collider UnityEngine.Component.collider2D UnityEngine.Component.hingeJoint UnityEngine.Component.particleEmitter UnityEngine.Component.particleSystem UnityEngine.Object.Destroy(UnityEngine.Object, System.Single) UnityEngine.Object.Destroy(UnityEngine.Object) UnityEngine.Object.DestroyImmediate(UnityEngine.Object, System.Boolean) UnityEngine.Object.DestroyImmediate(UnityEngine.Object) UnityEngine.Object.FindObjectsOfType(System.Type) UnityEngine.Object.DontDestroyOnLoad(UnityEngine.Object) UnityEngine.Object.DestroyObject(UnityEngine.Object, System.Single) UnityEngine.Object.DestroyObject(UnityEngine.Object) UnityEngine.Object.FindSceneObjectsOfType(System.Type) UnityEngine.Object.FindObjectsOfTypeIncludingAssets(System.Type) UnityEngine.Object.FindObjectsOfTypeAll(System.Type) UnityEngine.Object.ToString() UnityEngine.Object.GetInstanceID() UnityEngine.Object.GetHashCode() UnityEngine.Object.Equals(System.Object) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Vector3, UnityEngine.Quaternion) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Transform) UnityEngine.Object.Instantiate(UnityEngine.Object) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Transform) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Transform, System.Boolean) UnityEngine.Object.Instantiate<T>(T) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Vector3, UnityEngine.Quaternion) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Transform) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Transform) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Transform, System.Boolean) UnityEngine.Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType(System.Type) UnityEngine.Object.name UnityEngine.Object.hideFlags System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : PlayGen.SUGAR.Unity Assembly : PlayGen.SUGAR.Unity.dll Syntax public abstract class BaseUserFriendInterface : BaseInterface Methods GetFriends() Get and display the friends list for the currently signed in user. Declaration protected void GetFriends() GetPendingReceived() Get and display the list of pending received friend requests for the currently signed in user. Declaration protected void GetPendingReceived() GetPendingSent() Get and display the list of pending sent friend requests for the currently signed in user. Declaration protected void GetPendingSent() GetSearchResults(String) Get and display the search results for the provided string. Declaration protected void GetSearchResults(string search) Parameters Type Name Description System.String search HideInterfaces() Hides Account, GameLeaderboard, Leaderboard, Evaluation, GroupMember and UserGroup UI objects. Declaration protected override void HideInterfaces() Overrides BaseInterface.HideInterfaces() LoadErrorText() Get error string from Localization with key \"FRIENDS_LOAD_ERROR\" if there were issues loading the friends list. Declaration protected override string LoadErrorText() Returns Type Description System.String Overrides BaseInterface.LoadErrorText() NoResultsErrorText() Get error string from Localization with key \"NO_RESULTS_ERROR\" if there were no friends to display. Declaration protected override string NoResultsErrorText() Returns Type Description System.String Overrides BaseInterface.NoResultsErrorText()"
  },
  "unity-client/api/PlayGen.SUGAR.Unity.CommandLineUtility.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.CommandLineUtility.html",
    "title": "Class CommandLineUtility | SUGAR",
    "keywords": "Class CommandLineUtility Inheritance System.Object CommandLineUtility Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : PlayGen.SUGAR.Unity Assembly : PlayGen.SUGAR.Unity.dll Syntax public static class CommandLineUtility Fields CustomArgs Declaration public static Dictionary<string, string> CustomArgs Field Value Type Description System.Collections.Generic.Dictionary < System.String , System.String > Methods ParseArgs(String[]) Declaration public static CommandLineOptions ParseArgs(string[] args) Parameters Type Name Description System.String [] args Returns Type Description CommandLineOptions"
  },
  "unity-client/api/PlayGen.SUGAR.Unity.Config.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.Config.html",
    "title": "Class Config | SUGAR",
    "keywords": "Class Config Inheritance System.Object Config Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : PlayGen.SUGAR.Unity Assembly : PlayGen.SUGAR.Unity.dll Syntax public class Config Properties BaseUri Declaration public string BaseUri { get; set; } Property Value Type Description System.String"
  },
  "unity-client/api/PlayGen.SUGAR.Unity.Editor.SeedGame.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.Editor.SeedGame.html",
    "title": "Class SeedGame | SUGAR",
    "keywords": "Class SeedGame Inheritance System.Object SeedGame Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : PlayGen.SUGAR.Unity.Editor Assembly : PlayGen.SUGAR.Unity.Editor.dll Syntax public static class SeedGame Properties DefaultGameSeed Declaration public static TextAsset DefaultGameSeed { get; } Property Value Type Description UnityEngine.TextAsset Methods ShowSeedGameWindow() Declaration [MenuItem(\"Tools/SUGAR/Seed Game\")] public static void ShowSeedGameWindow() TryApplySeed(String, String, TextAsset, out List<String>) Declaration public static bool TryApplySeed(string username, string password, TextAsset gameSeedText, out List<string> errors) Parameters Type Name Description System.String username System.String password UnityEngine.TextAsset gameSeedText System.Collections.Generic.List < System.String > errors Returns Type Description System.Boolean"
  },
  "unity-client/api/PlayGen.SUGAR.Unity.Editor.SeedGameWindow.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.Editor.SeedGameWindow.html",
    "title": "Class SeedGameWindow | SUGAR",
    "keywords": "Class SeedGameWindow Inheritance System.Object UnityEngine.Object UnityEngine.ScriptableObject UnityEditor.EditorWindow SeedGameWindow Inherited Members UnityEditor.EditorWindow.GetWindow(System.Type, System.Boolean, System.String) UnityEditor.EditorWindow.GetWindow(System.Type, System.Boolean) UnityEditor.EditorWindow.GetWindow(System.Type) UnityEditor.EditorWindow.GetWindow(System.Type, System.Boolean, System.String, System.Boolean) UnityEditor.EditorWindow.GetWindowWithRect(System.Type, UnityEngine.Rect, System.Boolean) UnityEditor.EditorWindow.GetWindowWithRect(System.Type, UnityEngine.Rect) UnityEditor.EditorWindow.GetWindowWithRect(System.Type, UnityEngine.Rect, System.Boolean, System.String) UnityEditor.EditorWindow.BeginWindows() UnityEditor.EditorWindow.EndWindows() UnityEditor.EditorWindow.ShowNotification(UnityEngine.GUIContent) UnityEditor.EditorWindow.RemoveNotification() UnityEditor.EditorWindow.ShowTab() UnityEditor.EditorWindow.Focus() UnityEditor.EditorWindow.ShowUtility() UnityEditor.EditorWindow.ShowPopup() UnityEditor.EditorWindow.ShowAsDropDown(UnityEngine.Rect, UnityEngine.Vector2) UnityEditor.EditorWindow.Show() UnityEditor.EditorWindow.Show(System.Boolean) UnityEditor.EditorWindow.ShowAuxWindow() UnityEditor.EditorWindow.GetWindow<T>() UnityEditor.EditorWindow.GetWindow<T>(System.Boolean) UnityEditor.EditorWindow.GetWindow<T>(System.Boolean, System.String) UnityEditor.EditorWindow.GetWindow<T>(System.String) UnityEditor.EditorWindow.GetWindow<T>(System.String, System.Boolean) UnityEditor.EditorWindow.GetWindow<T>(System.Boolean, System.String, System.Boolean) UnityEditor.EditorWindow.GetWindow<T>(System.Type[]) UnityEditor.EditorWindow.GetWindow<T>(System.String, System.Type[]) UnityEditor.EditorWindow.GetWindow<T>(System.String, System.Boolean, System.Type[]) UnityEditor.EditorWindow.FocusWindowIfItsOpen(System.Type) UnityEditor.EditorWindow.FocusWindowIfItsOpen<T>() UnityEditor.EditorWindow.GetWindowWithRect<T>(UnityEngine.Rect) UnityEditor.EditorWindow.GetWindowWithRect<T>(UnityEngine.Rect, System.Boolean) UnityEditor.EditorWindow.GetWindowWithRect<T>(UnityEngine.Rect, System.Boolean, System.String) UnityEditor.EditorWindow.GetWindowWithRect<T>(UnityEngine.Rect, System.Boolean, System.String, System.Boolean) UnityEditor.EditorWindow.Close() UnityEditor.EditorWindow.Repaint() UnityEditor.EditorWindow.SendEvent(UnityEngine.Event) UnityEditor.EditorWindow.wantsMouseMove UnityEditor.EditorWindow.wantsMouseEnterLeaveWindow UnityEditor.EditorWindow.autoRepaintOnSceneChange UnityEditor.EditorWindow.maximized UnityEditor.EditorWindow.focusedWindow UnityEditor.EditorWindow.mouseOverWindow UnityEditor.EditorWindow.minSize UnityEditor.EditorWindow.maxSize UnityEditor.EditorWindow.title UnityEditor.EditorWindow.titleContent UnityEditor.EditorWindow.depthBufferBits UnityEditor.EditorWindow.antiAlias UnityEditor.EditorWindow.position UnityEngine.ScriptableObject.SetDirty() UnityEngine.ScriptableObject.CreateInstance(System.String) UnityEngine.ScriptableObject.CreateInstance(System.Type) UnityEngine.ScriptableObject.CreateInstance<T>() UnityEngine.Object.Destroy(UnityEngine.Object, System.Single) UnityEngine.Object.Destroy(UnityEngine.Object) UnityEngine.Object.DestroyImmediate(UnityEngine.Object, System.Boolean) UnityEngine.Object.DestroyImmediate(UnityEngine.Object) UnityEngine.Object.FindObjectsOfType(System.Type) UnityEngine.Object.DontDestroyOnLoad(UnityEngine.Object) UnityEngine.Object.DestroyObject(UnityEngine.Object, System.Single) UnityEngine.Object.DestroyObject(UnityEngine.Object) UnityEngine.Object.FindSceneObjectsOfType(System.Type) UnityEngine.Object.FindObjectsOfTypeIncludingAssets(System.Type) UnityEngine.Object.FindObjectsOfTypeAll(System.Type) UnityEngine.Object.ToString() UnityEngine.Object.GetInstanceID() UnityEngine.Object.GetHashCode() UnityEngine.Object.Equals(System.Object) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Vector3, UnityEngine.Quaternion) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Transform) UnityEngine.Object.Instantiate(UnityEngine.Object) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Transform) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Transform, System.Boolean) UnityEngine.Object.Instantiate<T>(T) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Vector3, UnityEngine.Quaternion) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Transform) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Transform) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Transform, System.Boolean) UnityEngine.Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType(System.Type) UnityEngine.Object.name UnityEngine.Object.hideFlags System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : PlayGen.SUGAR.Unity.Editor Assembly : PlayGen.SUGAR.Unity.Editor.dll Syntax public class SeedGameWindow : EditorWindow Methods SetGameSeed(TextAsset) Declaration public void SetGameSeed(TextAsset gameSeed) Parameters Type Name Description UnityEngine.TextAsset gameSeed"
  },
  "unity-client/api/PlayGen.SUGAR.Unity.LeaderboardUnityClient.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.LeaderboardUnityClient.html",
    "title": "Class LeaderboardUnityClient | SUGAR",
    "keywords": "Class LeaderboardUnityClient Unity client for calls related to leaderboard standings. Inheritance System.Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour BaseUnityClient < BaseLeaderboardInterface > LeaderboardUnityClient Inherited Members BaseUnityClient<BaseLeaderboardInterface>._interface BaseUnityClient<BaseLeaderboardInterface>.HasInterface BaseUnityClient<BaseLeaderboardInterface>.IsActive BaseUnityClient<BaseLeaderboardInterface>.Hide() UnityEngine.MonoBehaviour.Invoke(System.String, System.Single) UnityEngine.MonoBehaviour.InvokeRepeating(System.String, System.Single, System.Single) UnityEngine.MonoBehaviour.CancelInvoke() UnityEngine.MonoBehaviour.CancelInvoke(System.String) UnityEngine.MonoBehaviour.IsInvoking(System.String) UnityEngine.MonoBehaviour.IsInvoking() UnityEngine.MonoBehaviour.StartCoroutine(System.Collections.IEnumerator) UnityEngine.MonoBehaviour.StartCoroutine_Auto(System.Collections.IEnumerator) UnityEngine.MonoBehaviour.StartCoroutine(System.String, System.Object) UnityEngine.MonoBehaviour.StartCoroutine(System.String) UnityEngine.MonoBehaviour.StopCoroutine(System.String) UnityEngine.MonoBehaviour.StopCoroutine(System.Collections.IEnumerator) UnityEngine.MonoBehaviour.StopCoroutine(UnityEngine.Coroutine) UnityEngine.MonoBehaviour.StopAllCoroutines() UnityEngine.MonoBehaviour.print(System.Object) UnityEngine.MonoBehaviour.useGUILayout UnityEngine.MonoBehaviour.runInEditMode UnityEngine.Behaviour.enabled UnityEngine.Behaviour.isActiveAndEnabled UnityEngine.Component.GetComponent(System.Type) UnityEngine.Component.GetComponent<T>() UnityEngine.Component.GetComponent(System.String) UnityEngine.Component.GetComponentInChildren(System.Type, System.Boolean) UnityEngine.Component.GetComponentInChildren(System.Type) UnityEngine.Component.GetComponentInChildren<T>() UnityEngine.Component.GetComponentInChildren<T>(System.Boolean) UnityEngine.Component.GetComponentsInChildren(System.Type) UnityEngine.Component.GetComponentsInChildren(System.Type, System.Boolean) UnityEngine.Component.GetComponentsInChildren<T>(System.Boolean) UnityEngine.Component.GetComponentsInChildren<T>(System.Boolean, System.Collections.Generic.List<T>) UnityEngine.Component.GetComponentsInChildren<T>() UnityEngine.Component.GetComponentsInChildren<T>(System.Collections.Generic.List<T>) UnityEngine.Component.GetComponentInParent(System.Type) UnityEngine.Component.GetComponentInParent<T>() UnityEngine.Component.GetComponentsInParent(System.Type) UnityEngine.Component.GetComponentsInParent(System.Type, System.Boolean) UnityEngine.Component.GetComponentsInParent<T>(System.Boolean) UnityEngine.Component.GetComponentsInParent<T>(System.Boolean, System.Collections.Generic.List<T>) UnityEngine.Component.GetComponentsInParent<T>() UnityEngine.Component.GetComponents(System.Type) UnityEngine.Component.GetComponents(System.Type, System.Collections.Generic.List<UnityEngine.Component>) UnityEngine.Component.GetComponents<T>(System.Collections.Generic.List<T>) UnityEngine.Component.GetComponents<T>() UnityEngine.Component.CompareTag(System.String) UnityEngine.Component.SendMessageUpwards(System.String, System.Object, UnityEngine.SendMessageOptions) UnityEngine.Component.SendMessageUpwards(System.String, System.Object) UnityEngine.Component.SendMessageUpwards(System.String) UnityEngine.Component.SendMessageUpwards(System.String, UnityEngine.SendMessageOptions) UnityEngine.Component.SendMessage(System.String, System.Object, UnityEngine.SendMessageOptions) UnityEngine.Component.SendMessage(System.String, System.Object) UnityEngine.Component.SendMessage(System.String) UnityEngine.Component.SendMessage(System.String, UnityEngine.SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object, UnityEngine.SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object) UnityEngine.Component.BroadcastMessage(System.String) UnityEngine.Component.BroadcastMessage(System.String, UnityEngine.SendMessageOptions) UnityEngine.Component.transform UnityEngine.Component.gameObject UnityEngine.Component.tag UnityEngine.Component.rigidbody UnityEngine.Component.rigidbody2D UnityEngine.Component.camera UnityEngine.Component.light UnityEngine.Component.animation UnityEngine.Component.constantForce UnityEngine.Component.renderer UnityEngine.Component.audio UnityEngine.Component.guiText UnityEngine.Component.networkView UnityEngine.Component.guiElement UnityEngine.Component.guiTexture UnityEngine.Component.collider UnityEngine.Component.collider2D UnityEngine.Component.hingeJoint UnityEngine.Component.particleEmitter UnityEngine.Component.particleSystem UnityEngine.Object.Destroy(UnityEngine.Object, System.Single) UnityEngine.Object.Destroy(UnityEngine.Object) UnityEngine.Object.DestroyImmediate(UnityEngine.Object, System.Boolean) UnityEngine.Object.DestroyImmediate(UnityEngine.Object) UnityEngine.Object.FindObjectsOfType(System.Type) UnityEngine.Object.DontDestroyOnLoad(UnityEngine.Object) UnityEngine.Object.DestroyObject(UnityEngine.Object, System.Single) UnityEngine.Object.DestroyObject(UnityEngine.Object) UnityEngine.Object.FindSceneObjectsOfType(System.Type) UnityEngine.Object.FindObjectsOfTypeIncludingAssets(System.Type) UnityEngine.Object.FindObjectsOfTypeAll(System.Type) UnityEngine.Object.ToString() UnityEngine.Object.GetInstanceID() UnityEngine.Object.GetHashCode() UnityEngine.Object.Equals(System.Object) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Vector3, UnityEngine.Quaternion) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Transform) UnityEngine.Object.Instantiate(UnityEngine.Object) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Transform) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Transform, System.Boolean) UnityEngine.Object.Instantiate<T>(T) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Vector3, UnityEngine.Quaternion) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Transform) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Transform) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Transform, System.Boolean) UnityEngine.Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType(System.Type) UnityEngine.Object.name UnityEngine.Object.hideFlags System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : PlayGen.SUGAR.Unity Assembly : PlayGen.SUGAR.Unity.dll Syntax [DisallowMultipleComponent] public class LeaderboardUnityClient : BaseUnityClient<BaseLeaderboardInterface> Properties CurrentFilter Current filter to use for gathering leaderboard standings. Declaration public LeaderboardFilterType CurrentFilter { get; } Property Value Type Description PlayGen.SUGAR.Common.LeaderboardFilterType CurrentLeaderboard Current leaderboard to use for gathering leaderboard standings from. Declaration public LeaderboardResponse CurrentLeaderboard { get; } Property Value Type Description PlayGen.SUGAR.Contracts.LeaderboardResponse CurrentStandings Last set of standings gathered. Declaration public List<LeaderboardStandingsResponse> CurrentStandings { get; } Property Value Type Description System.Collections.Generic.List < PlayGen.SUGAR.Contracts.LeaderboardStandingsResponse > PositionCount Number of results that should be gathered per call. Declaration public int PositionCount { get; } Property Value Type Description System.Int32 Methods Display(String, LeaderboardFilterType, Int32, Boolean) Gathers information on the leaderboard with the token provided and gets current standings based on the filter and page number provided, with the UI object displayed if provided. Declaration public void Display(string token, LeaderboardFilterType filter, int pageNumber = 0, bool globalLeaderboard = false) Parameters Type Name Description System.String token PlayGen.SUGAR.Common.LeaderboardFilterType filter System.Int32 pageNumber System.Boolean globalLeaderboard GetLeaderboardStandings(Int32, Action<Boolean>, Action<List<LeaderboardStandingsResponse>>) Get standings for the current leaderboard. A request for results to be returned means that the standings gotten will not be stored. Otherwise, they will be saved into CurrentStandings. Declaration public void GetLeaderboardStandings(int pageNumber, Action<bool> success, Action<List<LeaderboardStandingsResponse>> result = null) Parameters Type Name Description System.Int32 pageNumber System.Action < System.Boolean > success System.Action < System.Collections.Generic.List < PlayGen.SUGAR.Contracts.LeaderboardStandingsResponse >> result SetPositionCount(Int32) Set the number of results to get at most per call. Declaration public void SetPositionCount(int count) Parameters Type Name Description System.Int32 count"
  },
  "unity-client/api/PlayGen.SUGAR.Unity.ResourceUnityClient.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.ResourceUnityClient.html",
    "title": "Class ResourceUnityClient | SUGAR",
    "keywords": "Class ResourceUnityClient Unity client for calls related to resources. Inheritance System.Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour ResourceUnityClient Inherited Members UnityEngine.MonoBehaviour.Invoke(System.String, System.Single) UnityEngine.MonoBehaviour.InvokeRepeating(System.String, System.Single, System.Single) UnityEngine.MonoBehaviour.CancelInvoke() UnityEngine.MonoBehaviour.CancelInvoke(System.String) UnityEngine.MonoBehaviour.IsInvoking(System.String) UnityEngine.MonoBehaviour.IsInvoking() UnityEngine.MonoBehaviour.StartCoroutine(System.Collections.IEnumerator) UnityEngine.MonoBehaviour.StartCoroutine_Auto(System.Collections.IEnumerator) UnityEngine.MonoBehaviour.StartCoroutine(System.String, System.Object) UnityEngine.MonoBehaviour.StartCoroutine(System.String) UnityEngine.MonoBehaviour.StopCoroutine(System.String) UnityEngine.MonoBehaviour.StopCoroutine(System.Collections.IEnumerator) UnityEngine.MonoBehaviour.StopCoroutine(UnityEngine.Coroutine) UnityEngine.MonoBehaviour.StopAllCoroutines() UnityEngine.MonoBehaviour.print(System.Object) UnityEngine.MonoBehaviour.useGUILayout UnityEngine.MonoBehaviour.runInEditMode UnityEngine.Behaviour.enabled UnityEngine.Behaviour.isActiveAndEnabled UnityEngine.Component.GetComponent(System.Type) UnityEngine.Component.GetComponent<T>() UnityEngine.Component.GetComponent(System.String) UnityEngine.Component.GetComponentInChildren(System.Type, System.Boolean) UnityEngine.Component.GetComponentInChildren(System.Type) UnityEngine.Component.GetComponentInChildren<T>() UnityEngine.Component.GetComponentInChildren<T>(System.Boolean) UnityEngine.Component.GetComponentsInChildren(System.Type) UnityEngine.Component.GetComponentsInChildren(System.Type, System.Boolean) UnityEngine.Component.GetComponentsInChildren<T>(System.Boolean) UnityEngine.Component.GetComponentsInChildren<T>(System.Boolean, System.Collections.Generic.List<T>) UnityEngine.Component.GetComponentsInChildren<T>() UnityEngine.Component.GetComponentsInChildren<T>(System.Collections.Generic.List<T>) UnityEngine.Component.GetComponentInParent(System.Type) UnityEngine.Component.GetComponentInParent<T>() UnityEngine.Component.GetComponentsInParent(System.Type) UnityEngine.Component.GetComponentsInParent(System.Type, System.Boolean) UnityEngine.Component.GetComponentsInParent<T>(System.Boolean) UnityEngine.Component.GetComponentsInParent<T>(System.Boolean, System.Collections.Generic.List<T>) UnityEngine.Component.GetComponentsInParent<T>() UnityEngine.Component.GetComponents(System.Type) UnityEngine.Component.GetComponents(System.Type, System.Collections.Generic.List<UnityEngine.Component>) UnityEngine.Component.GetComponents<T>(System.Collections.Generic.List<T>) UnityEngine.Component.GetComponents<T>() UnityEngine.Component.CompareTag(System.String) UnityEngine.Component.SendMessageUpwards(System.String, System.Object, UnityEngine.SendMessageOptions) UnityEngine.Component.SendMessageUpwards(System.String, System.Object) UnityEngine.Component.SendMessageUpwards(System.String) UnityEngine.Component.SendMessageUpwards(System.String, UnityEngine.SendMessageOptions) UnityEngine.Component.SendMessage(System.String, System.Object, UnityEngine.SendMessageOptions) UnityEngine.Component.SendMessage(System.String, System.Object) UnityEngine.Component.SendMessage(System.String) UnityEngine.Component.SendMessage(System.String, UnityEngine.SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object, UnityEngine.SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object) UnityEngine.Component.BroadcastMessage(System.String) UnityEngine.Component.BroadcastMessage(System.String, UnityEngine.SendMessageOptions) UnityEngine.Component.transform UnityEngine.Component.gameObject UnityEngine.Component.tag UnityEngine.Component.rigidbody UnityEngine.Component.rigidbody2D UnityEngine.Component.camera UnityEngine.Component.light UnityEngine.Component.animation UnityEngine.Component.constantForce UnityEngine.Component.renderer UnityEngine.Component.audio UnityEngine.Component.guiText UnityEngine.Component.networkView UnityEngine.Component.guiElement UnityEngine.Component.guiTexture UnityEngine.Component.collider UnityEngine.Component.collider2D UnityEngine.Component.hingeJoint UnityEngine.Component.particleEmitter UnityEngine.Component.particleSystem UnityEngine.Object.Destroy(UnityEngine.Object, System.Single) UnityEngine.Object.Destroy(UnityEngine.Object) UnityEngine.Object.DestroyImmediate(UnityEngine.Object, System.Boolean) UnityEngine.Object.DestroyImmediate(UnityEngine.Object) UnityEngine.Object.FindObjectsOfType(System.Type) UnityEngine.Object.DontDestroyOnLoad(UnityEngine.Object) UnityEngine.Object.DestroyObject(UnityEngine.Object, System.Single) UnityEngine.Object.DestroyObject(UnityEngine.Object) UnityEngine.Object.FindSceneObjectsOfType(System.Type) UnityEngine.Object.FindObjectsOfTypeIncludingAssets(System.Type) UnityEngine.Object.FindObjectsOfTypeAll(System.Type) UnityEngine.Object.ToString() UnityEngine.Object.GetInstanceID() UnityEngine.Object.GetHashCode() UnityEngine.Object.Equals(System.Object) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Vector3, UnityEngine.Quaternion) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Transform) UnityEngine.Object.Instantiate(UnityEngine.Object) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Transform) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Transform, System.Boolean) UnityEngine.Object.Instantiate<T>(T) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Vector3, UnityEngine.Quaternion) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Transform) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Transform) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Transform, System.Boolean) UnityEngine.Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType(System.Type) UnityEngine.Object.name UnityEngine.Object.hideFlags System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : PlayGen.SUGAR.Unity Assembly : PlayGen.SUGAR.Unity.dll Syntax public class ResourceUnityClient : MonoBehaviour Properties GlobalUserResources Resources for the user not tied to any game. Declaration public Dictionary<string, long> GlobalUserResources { get; } Property Value Type Description System.Collections.Generic.Dictionary < System.String , System.Int64 > UserGameResources Resources for the currently signed in user for this game. Declaration public Dictionary<string, long> UserGameResources { get; } Property Value Type Description System.Collections.Generic.Dictionary < System.String , System.Int64 > Methods Add(String, Int64, Action<Boolean>, Boolean) Add the resource with the key provided from the currently signed in user. If globalResource is true, resource transferred will be global rather than for the game. Declaration public void Add(string key, long amount, Action<bool> success, bool globalResource = false) Parameters Type Name Description System.String key System.Int64 amount System.Action < System.Boolean > success System.Boolean globalResource Get(Action<List<ResourceResponse>>, String[], Boolean) Get the resources with the keys provided for the signed in user. If globalResource is true, resources will be global rather than for the game. Declaration public void Get(Action<List<ResourceResponse>> result, string[] keys = null, bool globalResource = false) Parameters Type Name Description System.Action < System.Collections.Generic.List < PlayGen.SUGAR.Contracts.ResourceResponse >> result System.String [] keys System.Boolean globalResource Transfer(Int32, String, Int64, Action<Boolean>, Boolean) Transfer the resource with the key provided from the currently signed in user to the user with the provided id. If globalResource is true, resource transferred will be global rather than for the game. Declaration public void Transfer(int recipientId, string key, long amount, Action<bool> success, bool globalResource = false) Parameters Type Name Description System.Int32 recipientId System.String key System.Int64 amount System.Action < System.Boolean > success System.Boolean globalResource"
  },
  "unity-client/tutorials/quick-start.html": {
    "href": "unity-client/tutorials/quick-start.html",
    "title": "Quick Start | SUGAR",
    "keywords": "Quick Start Note: Please ensure you have created a SUGAR account before going through the following steps. If you don't already have one, you can create a SUGAR account here . Add SUGAR Add the 'SUGAR' prefab, found at SUGAR/Prefabs/SUGAR, into your starting scene. All of the interfaces referenced on the Unity Clients on this object can be found at SUGAR/Example/Prefabs/Landscape. Create Game Seed File Open the 'Edit Game Seed' tool by clicking Tools/SUGAR/Edit Game Seed. Create a new game seed by clicking the 'Create Game Seed' button. Fill in the 'Name' field with the name of the game you wish to seed. Save this basic Seed file by clicking the 'Save' button. If you do not change the selected file, this will overwrite the provided 'GameSeed' file. If you wish to set up the achievements, leaderboards and skills for your game now, go to the guide on Seeding for further details. Seed Game Open the 'Seed Game' tool by clicking Tools/SUGAR/Seed Game. Fill in the provided Username and Password fields with your SUGAR details. If you did not overwrite the provided 'GameSeed' file, change the 'Game Seed File' field to use the file you created during step 2. Click the 'Sign-in and Seed' button to add the game to the platform. This step will fail if the seed file is invalid or you provide invalid user details. Check that the 'Game Token' and 'Game Id' fields on the SUGAR object in your starting scene has been edited to match the details of the game you just created. Set Auto Log-in Values (optional) Open the 'Set Auto Log-in Values' tool by clicking Tools/SUGAR/Set Auto Log-in Values. Fill in the details you want to use to automatically sign in when testing in Unity. This feature is disabled if either 'Auto Log-in' within the tool or 'Allow Auto Login' in 'Account Unity Client' on the 'SUGAR' prefab is not checked."
  },
  "unity-client/tutorials/seeding.html": {
    "href": "unity-client/tutorials/seeding.html",
    "title": "Seeding | SUGAR",
    "keywords": "Seeding Name : The name of the game you are adding to the SUGAR system. Please note that this name must be unique to the host. Achievements/Skills Name : The name of the achievement/skill you are creating. Please note that this name must be unique to the game. Description : The description of the achievement/skill you are creating. Token : The unique identification token for the achievement/skill you are creating. Please note that this name must be unique to the game. ActorType : The type of Actor which this achievement/skill applies to. Evaluation Criteria EvaluationDataKey : The key of the data which is being used for this criteria. EvaluationDataCategory : The category of data which the criteria is being checked against. ComparisonType : What the current value has to be compared to the target value in order for this criteria to be completed. CriteriaQueryType : The data set from which the current value will be gathered. EvaluationDataType : The type of data which the criteria is being checked for. Scope : The range of actors from which the data will be collected for comparision. Value : The target value of this criteria. Rewards EvaluationDataKey : The key of the data which will be provided to the actor upon completion of all criteria. EvaluationDataCategory : The category of data which will be provided to the actor upon completion of all criteria. EvaluationDataType : The type of data which will be provided to the actor upon completion of all criteria. Value : The value which will be provided to the actor upon completion of all criteria. Leaderboards Token : The unique identification token for the leaderboard you are creating. Please note that this name must be unique to the game. Name : The name of the leaderboard you are creating. Please note that this name must be unique to the game. Key : The key of the data which will be used to form the leaderboard. ActorType : The type of Actor which this leaderboard applies to. EvaluationDataCategory : The category of data which will be used for this leaderboard. EvaluationDataType : The type of data which will be used for this leaderboard. CriteriaScope : The range of actors from which the data will be collected. LeaderboardType : How collected data will be sorted for this leaderboard. Enums ActorType Undefined : Intended use not defined and as such means it applies to both Users and Groups. User : Intended for use for Users only. Group : Intended for use for Groups only. ComparisonType Equals : The current value and target value must exactly match. Not Equal : The current value and target value do not exactly match. Greater : The current value is greater in value than the target value (Long and Float only). Greater or Equal : The current value is greater or exactly equal in value to the target value (Long and Float only). Lesser : The current value is lower in value than the target value (Long and Float only). Lesser or Equal : The current value is lower or exactly equal in value to the target value (Long and Float only). CriteriaScope Actor : Data collected will have been submitted by the actor themselves. Related Users : Data collected will have been submitted by the actor and their friends (if the actor is a User) or their members (if the actor is a Group). ActorType cannot also be Undefined. Related Groups : Data collected will have been submitted by the actor and their alliances. ActorType must be Group. Related Group Users : Data collected will have been submitted by their members and the members of their alliances. ActorType must be Group. CriteriaQueryType Any : Any collected data will be compared against the value set in the criteria. Can only be used when Scope is set to Actor. Sum : The sum of all collected data will be compared against the value set in the criteria. Can only be used when EvaluationDataType is set to Long or Float. Latest : The latest piece of data will be compared against the value set in the criteria. Can only be used when Scope is set to Actor. EvaluationDataCategory Game Data : The data has been stored as a piece of Game Data, which allows for multiple values for the same key and all EvaluationDataTypes. Resource : The data has been stored as a Resource, which allows for only one value per key and has its value stored as a Long. Skill : The data has been stored as a Skill, marking the completion of all criteria for a Skill. Achievement : The data has been stored as a Achievement, marking the completion of all criteria for a Achievement. Match Data : The data has been stored as a piece of Match Data, which allows for multiple values for the same key in relation to a Match and all EvaluationDataTypes. EvaluationDataType String : The data has been stored and can be parsed as a String. Long : The data has been stored and can be parsed as a Long. Float : The data has been stored and can be parsed as a Float. Boolean : The data has been stored and can be parsed as a Boolean. LeaderboardType Highest : The leaderboard will be sorted from highest single value to lowest (Long and Float only). Lowest : The leaderboard will be sorted from lowest single value to highest (Long and Float only). Cumulative : The leaderboard will be sorted from highest combined value to lowest (Long and Float only). Count : The leaderboard will be sorted from the highest amount which the key has been recorded to the lowest (String and Boolean only). Earliest : The leaderboard will be sorted from the earliest time the key was recorded to the latest (String and Boolean only). Latest : The leaderboard will be sorted from the latest time the key was recorded to the earliest (String and Boolean only)."
  },
  "unity-client/index.html": {
    "href": "unity-client/index.html",
    "title": "SUGAR-Unity Client | SUGAR",
    "keywords": "SUGAR-Unity Client Welcome to the documentation for the Unity Client of the SUGAR Engine. SUGAR Engine If you haven't already read the documentation for the SUGAR Engine, it is highly recommended that you do that first as that is where the core concepts are explained along with a demo and other useful information. SUGAR Engine Documentation Unity Client This documentation details the API of the C# client for the Unity Game Engine. Installation You can download the SUGAR Unity Client from the Unity Asset Store"
  },
  "restapi/restapi.html": {
    "href": "restapi/restapi.html",
    "title": "SUGAR Engine REST API | SUGAR",
    "keywords": "SUGAR Engine REST API Account ApiAccountCreatePost Register a new account and creates an associated user. Requires the PlayGen.SUGAR.Contracts.AccountRequest.Name to be unique. Returns a JsonWebToken used for authorization in any further calls to the API. Example Usage: POST api/account/create Request POST /api/Account/create Parameters Name Type Value Notes accountRequest PlayGen.SUGAR.Contracts.AccountRequest object that contains the details of the new Account. Responses Status Code Description Samples 200 Success ApiAccountByIdDelete Delete Account with the ID provided. Example Usage: DELETE api/account/1 Request DELETE /api/Account/{id} Parameters Name Type Value Notes *id integer Account ID. Responses Status Code Description Samples 200 Success AccountSource ApiAccountSourceListGet Get a list of all AccountSources. Example Usage: GET api/accountSource/list Request GET /api/AccountSource/list Responses Status Code Description Samples 200 Success ApiAccountSourceFindbyidByIdGet Get AccountSource that matches provided. Example Usage: GET api/accountSource/findbyid/1 Request GET /api/AccountSource/findbyid/{id} Parameters Name Type Value Notes *id integer Responses Status Code Description Samples 200 Success ApiAccountSourcePost Create a new AccountSource. Requires the PlayGen.SUGAR.Contracts.AccountSourceRequest.Token to be unique. Example Usage: POST api/accountSource Request POST /api/AccountSource Parameters Name Type Value Notes newAccountSource PlayGen.SUGAR.Contracts.AccountSourceRequest object that contains the details of the new AccountSource. Responses Status Code Description Samples 200 Success ApiAccountSourceUpdateByIdPut Update an existing AccountSource. Example Usage: PUT api/accountSource/update/1 Request PUT /api/AccountSource/update/{id} Parameters Name Type Value Notes *id integer Id of the existing AccountSource. accountSource PlayGen.SUGAR.Contracts.AccountSourceRequest object that holds the details of the AccountSource. Responses Status Code Description Samples 200 Success ApiAccountSourceByIdDelete Delete AccountSource with the ID provided. Example Usage: DELETE api/accountSource/1 Request DELETE /api/AccountSource/{id} Parameters Name Type Value Notes *id integer AccountSource ID. Responses Status Code Description Samples 200 Success Achievements ApiAchievementsFindByTokenByGameIdGet Find an Achievement that matches and . Example Usage: GET api/achievements/find/ACHIEVEMENT_TOKEN/1 Request GET /api/Achievements/find/{token}/{gameId} Parameters Name Type Value Notes *token string Token of Achievement *gameId integer ID of the Game the Achievement is for Responses Status Code Description Samples 200 Success ApiAchievementsFindByTokenGlobalGet Find an Achievement that matches and . Example Usage: GET api/achievements/find/ACHIEVEMENT_TOKEN/1 Request GET /api/Achievements/find/{token}/global Parameters Name Type Value Notes *token string Token of Achievement *gameId integer ID of the Game the Achievement is for Responses Status Code Description Samples 200 Success ApiAchievementsGlobalListGet Find a list of Achievements that match . If global is provided instead of a gameId, get all global achievements, ie. achievements that are not associated with a specific game. Example Usage: GET api/achievements/game/1/list Request GET /api/Achievements/global/list Parameters Name Type Value Notes *gameId integer Game ID Responses Status Code Description Samples 200 Success ApiAchievementsGameByGameIdListGet Find a list of Achievements that match . If global is provided instead of a gameId, get all global achievements, ie. achievements that are not associated with a specific game. Example Usage: GET api/achievements/game/1/list Request GET /api/Achievements/game/{gameId}/list Parameters Name Type Value Notes *gameId integer Game ID Responses Status Code Description Samples 200 Success ApiAchievementsGameByGameIdEvaluateByActorIdGet Find the current progress for all achievements for a for . Example Usage: GET api/achievements/game/1/evaluate/1 Request GET /api/Achievements/game/{gameId}/evaluate/{actorId} Parameters Name Type Value Notes *gameId integer ID of Game *actorId integer ID of Group/User Responses Status Code Description Samples 200 Success ApiAchievementsGlobalEvaluateByActorIdGet Find the current progress for all achievements for a for . Example Usage: GET api/achievements/game/1/evaluate/1 Request GET /api/Achievements/global/evaluate/{actorId} Parameters Name Type Value Notes *gameId integer ID of Game *actorId integer ID of Group/User Responses Status Code Description Samples 200 Success ApiAchievementsByTokenByGameIdEvaluateByActorIdGet Find the current progress for an Achievement for . Example Usage: GET api/achievements/ACHIEVEMENT_TOKEN/1/evaluate/1 Request GET /api/Achievements/{token}/{gameId}/evaluate/{actorId} Parameters Name Type Value Notes *token string Token of Achievement *gameId integer ID of the Game the Achievement is for *actorId integer ID of Group/User Responses Status Code Description Samples 200 Success ApiAchievementsByTokenGlobalEvaluateByActorIdGet Find the current progress for an Achievement for . Example Usage: GET api/achievements/ACHIEVEMENT_TOKEN/1/evaluate/1 Request GET /api/Achievements/{token}/global/evaluate/{actorId} Parameters Name Type Value Notes *token string Token of Achievement *gameId integer ID of the Game the Achievement is for *actorId integer ID of Group/User Responses Status Code Description Samples 200 Success ApiAchievementsCreatePost Create a new Achievement. Requires PlayGen.SUGAR.Contracts.EvaluationCreateRequest.Name to be unique to that PlayGen.SUGAR.Contracts.EvaluationCreateRequest.GameId. Example Usage: POST api/achievements/create Request POST /api/Achievements/create Parameters Name Type Value Notes newAchievement PlayGen.SUGAR.Contracts.EvaluationCreateRequest object that holds the details of the new Achievement. Responses Status Code Description Samples 200 Success ApiAchievementsUpdatePut Update an existing Achievement. Example Usage: PUT api/achievements/update Request PUT /api/Achievements/update Parameters Name Type Value Notes achievement PlayGen.SUGAR.Contracts.EvaluationCreateRequest object that holds the details of the Achievement. Responses Status Code Description Samples 200 Success ApiAchievementsByTokenGlobalDelete Delete Achievement with the and provided. Example Usage: DELETE api/achievements/ACHIEVEMENT_TOKEN/1 Request DELETE /api/Achievements/{token}/global Parameters Name Type Value Notes *token string Token of Achievement *gameId integer ID of the Game the Achievement is for Responses Status Code Description Samples 200 Success ApiAchievementsByTokenByGameIdDelete Delete Achievement with the and provided. Example Usage: DELETE api/achievements/ACHIEVEMENT_TOKEN/1 Request DELETE /api/Achievements/{token}/{gameId} Parameters Name Type Value Notes *token string Token of Achievement *gameId integer ID of the Game the Achievement is for Responses Status Code Description Samples 200 Success ActorClaim ApiActorClaimClaimByClaimIdEntityByEntityIdGet Get a list of all Actors for this Claim and Entity. Example Usage: GET api/actorclaim/claim/1/entity/1 Request GET /api/ActorClaim/claim/{claimId}/entity/{entityId} Parameters Name Type Value Notes *claimId integer *entityId integer Responses Status Code Description Samples 200 Success ApiActorClaimActorByIdGet Get a list of all Claims for this Actor. Example Usage: GET api/actorclaim/actor/1/ Request GET /api/ActorClaim/actor/{id} Parameters Name Type Value Notes *id integer Responses Status Code Description Samples 200 Success ApiActorClaimPost Create a new ActorClaim. Example Usage: POST api/actorclaim Request POST /api/ActorClaim Parameters Name Type Value Notes newClaim PlayGen.SUGAR.Contracts.ActorClaimRequest object that contains the details of the new ActorClaim. Responses Status Code Description Samples 200 Success ApiActorClaimByIdDelete Delete ActorClaim with the ID provided. Example Usage: DELETE api/actorclaim/1 Request DELETE /api/ActorClaim/{id} Parameters Name Type Value Notes *id integer ActorClaim ID. Responses Status Code Description Samples 200 Success ActorData ApiActorDataGet Find a list of all ActorData that match the , and provided. Example Usage: GET api/actordata?actorId=1&gameId=1&key=key1&key=key2 Request GET /api/ActorData[?actorId&gameId&key] Parameters Name Type Value Notes actorId integer ID of a User/Group. gameId integer ID of a Game. key array Array of Key names. Responses Status Code Description Samples 200 Success ApiActorDataPost Create a new ActorData record. Example Usage: POST api/actordata Request POST /api/ActorData Parameters Name Type Value Notes newData PlayGen.SUGAR.Contracts.EvaluationDataRequest object that holds the details of the new ActorData. Responses Status Code Description Samples 200 Success ActorRole ApiActorRoleRoleByRoleIdEntityByEntityIdGet Get a list of all Actors for this Role and Entity. Example Usage: GET api/actorrole/role/1/entity/1 Request GET /api/ActorRole/role/{roleId}/entity/{entityId} Parameters Name Type Value Notes *roleId integer *entityId integer Responses Status Code Description Samples 200 Success ApiActorRoleActorByActorIdEntityByEntityIdClaimscopeByScopeNameGet Get a list of all Roles for this Actor, ClaimScope and Entity. Example Usage: GET api/actorrole/actor/1/entity/1/claimscope/game Request GET /api/ActorRole/actor/{actorId}/entity/{entityId}/claimscope/{scopeName} Parameters Name Type Value Notes *actorId integer *entityId integer *scopeName string Responses Status Code Description Samples 200 Success ApiActorRoleControlledGet Get a list of all Roles this Actor has control over. Example Usage: GET api/actorrole/controlled Request GET /api/ActorRole/controlled Responses Status Code Description Samples 200 Success ApiActorRolePost Create a new ActorRole. Example Usage: POST api/actorrole Request POST /api/ActorRole Parameters Name Type Value Notes newRole PlayGen.SUGAR.Contracts.ActorRoleRequest object that contains the details of the new ActorRole. Responses Status Code Description Samples 200 Success ApiActorRoleByIdDelete Delete ActorRole with the ID provided. Example Usage: DELETE api/actorrole/1 Request DELETE /api/ActorRole/{id} Parameters Name Type Value Notes *id integer ActorRole ID. Responses Status Code Description Samples 200 Success Alliance ApiAllianceRequestsByGroupIdGet Get a list of all groups that have relationship requests for this . Example Usage: GET api/alliance/requests/1 Request GET /api/Alliance/requests/{groupId} Parameters Name Type Value Notes *groupId integer ID of the group. Responses Status Code Description Samples 200 Success ApiAllianceSentrequestsByGroupIdGet Get a list of all Groups that have been sent relationship requests for this . Example Usage: GET api/alliance/sentrequests/1 Request GET /api/Alliance/sentrequests/{groupId} Parameters Name Type Value Notes *groupId integer ID of the group. Responses Status Code Description Samples 200 Success ApiAllianceByGroupIdGet Get a list of all groups that have relationships with this . Example Usage: GET api/alliance/1 Request GET /api/Alliance/{groupId} Parameters Name Type Value Notes *groupId integer ID of the group. Responses Status Code Description Samples 200 Success ApiAllianceCountByGroupIdGet Get a count of groups that have a relationship with this . Example Usage: GET api/alliances/count/1 Request GET /api/Alliance/count/{groupId} Parameters Name Type Value Notes *groupId integer ID of the group. Responses Status Code Description Samples 200 Success ApiAlliancePut Update an existing relationship between and . Requires the relationship to already exist between the User and Group. Example Usage: PUT api/alliance Request PUT /api/Alliance Parameters Name Type Value Notes relationship PlayGen.SUGAR.Contracts.RelationshipStatusUpdate object that holds the details of the relationship. Responses Status Code Description Samples 200 Success ApiAlliancePost Create a new relationship request between a Group and Group. Requires a relationship between the User and Group to not already exist. Example Usage: POST api/alliance Request POST /api/Alliance Parameters Name Type Value Notes relationship PlayGen.SUGAR.Contracts.RelationshipRequest object that holds the details of the new relationship request. Responses Status Code Description Samples 200 Success ApiAllianceRequestPut Update an existing relationship request between and . Requires the relationship request to already exist between a Group and Group. Example Usage: PUT api/alliancer/request Request PUT /api/Alliance/request Parameters Name Type Value Notes relationship PlayGen.SUGAR.Contracts.RelationshipStatusUpdate object that holds the details of the relationship. Responses Status Code Description Samples 200 Success Game ApiGameListGet Get a list of all Games. Example Usage: GET api/game/list Request GET /api/Game/list Responses Status Code Description Samples 200 Success ApiGameControlledGet Get a list of all Games this Actor has control over. Example Usage: GET api/game/controlled Request GET /api/Game/controlled Responses Status Code Description Samples 200 Success ApiGameFindByNameGet Get a list of Games that match provided. Example Usage: GET api/game/find/game1 Request GET /api/Game/find/{name} Parameters Name Type Value Notes *name string Game name Responses Status Code Description Samples 200 Success ApiGameFindbyidByIdGet Get Game that matches provided. Example Usage: GET api/game/findbyid/1 Request GET /api/Game/findbyid/{id} Parameters Name Type Value Notes *id integer Game id Responses Status Code Description Samples 200 Success ApiGamePost Create a new Game. Requires the PlayGen.SUGAR.Contracts.GameRequest.Name to be unique. Example Usage: POST api/game Request POST /api/Game Parameters Name Type Value Notes newGame PlayGen.SUGAR.Contracts.GameRequest object that contains the details of the new Game. Responses Status Code Description Samples 200 Success ApiGameUpdateByIdPut Update an existing Game. Example Usage: PUT api/game/update/1 Request PUT /api/Game/update/{id} Parameters Name Type Value Notes *id integer Id of the existing Game. game PlayGen.SUGAR.Contracts.GameRequest object that holds the details of the Game. Responses Status Code Description Samples 200 Success ApiGameByIdDelete Delete Game with the ID provided. Example Usage: DELETE api/game/1 Request DELETE /api/Game/{id} Parameters Name Type Value Notes *id integer Game ID. Responses Status Code Description Samples 200 Success GameData ApiGameDataGet Find a list of all GameData that match the , and provided. Example Usage: GET api/gamedata?actorId=1&gameId=1&key=key1&key=key2 Request GET /api/GameData[?actorId&gameId&key] Parameters Name Type Value Notes actorId integer ID of a User/Group. gameId integer ID of a Game. key array Array of Key names. Responses Status Code Description Samples 200 Success ApiGameDataPost Create a new GameData record. Example Usage: POST api/gamedata Request POST /api/GameData Parameters Name Type Value Notes newData PlayGen.SUGAR.Contracts.EvaluationDataRequest object that holds the details of the new GameData. Responses Status Code Description Samples 200 Success ApiGameDataGameactorsByIdGet Find a list of all Actors that have data saved for the game provided. Example Usage: GET api/gamedata/gameactors/1 Request GET /api/GameData/gameactors/{id} Parameters Name Type Value Notes *id integer ID of a Game. Responses Status Code Description Samples 200 Success ApiGameDataGamekeysByIdGet Find a list of all GameData keys for the provided. Example Usage: GET api/gamedata/gamekeys/1 Request GET /api/GameData/gamekeys/{id} Parameters Name Type Value Notes *id integer ID of a Game. Responses Status Code Description Samples 200 Success ApiGameDataLeaderboardTypeByActorIdByGameIdByKeyByDataTypeBySortTypeGet Find GameData that matches the , , , and provided. Example Usage: GET api/gamedata/leaderboardType/1/1/datakey/long/highest Request GET /api/GameData/leaderboardType/{actorId}/{gameId}/{key}/{dataType}/{sortType} Parameters Name Type Value Notes *actorId integer ID of a User/Group. *gameId integer ID of a Game. *key string Array of Key names. *dataType string Data type of value *sortType string Responses Status Code Description Samples 200 Success Group ApiGroupListGet Get a list of all Groups. Example Usage: GET api/group/list Request GET /api/Group/list Responses Status Code Description Samples 200 Success ApiGroupControlledGet Get a list of all Groups this Actor has control over. Example Usage: GET api/group/controlled Request GET /api/Group/controlled Responses Status Code Description Samples 200 Success ApiGroupFindByNameGet Get a list of Groups that match provided. Example Usage: GET api/group/find/group1 Request GET /api/Group/find/{name} Parameters Name Type Value Notes *name string Group name. Responses Status Code Description Samples 200 Success ApiGroupFindbyidByIdGet Get Group that matches provided. Example Usage: GET api/group/findbyid/1 Request GET /api/Group/findbyid/{id} Parameters Name Type Value Notes *id integer Group id. Responses Status Code Description Samples 200 Success ApiGroupPost Create a new Group. Requires the !:GroupRequest.Name to be unique for Groups. Example Usage: POST api/group Request POST /api/Group Parameters Name Type Value Notes actor PlayGen.SUGAR.Contracts.GroupRequest object that holds the details of the new Group. Responses Status Code Description Samples 200 Success ApiGroupUpdateByIdPut Update an existing Group. Example Usage: PUT api/group/update/1 Request PUT /api/Group/update/{id} Parameters Name Type Value Notes *id integer Id of the existing Group. group PlayGen.SUGAR.Contracts.GroupRequest object that holds the details of the Group. Responses Status Code Description Samples 200 Success ApiGroupByIdDelete Delete group with the provided. Example Usage: DELETE api/group/1 Request DELETE /api/Group/{id} Parameters Name Type Value Notes *id integer Group ID. Responses Status Code Description Samples 200 Success GroupMember ApiGroupMemberRequestsByGroupIdGet Get a list of all Users that have relationship requests for this . Example Usage: GET api/groupmember/requests/1 Request GET /api/GroupMember/requests/{groupId} Parameters Name Type Value Notes *groupId integer ID of the group. Responses Status Code Description Samples 200 Success ApiGroupMemberSentrequestsByUserIdGet Get a list of all Groups that have been sent relationship requests for this . Example Usage: GET api/groupmember/sentrequests/1 Request GET /api/GroupMember/sentrequests/{userId} Parameters Name Type Value Notes *userId integer ID of the user. Responses Status Code Description Samples 200 Success ApiGroupMemberMembersByGroupIdGet Get a list of all Users that have relationships with this . Example Usage: GET api/groupmember/members/1 Request GET /api/GroupMember/members/{groupId} Parameters Name Type Value Notes *groupId integer ID of the group. Responses Status Code Description Samples 200 Success ApiGroupMemberMembercountByGroupIdGet Get a count of users that have a relationship with this . Example Usage: GET api/groupmember/membercount/1 Request GET /api/GroupMember/membercount/{groupId} Parameters Name Type Value Notes *groupId integer ID of the group. Responses Status Code Description Samples 200 Success ApiGroupMemberUsergroupsByUserIdGet Get a list of all Groups that have relationships with this . Example Usage: GET api/groupmember/usergroups/1 Request GET /api/GroupMember/usergroups/{userId} Parameters Name Type Value Notes *userId integer ID of the User. Responses Status Code Description Samples 200 Success ApiGroupMemberPut Update an existing relationship between and . Requires the relationship to already exist between the User and Group. Example Usage: PUT api/groupmember Request PUT /api/GroupMember Parameters Name Type Value Notes relationship PlayGen.SUGAR.Contracts.RelationshipStatusUpdate object that holds the details of the relationship. Responses Status Code Description Samples 200 Success ApiGroupMemberPost Create a new relationship request between the User and Group. Requires a relationship between the User and Group to not already exist. Example Usage: POST api/groupmember Request POST /api/GroupMember Parameters Name Type Value Notes relationship PlayGen.SUGAR.Contracts.RelationshipRequest object that holds the details of the new relationship request. Responses Status Code Description Samples 200 Success ApiGroupMemberRequestPut Update an existing relationship request between and . Requires the relationship request to already exist between the User and Group. Example Usage: PUT api/groupmember/request Request PUT /api/GroupMember/request Parameters Name Type Value Notes relationship PlayGen.SUGAR.Contracts.RelationshipStatusUpdate object that holds the details of the relationship. Responses Status Code Description Samples 200 Success Leaderboards ApiLeaderboardsGlobalListGet Find a list of leaderboards that match . If global is provided instead of a gameId, get all global leaderboards, ie. leaderboards that are not associated with a specific game. Example Usage: GET api/leaderboards/game/1/list Request GET /api/Leaderboards/global/list Parameters Name Type Value Notes *gameId integer Game ID Responses Status Code Description Samples 200 Success ApiLeaderboardsGameByGameIdListGet Find a list of leaderboards that match . If global is provided instead of a gameId, get all global leaderboards, ie. leaderboards that are not associated with a specific game. Example Usage: GET api/leaderboards/game/1/list Request GET /api/Leaderboards/game/{gameId}/list Parameters Name Type Value Notes *gameId integer Game ID Responses Status Code Description Samples 200 Success ApiLeaderboardsByTokenGlobalGet Find a single leaderboard matching the token and gameId. Example Usage: GET api/leaderboards/LEADERBOARD_TOKEN/1 Request GET /api/Leaderboards/{token}/global Parameters Name Type Value Notes *token string Token *gameId integer Responses Status Code Description Samples 200 Success ApiLeaderboardsByTokenGlobalDelete Delete Leaderboard with the and provided. Example Usage: DELETE api/leaderboards/LEADERBOARD_TOKEN/1 Request DELETE /api/Leaderboards/{token}/global Parameters Name Type Value Notes *token string Token of Leaderboard *gameId integer ID of the Game the Leaderboard is for Responses Status Code Description Samples 200 Success ApiLeaderboardsByTokenByGameIdGet Find a single leaderboard matching the token and gameId. Example Usage: GET api/leaderboards/LEADERBOARD_TOKEN/1 Request GET /api/Leaderboards/{token}/{gameId} Parameters Name Type Value Notes *token string Token *gameId integer Responses Status Code Description Samples 200 Success ApiLeaderboardsByTokenByGameIdDelete Delete Leaderboard with the and provided. Example Usage: DELETE api/leaderboards/LEADERBOARD_TOKEN/1 Request DELETE /api/Leaderboards/{token}/{gameId} Parameters Name Type Value Notes *token string Token of Leaderboard *gameId integer ID of the Game the Leaderboard is for Responses Status Code Description Samples 200 Success ApiLeaderboardsCreatePost Create a new Leaderboard. Requires PlayGen.SUGAR.Contracts.LeaderboardRequest.Name and PlayGen.SUGAR.Contracts.LeaderboardRequest.Token to be unique to that PlayGen.SUGAR.Contracts.LeaderboardRequest.GameId. Example Usage: POST api/leaderboards/create Request POST /api/Leaderboards/create Parameters Name Type Value Notes newLeaderboard PlayGen.SUGAR.Contracts.LeaderboardRequest object that holds the details of the new Leaderboard. Responses Status Code Description Samples 200 Success ApiLeaderboardsStandingsPost Get the standings for a Leaderboard using a PlayGen.SUGAR.Contracts.LeaderboardStandingsRequest. Example Usage: POST api/leaderboards/standings Request POST /api/Leaderboards/standings Parameters Name Type Value Notes leaderboardDetails PlayGen.SUGAR.Contracts.LeaderboardStandingsRequest object that holds the details that are wanted from the Leaderboard. Responses Status Code Description Samples 200 Success ApiLeaderboardsUpdatePut Update an existing Leaderboard. Example Usage: PUT api/leaderboards/update Request PUT /api/Leaderboards/update Parameters Name Type Value Notes leaderboard PlayGen.SUGAR.Contracts.LeaderboardRequest object that holds the details of the Leaderboard. Responses Status Code Description Samples 200 Success Match ApiMatchCreateByGameIdGet Method for admins to creates a match for a game they are not logged into. Example Usage: GET api/match/create/1 Request GET /api/Match/create/{gameId} Parameters Name Type Value Notes *gameId integer Responses Status Code Description Samples 200 Success ApiMatchCreateGet Method to create a match for a game a user is currently logged into Example Usage: GET api/match/create Request GET /api/Match/create Responses Status Code Description Samples 200 Success ApiMatchCreateandstartGet Method to create a match for a game a user is currently logged into which is also started automatically. Example Usage: GET api/match/create Request GET /api/Match/createandstart Responses Status Code Description Samples 200 Success ApiMatchByMatchIdStartGet Start a match for the game the user is currently logged into. Example Usage: GET api/match/1/start Request GET /api/Match/{matchId}/start Parameters Name Type Value Notes *matchId integer Responses Status Code Description Samples 200 Success ApiMatchByMatchIdEndGet Ends a match for the game that the user is currently logged in for. Example Usage: GET api/match/1/end Request GET /api/Match/{matchId}/end Parameters Name Type Value Notes *matchId integer Responses Status Code Description Samples 200 Success ApiMatchByGameIdByMatchIdEndGet Method for admins to end a match for a game they are not logged into. Example Usage: GET api/match/1/end Request GET /api/Match/{gameId}/{matchId}/end Parameters Name Type Value Notes *gameId integer *matchId integer Responses Status Code Description Samples 200 Success ApiMatchByStartByEndGet Get a list of matches filtered by a time range. Example Usage: GET api/match/2016-12-20T15:40:30/2016-12-20T16:50:40 Request GET /api/Match/{start}/{end} Parameters Name Type Value Notes *start string *end string Responses Status Code Description Samples 200 Success ApiMatchGameByGameIdGet Get a list of matches for a specific game. Example Usage: GET api/match/game/1 Request GET /api/Match/game/{gameId} Parameters Name Type Value Notes *gameId integer Responses Status Code Description Samples 200 Success ApiMatchGameByGameIdByStartByEndGet Get a list of matches for a specific game, filtered by a time range. Example Usage: GET api/match/game/1/2016-12-20T15:40:30/2016-12-20T16:50:40 Request GET /api/Match/game/{gameId}/{start}/{end} Parameters Name Type Value Notes *gameId integer *start string *end string Responses Status Code Description Samples 200 Success ApiMatchCreatorByCreatorIdGet Get a list of matches that were created by a specific actor. Example Usage: GET api/match/creator/1 Request GET /api/Match/creator/{creatorId} Parameters Name Type Value Notes *creatorId integer Responses Status Code Description Samples 200 Success ApiMatchCreatorByCreatorIdByStartByEndGet Get a list of matches that were created by a specific actor, filtered by a time range. Example Usage: GET api/match/creator/1/2016-12-20T15:40:30/2016-12-20T16:50:40 Request GET /api/Match/creator/{creatorId}/{start}/{end} Parameters Name Type Value Notes *creatorId integer *start string *end string Responses Status Code Description Samples 200 Success ApiMatchGameByGameIdCreatorByCreatorIdGet Get a list of matches for a specific game created by a specific actor. Example Usage: GET api/match/game/1/creator/1 Request GET /api/Match/game/{gameId}/creator/{creatorId} Parameters Name Type Value Notes *gameId integer *creatorId integer Responses Status Code Description Samples 200 Success ApiMatchGameByGameIdCreatorByCreatorIdByStartByEndGet Get a list of matches for a specific game created by a specific user, filtered by a time range. Example Usage: GET api/match/game/1/creator/1/2016-12-20T15:40:30/2016-12-20T16:50:40 Request GET /api/Match/game/{gameId}/creator/{creatorId}/{start}/{end} Parameters Name Type Value Notes *gameId integer *creatorId integer *start string *end string Responses Status Code Description Samples 200 Success ApiMatchGet Find a list of all MatchData that match the input parameters. Example Usage: GET api/match/1/data Request GET /api/Match?matchId[&keys] Parameters Name Type Value Notes *matchId integer Id of a User/Group. keys array Array of Key names. Responses Status Code Description Samples 200 Success ApiMatchPost Create a new GameData record. Example Usage: POST api/match/1/data Request POST /api/Match Parameters Name Type Value Notes newData PlayGen.SUGAR.Contracts.EvaluationDataRequest object that holds the details of the new Match Data. Responses Status Code Description Samples 200 Success Resource ApiResourceGet Find a list of all Resources filtered by the , and provided. Example Usage: GET api/resource?actorId=1&gameId=1&key=key1&key=key2 Request GET /api/Resource[?gameId&actorId&keys] Parameters Name Type Value Notes gameId integer ID of a Game. actorId integer ID of a User/Group. keys array Optional array of Key names to filter results by. Responses Status Code Description Samples 200 Success ApiResourcePost Creates or updates a Resource record. Example Usage: POST api/resource Request POST /api/Resource Parameters Name Type Value Notes resourceRequest PlayGen.SUGAR.Contracts.ResourceAddRequest object that holds the details of the ResourceData. Responses Status Code Description Samples 200 Success ApiResourceTransferPost Transfers a quantity of a specific resource. Example Usage: Post api/resource/transfer Request POST /api/Resource/transfer Parameters Name Type Value Notes transferRequest PlayGen.SUGAR.Contracts.ResourceTransferRequest object that holds the details of the resoruce transfer. Responses Status Code Description Samples 200 Success Role ApiRoleListGet Get a list of all Roles. Example Usage: GET api/role/list Request GET /api/Role/list Responses Status Code Description Samples 200 Success ApiRoleScopeByNameGet Get a list of all Roles for the scope with this name. Example Usage: GET api/role/scope/game Request GET /api/Role/scope/{name} Parameters Name Type Value Notes *name string Responses Status Code Description Samples 200 Success ApiRoleScopedefaultByNameGet Get default Role for the scope with this name. Example Usage: GET api/role/scopedefault/game Request GET /api/Role/scopedefault/{name} Parameters Name Type Value Notes *name string Responses Status Code Description Samples 200 Success ApiRolePost Create a new Role. Requires the PlayGen.SUGAR.Contracts.RoleRequest.Name to be unique. Example Usage: POST api/role Request POST /api/Role Parameters Name Type Value Notes newRole PlayGen.SUGAR.Contracts.RoleRequest object that contains the details of the new Role. Responses Status Code Description Samples 200 Success ApiRoleByIdDelete Delete Role with the ID provided. Example Usage: DELETE api/role/1 Request DELETE /api/Role/{id} Parameters Name Type Value Notes *id integer Role ID. Responses Status Code Description Samples 200 Success RoleClaim ApiRoleClaimRoleByIdGet Get a list of all Claims for this Role. Example Usage: GET api/roleclaim/role/1 Request GET /api/RoleClaim/role/{id} Parameters Name Type Value Notes *id integer Responses Status Code Description Samples 200 Success ApiRoleClaimPost Create a new RoleClaim. Example Usage: POST api/roleclaim Request POST /api/RoleClaim Parameters Name Type Value Notes newRoleClaim PlayGen.SUGAR.Contracts.RoleClaimRequest object that contains the details of the new RoleClaim. Responses Status Code Description Samples 200 Success ApiRoleClaimRoleByRoleIdClaimByClaimIdDelete Delete RoleClaim with the ID provided. Example Usage: DELETE api/roleclaim/role/1/claim/1 Request DELETE /api/RoleClaim/role/{roleId}/claim/{claimId} Parameters Name Type Value Notes *roleId integer Role ID. *claimId integer Claim ID. Responses Status Code Description Samples 200 Success Session ApiLoginplatformPost Logs in an account based on the name and password combination. Returns a JsonWebToken used for authorization in any further calls to the API. Example Usage: POST api/loginplatform Request POST /api/loginplatform Parameters Name Type Value Notes accountRequest PlayGen.SUGAR.Contracts.AccountRequest object that contains the account details provided. Responses Status Code Description Samples 200 Success ApiByGameIdLogingamePost Logs in an account based on the name and password combination. Returns a JsonWebToken used for authorization in any further calls to the API. Example Usage: POST api/1/logingame Request POST /api/{gameId}/logingame Parameters Name Type Value Notes *gameId integer Optional Id of the game the account is logging in for. accountRequest PlayGen.SUGAR.Contracts.AccountRequest object that contains the account details provided. Responses Status Code Description Samples 200 Success ApiCreateandloginplatformPost Creates a new account and login that account. Example Usage: POST api/createandloginplatform Request POST /api/createandloginplatform Parameters Name Type Value Notes accountRequest PlayGen.SUGAR.Contracts.AccountRequest object that contains the account details provided. Responses Status Code Description Samples 200 Success ApiByGameIdCreateandlogingamePost Creates a new account and login that account. Example Usage: POST api/1/createandlogingame Request POST /api/{gameId}/createandlogingame Parameters Name Type Value Notes *gameId integer Optional Id of the game the account is logging in for. accountRequest PlayGen.SUGAR.Contracts.AccountRequest object that contains the account details provided. Responses Status Code Description Samples 200 Success ApiHeartbeatGet Heartbeat method to keep the specific session alive. Calling it within a server defined interval will notify the server that the session is still active. Request GET /api/heartbeat Responses Status Code Description Samples 200 Success ApiLogoutGet Logs out the currently logged in account, ending it's session and removing the authorization token. Request GET /api/logout Responses Status Code Description Samples 200 Success Skills ApiSkillsFindByTokenByGameIdGet Find a Skill that matches and . Example Usage: GET api/skills/find/SKILL_TOKEN/1 Request GET /api/Skills/find/{token}/{gameId} Parameters Name Type Value Notes *token string Token of Skill *gameId integer ID of the Game the Skill is for Responses Status Code Description Samples 200 Success ApiSkillsFindByTokenGlobalGet Find a Skill that matches and . Example Usage: GET api/skills/find/SKILL_TOKEN/1 Request GET /api/Skills/find/{token}/global Parameters Name Type Value Notes *token string Token of Skill *gameId integer ID of the Game the Skill is for Responses Status Code Description Samples 200 Success ApiSkillsGlobalListGet Find a list of Skills that match . If global is provided instead of a gameId, get all global skills, ie. skills that are not associated with a specific game. Example Usage: GET api/skills/game/1/list Request GET /api/Skills/global/list Parameters Name Type Value Notes *gameId integer Game ID Responses Status Code Description Samples 200 Success ApiSkillsGameByGameIdListGet Find a list of Skills that match . If global is provided instead of a gameId, get all global skills, ie. skills that are not associated with a specific game. Example Usage: GET api/skills/game/1/list Request GET /api/Skills/game/{gameId}/list Parameters Name Type Value Notes *gameId integer Game ID Responses Status Code Description Samples 200 Success ApiSkillsGameByGameIdEvaluateByActorIdGet Find the current progress for all skills for a for . Example Usage: GET api/skills/game/1/evaluate/1 Request GET /api/Skills/game/{gameId}/evaluate/{actorId} Parameters Name Type Value Notes *gameId integer ID of Game *actorId integer ID of Group/User Responses Status Code Description Samples 200 Success ApiSkillsGlobalEvaluateByActorIdGet Find the current progress for all skills for a for . Example Usage: GET api/skills/game/1/evaluate/1 Request GET /api/Skills/global/evaluate/{actorId} Parameters Name Type Value Notes *gameId integer ID of Game *actorId integer ID of Group/User Responses Status Code Description Samples 200 Success ApiSkillsByTokenByGameIdEvaluateByActorIdGet Find the current progress for a Skill for . Example Usage: GET api/skills/SKILL_TOKEN/1/evaluate/1 Request GET /api/Skills/{token}/{gameId}/evaluate/{actorId} Parameters Name Type Value Notes *token string Token of Skill *gameId integer ID of the Game the Skill is for *actorId integer ID of Group/User Responses Status Code Description Samples 200 Success ApiSkillsByTokenGlobalEvaluateByActorIdGet Find the current progress for a Skill for . Example Usage: GET api/skills/SKILL_TOKEN/1/evaluate/1 Request GET /api/Skills/{token}/global/evaluate/{actorId} Parameters Name Type Value Notes *token string Token of Skill *gameId integer ID of the Game the Skill is for *actorId integer ID of Group/User Responses Status Code Description Samples 200 Success ApiSkillsCreatePost Create a new Skill. Requires PlayGen.SUGAR.Contracts.EvaluationCreateRequest.Name to be unique to that PlayGen.SUGAR.Contracts.EvaluationCreateRequest.GameId. Example Usage: POST api/skills/create Request POST /api/Skills/create Parameters Name Type Value Notes newSkill PlayGen.SUGAR.Contracts.EvaluationCreateRequest object that holds the details of the new Skill. Responses Status Code Description Samples 200 Success ApiSkillsUpdatePut Update an existing Skill. Example Usage: PUT api/skills/update Request PUT /api/Skills/update Parameters Name Type Value Notes skill PlayGen.SUGAR.Contracts.EvaluationCreateRequest object that holds the details of the Skill. Responses Status Code Description Samples 200 Success ApiSkillsByTokenGlobalDelete Delete Skill with the and provided. Example Usage: DELETE api/skills/SKILL_TOKEN/1 Request DELETE /api/Skills/{token}/global Parameters Name Type Value Notes *token string Token of Skill *gameId integer ID of the Game the Skill is for Responses Status Code Description Samples 200 Success ApiSkillsByTokenByGameIdDelete Delete Skill with the and provided. Example Usage: DELETE api/skills/SKILL_TOKEN/1 Request DELETE /api/Skills/{token}/{gameId} Parameters Name Type Value Notes *token string Token of Skill *gameId integer ID of the Game the Skill is for Responses Status Code Description Samples 200 Success User ApiUserListGet Get a list of all Users. Example Usage: GET api/user/list Request GET /api/User/list Responses Status Code Description Samples 200 Success ApiUserFindByNameGet Get a list of Users that match provided. Example Usage: GET api/user/find/user1 Request GET /api/User/find/{name}?exactMatch Parameters Name Type Value Notes *name string User name. *exactMatch boolean Match the name exactly. Responses Status Code Description Samples 200 Success ApiUserFindByNameByExactMatchGet Get a list of Users that match provided. Example Usage: GET api/user/find/user1 Request GET /api/User/find/{name}/{exactMatch} Parameters Name Type Value Notes *name string User name. *exactMatch boolean Match the name exactly. Responses Status Code Description Samples 200 Success ApiUserFindbyidByIdGet Get User that matches provided. Example Usage: GET api/user/findbyid/1 Request GET /api/User/findbyid/{id} Parameters Name Type Value Notes *id integer User id. Responses Status Code Description Samples 200 Success ApiUserPost Create a new User. Requires the PlayGen.SUGAR.Contracts.UserRequest's Name to be unique for Users. Example Usage: POST api/user Request POST /api/User Parameters Name Type Value Notes actor PlayGen.SUGAR.Contracts.UserRequest object that holds the details of the new User. Responses Status Code Description Samples 200 Success ApiUserUpdateByIdPut Update an existing User. Example Usage: PUT api/user/update/1 Request PUT /api/User/update/{id} Parameters Name Type Value Notes *id integer Id of the existing User. user PlayGen.SUGAR.Contracts.UserRequest object that holds the details of the User. Responses Status Code Description Samples 200 Success ApiUserByIdDelete Delete user with the provided. Example Usage: DELETE api/user/1 Request DELETE /api/User/{id} Parameters Name Type Value Notes *id integer User ID. Responses Status Code Description Samples 200 Success UserFriend ApiUserFriendRequestsByUserIdGet Get a list of all Users that have relationship requests for this . Example Usage: GET api/userfriend/requests/1 Request GET /api/UserFriend/requests/{userId} Parameters Name Type Value Notes *userId integer ID of the group. Responses Status Code Description Samples 200 Success ApiUserFriendSentrequestsByUserIdGet Get a list of all Users that have been sent relationship requests for this . Example Usage: GET api/userfriend/sentrequests/1 Request GET /api/UserFriend/sentrequests/{userId} Parameters Name Type Value Notes *userId integer ID of the user. Responses Status Code Description Samples 200 Success ApiUserFriendFriendsByUserIdGet Get a list of all Users that have relationships with this . Example Usage: GET api/userfriend/friends/1 Request GET /api/UserFriend/friends/{userId} Parameters Name Type Value Notes *userId integer ID of the user. Responses Status Code Description Samples 200 Success ApiUserFriendPut Update an existing relationship between and . Requires the relationship to already exist between the two Users. Example Usage: PUT api/userfriend Request PUT /api/UserFriend Parameters Name Type Value Notes relationship PlayGen.SUGAR.Contracts.RelationshipStatusUpdate object that holds the details of the relationship. Responses Status Code Description Samples 200 Success ApiUserFriendPost Create a new relationship request between two Users. Requires a relationship between the two to not already exist. Example Usage: POST api/userfriend Request POST /api/UserFriend Parameters Name Type Value Notes relationship PlayGen.SUGAR.Contracts.RelationshipRequest object that holds the details of the new relationship request. Responses Status Code Description Samples 200 Success ApiUserFriendRequestPut Update an existing relationship request between and . Requires the relationship request to already exist between the two Users. Example Usage: PUT api/userfriend/request Request PUT /api/UserFriend/request Parameters Name Type Value Notes relationship PlayGen.SUGAR.Contracts.RelationshipStatusUpdate object that holds the details of the relationship. Responses Status Code Description Samples 200 Success Version ApiVersionGet Request GET /api/Version Responses Status Code Description Samples 200 Success"
  },
  "unity-client/api/PlayGen.SUGAR.Unity.Editor.SetEditorAutoLogin.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.Editor.SetEditorAutoLogin.html",
    "title": "Class SetEditorAutoLogin | SUGAR",
    "keywords": "Class SetEditorAutoLogin Inheritance System.Object SetEditorAutoLogin Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : PlayGen.SUGAR.Unity.Editor Assembly : PlayGen.SUGAR.Unity.Editor.dll Syntax [InitializeOnLoad] public static class SetEditorAutoLogin Methods SetAutoLogIn() Declaration [MenuItem(\"Tools/SUGAR/Set Auto Log-in Values\")] public static void SetAutoLogIn()"
  },
  "unity-client/api/PlayGen.SUGAR.Unity.Editor.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.Editor.html",
    "title": "Namespace PlayGen.SUGAR.Unity.Editor | SUGAR",
    "keywords": "Namespace PlayGen.SUGAR.Unity.Editor Classes AutoLogIn EditGameSeed EditGameSeedWindow SeedGame SeedGameWindow SetEditorAutoLogin"
  },
  "unity-client/api/PlayGen.SUGAR.Unity.SUGARUnityManager.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.SUGARUnityManager.html",
    "title": "Class SUGARUnityManager | SUGAR",
    "keywords": "Class SUGARUnityManager Class for managing Unity elements of the asset Inheritance System.Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour SUGARUnityManager Inherited Members UnityEngine.MonoBehaviour.Invoke(System.String, System.Single) UnityEngine.MonoBehaviour.InvokeRepeating(System.String, System.Single, System.Single) UnityEngine.MonoBehaviour.CancelInvoke() UnityEngine.MonoBehaviour.CancelInvoke(System.String) UnityEngine.MonoBehaviour.IsInvoking(System.String) UnityEngine.MonoBehaviour.IsInvoking() UnityEngine.MonoBehaviour.StartCoroutine(System.Collections.IEnumerator) UnityEngine.MonoBehaviour.StartCoroutine_Auto(System.Collections.IEnumerator) UnityEngine.MonoBehaviour.StartCoroutine(System.String, System.Object) UnityEngine.MonoBehaviour.StartCoroutine(System.String) UnityEngine.MonoBehaviour.StopCoroutine(System.String) UnityEngine.MonoBehaviour.StopCoroutine(System.Collections.IEnumerator) UnityEngine.MonoBehaviour.StopCoroutine(UnityEngine.Coroutine) UnityEngine.MonoBehaviour.StopAllCoroutines() UnityEngine.MonoBehaviour.print(System.Object) UnityEngine.MonoBehaviour.useGUILayout UnityEngine.MonoBehaviour.runInEditMode UnityEngine.Behaviour.enabled UnityEngine.Behaviour.isActiveAndEnabled UnityEngine.Component.GetComponent(System.Type) UnityEngine.Component.GetComponent<T>() UnityEngine.Component.GetComponent(System.String) UnityEngine.Component.GetComponentInChildren(System.Type, System.Boolean) UnityEngine.Component.GetComponentInChildren(System.Type) UnityEngine.Component.GetComponentInChildren<T>() UnityEngine.Component.GetComponentInChildren<T>(System.Boolean) UnityEngine.Component.GetComponentsInChildren(System.Type) UnityEngine.Component.GetComponentsInChildren(System.Type, System.Boolean) UnityEngine.Component.GetComponentsInChildren<T>(System.Boolean) UnityEngine.Component.GetComponentsInChildren<T>(System.Boolean, System.Collections.Generic.List<T>) UnityEngine.Component.GetComponentsInChildren<T>() UnityEngine.Component.GetComponentsInChildren<T>(System.Collections.Generic.List<T>) UnityEngine.Component.GetComponentInParent(System.Type) UnityEngine.Component.GetComponentInParent<T>() UnityEngine.Component.GetComponentsInParent(System.Type) UnityEngine.Component.GetComponentsInParent(System.Type, System.Boolean) UnityEngine.Component.GetComponentsInParent<T>(System.Boolean) UnityEngine.Component.GetComponentsInParent<T>(System.Boolean, System.Collections.Generic.List<T>) UnityEngine.Component.GetComponentsInParent<T>() UnityEngine.Component.GetComponents(System.Type) UnityEngine.Component.GetComponents(System.Type, System.Collections.Generic.List<UnityEngine.Component>) UnityEngine.Component.GetComponents<T>(System.Collections.Generic.List<T>) UnityEngine.Component.GetComponents<T>() UnityEngine.Component.CompareTag(System.String) UnityEngine.Component.SendMessageUpwards(System.String, System.Object, UnityEngine.SendMessageOptions) UnityEngine.Component.SendMessageUpwards(System.String, System.Object) UnityEngine.Component.SendMessageUpwards(System.String) UnityEngine.Component.SendMessageUpwards(System.String, UnityEngine.SendMessageOptions) UnityEngine.Component.SendMessage(System.String, System.Object, UnityEngine.SendMessageOptions) UnityEngine.Component.SendMessage(System.String, System.Object) UnityEngine.Component.SendMessage(System.String) UnityEngine.Component.SendMessage(System.String, UnityEngine.SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object, UnityEngine.SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object) UnityEngine.Component.BroadcastMessage(System.String) UnityEngine.Component.BroadcastMessage(System.String, UnityEngine.SendMessageOptions) UnityEngine.Component.transform UnityEngine.Component.gameObject UnityEngine.Component.tag UnityEngine.Component.rigidbody UnityEngine.Component.rigidbody2D UnityEngine.Component.camera UnityEngine.Component.light UnityEngine.Component.animation UnityEngine.Component.constantForce UnityEngine.Component.renderer UnityEngine.Component.audio UnityEngine.Component.guiText UnityEngine.Component.networkView UnityEngine.Component.guiElement UnityEngine.Component.guiTexture UnityEngine.Component.collider UnityEngine.Component.collider2D UnityEngine.Component.hingeJoint UnityEngine.Component.particleEmitter UnityEngine.Component.particleSystem UnityEngine.Object.Destroy(UnityEngine.Object, System.Single) UnityEngine.Object.Destroy(UnityEngine.Object) UnityEngine.Object.DestroyImmediate(UnityEngine.Object, System.Boolean) UnityEngine.Object.DestroyImmediate(UnityEngine.Object) UnityEngine.Object.FindObjectsOfType(System.Type) UnityEngine.Object.DontDestroyOnLoad(UnityEngine.Object) UnityEngine.Object.DestroyObject(UnityEngine.Object, System.Single) UnityEngine.Object.DestroyObject(UnityEngine.Object) UnityEngine.Object.FindSceneObjectsOfType(System.Type) UnityEngine.Object.FindObjectsOfTypeIncludingAssets(System.Type) UnityEngine.Object.FindObjectsOfTypeAll(System.Type) UnityEngine.Object.ToString() UnityEngine.Object.GetInstanceID() UnityEngine.Object.GetHashCode() UnityEngine.Object.Equals(System.Object) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Vector3, UnityEngine.Quaternion) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Transform) UnityEngine.Object.Instantiate(UnityEngine.Object) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Transform) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Transform, System.Boolean) UnityEngine.Object.Instantiate<T>(T) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Vector3, UnityEngine.Quaternion) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Transform) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Transform) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Transform, System.Boolean) UnityEngine.Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType(System.Type) UnityEngine.Object.name UnityEngine.Object.hideFlags System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : PlayGen.SUGAR.Unity Assembly : PlayGen.SUGAR.Unity.dll Syntax [RequireComponent(typeof (AccountUnityClient))] [RequireComponent(typeof (EvaluationUnityClient))] [RequireComponent(typeof (UserFriendUnityClient))] [RequireComponent(typeof (UserGroupUnityClient))] [RequireComponent(typeof (GroupMemberUnityClient))] [RequireComponent(typeof (LeaderboardUnityClient))] [RequireComponent(typeof (LeaderboardListUnityClient))] [RequireComponent(typeof (ResourceUnityClient))] [RequireComponent(typeof (ResponseHandler))] public class SUGARUnityManager : MonoBehaviour Fields CustomInterfaces Declaration public Dictionary<string, GameObject> CustomInterfaces Field Value Type Description System.Collections.Generic.Dictionary < System.String , UnityEngine.GameObject > Properties AnyActiveUI Is any piece of SUGAR UI currently active? Declaration public bool AnyActiveUI { get; } Property Value Type Description System.Boolean SpinnerActive Declaration public bool SpinnerActive { get; } Property Value Type Description System.Boolean Methods DisableObject(GameObject) Disable a piece of SUGAR UI. This should be used instead of SetActive to ensure UI and blocker ordering is correct. Declaration public void DisableObject(GameObject activeObject) Parameters Type Name Description UnityEngine.GameObject activeObject EnableObject(GameObject) Enable a piece of SUGAR UI. This should be used instead of SetActive to ensure UI and blocker ordering is correct. Declaration public void EnableObject(GameObject activeObject) Parameters Type Name Description UnityEngine.GameObject activeObject SetBlocker(Boolean, Boolean) Set if the blocker should be used and if it should close objects when clicked Declaration public void SetBlocker(bool use, bool block) Parameters Type Name Description System.Boolean use System.Boolean block SetSpinner(Boolean, Int32) Set the direction and speed of the loading spinner Declaration public void SetSpinner(bool clockwise, int speed) Parameters Type Name Description System.Boolean clockwise System.Int32 speed StartSpinner(String) Start the loading spinner. This method should be used instead of directly calling Loading.Start to ensure UI and blocker ordering is correct. Declaration public void StartSpinner(string text = \"\") Parameters Type Name Description System.String text StopSpinner(String, Single) Stop the loading spinner. This method should be used instead of directly calling Loading.Stop to ensure UI and blocker ordering is correct. Declaration public void StopSpinner(string text = \"\", float stopDelay = 0F) Parameters Type Name Description System.String text System.Single stopDelay"
  },
  "unity-client/api/PlayGen.SUGAR.Unity.UserFriendUnityClient.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.UserFriendUnityClient.html",
    "title": "Class UserFriendUnityClient | SUGAR",
    "keywords": "Class UserFriendUnityClient Unity client for calls related to user friends. Inheritance System.Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour BaseUnityClient < BaseUserFriendInterface > UserFriendUnityClient Inherited Members BaseUnityClient<BaseUserFriendInterface>._interface BaseUnityClient<BaseUserFriendInterface>.HasInterface BaseUnityClient<BaseUserFriendInterface>.IsActive BaseUnityClient<BaseUserFriendInterface>.Hide() UnityEngine.MonoBehaviour.Invoke(System.String, System.Single) UnityEngine.MonoBehaviour.InvokeRepeating(System.String, System.Single, System.Single) UnityEngine.MonoBehaviour.CancelInvoke() UnityEngine.MonoBehaviour.CancelInvoke(System.String) UnityEngine.MonoBehaviour.IsInvoking(System.String) UnityEngine.MonoBehaviour.IsInvoking() UnityEngine.MonoBehaviour.StartCoroutine(System.Collections.IEnumerator) UnityEngine.MonoBehaviour.StartCoroutine_Auto(System.Collections.IEnumerator) UnityEngine.MonoBehaviour.StartCoroutine(System.String, System.Object) UnityEngine.MonoBehaviour.StartCoroutine(System.String) UnityEngine.MonoBehaviour.StopCoroutine(System.String) UnityEngine.MonoBehaviour.StopCoroutine(System.Collections.IEnumerator) UnityEngine.MonoBehaviour.StopCoroutine(UnityEngine.Coroutine) UnityEngine.MonoBehaviour.StopAllCoroutines() UnityEngine.MonoBehaviour.print(System.Object) UnityEngine.MonoBehaviour.useGUILayout UnityEngine.MonoBehaviour.runInEditMode UnityEngine.Behaviour.enabled UnityEngine.Behaviour.isActiveAndEnabled UnityEngine.Component.GetComponent(System.Type) UnityEngine.Component.GetComponent<T>() UnityEngine.Component.GetComponent(System.String) UnityEngine.Component.GetComponentInChildren(System.Type, System.Boolean) UnityEngine.Component.GetComponentInChildren(System.Type) UnityEngine.Component.GetComponentInChildren<T>() UnityEngine.Component.GetComponentInChildren<T>(System.Boolean) UnityEngine.Component.GetComponentsInChildren(System.Type) UnityEngine.Component.GetComponentsInChildren(System.Type, System.Boolean) UnityEngine.Component.GetComponentsInChildren<T>(System.Boolean) UnityEngine.Component.GetComponentsInChildren<T>(System.Boolean, System.Collections.Generic.List<T>) UnityEngine.Component.GetComponentsInChildren<T>() UnityEngine.Component.GetComponentsInChildren<T>(System.Collections.Generic.List<T>) UnityEngine.Component.GetComponentInParent(System.Type) UnityEngine.Component.GetComponentInParent<T>() UnityEngine.Component.GetComponentsInParent(System.Type) UnityEngine.Component.GetComponentsInParent(System.Type, System.Boolean) UnityEngine.Component.GetComponentsInParent<T>(System.Boolean) UnityEngine.Component.GetComponentsInParent<T>(System.Boolean, System.Collections.Generic.List<T>) UnityEngine.Component.GetComponentsInParent<T>() UnityEngine.Component.GetComponents(System.Type) UnityEngine.Component.GetComponents(System.Type, System.Collections.Generic.List<UnityEngine.Component>) UnityEngine.Component.GetComponents<T>(System.Collections.Generic.List<T>) UnityEngine.Component.GetComponents<T>() UnityEngine.Component.CompareTag(System.String) UnityEngine.Component.SendMessageUpwards(System.String, System.Object, UnityEngine.SendMessageOptions) UnityEngine.Component.SendMessageUpwards(System.String, System.Object) UnityEngine.Component.SendMessageUpwards(System.String) UnityEngine.Component.SendMessageUpwards(System.String, UnityEngine.SendMessageOptions) UnityEngine.Component.SendMessage(System.String, System.Object, UnityEngine.SendMessageOptions) UnityEngine.Component.SendMessage(System.String, System.Object) UnityEngine.Component.SendMessage(System.String) UnityEngine.Component.SendMessage(System.String, UnityEngine.SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object, UnityEngine.SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object) UnityEngine.Component.BroadcastMessage(System.String) UnityEngine.Component.BroadcastMessage(System.String, UnityEngine.SendMessageOptions) UnityEngine.Component.transform UnityEngine.Component.gameObject UnityEngine.Component.tag UnityEngine.Component.rigidbody UnityEngine.Component.rigidbody2D UnityEngine.Component.camera UnityEngine.Component.light UnityEngine.Component.animation UnityEngine.Component.constantForce UnityEngine.Component.renderer UnityEngine.Component.audio UnityEngine.Component.guiText UnityEngine.Component.networkView UnityEngine.Component.guiElement UnityEngine.Component.guiTexture UnityEngine.Component.collider UnityEngine.Component.collider2D UnityEngine.Component.hingeJoint UnityEngine.Component.particleEmitter UnityEngine.Component.particleSystem UnityEngine.Object.Destroy(UnityEngine.Object, System.Single) UnityEngine.Object.Destroy(UnityEngine.Object) UnityEngine.Object.DestroyImmediate(UnityEngine.Object, System.Boolean) UnityEngine.Object.DestroyImmediate(UnityEngine.Object) UnityEngine.Object.FindObjectsOfType(System.Type) UnityEngine.Object.DontDestroyOnLoad(UnityEngine.Object) UnityEngine.Object.DestroyObject(UnityEngine.Object, System.Single) UnityEngine.Object.DestroyObject(UnityEngine.Object) UnityEngine.Object.FindSceneObjectsOfType(System.Type) UnityEngine.Object.FindObjectsOfTypeIncludingAssets(System.Type) UnityEngine.Object.FindObjectsOfTypeAll(System.Type) UnityEngine.Object.ToString() UnityEngine.Object.GetInstanceID() UnityEngine.Object.GetHashCode() UnityEngine.Object.Equals(System.Object) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Vector3, UnityEngine.Quaternion) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Transform) UnityEngine.Object.Instantiate(UnityEngine.Object) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Transform) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Transform, System.Boolean) UnityEngine.Object.Instantiate<T>(T) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Vector3, UnityEngine.Quaternion) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Transform) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Transform) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Transform, System.Boolean) UnityEngine.Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType(System.Type) UnityEngine.Object.name UnityEngine.Object.hideFlags System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : PlayGen.SUGAR.Unity Assembly : PlayGen.SUGAR.Unity.dll Syntax [DisallowMultipleComponent] public class UserFriendUnityClient : BaseUnityClient<BaseUserFriendInterface> Properties Friends Friends list for currently signed in user. Declaration public List<ActorResponseAllowableActions> Friends { get; } Property Value Type Description System.Collections.Generic.List < ActorResponseAllowableActions > PendingReceived Pending received friend requests for currently signed in user. Declaration public List<ActorResponseAllowableActions> PendingReceived { get; } Property Value Type Description System.Collections.Generic.List < ActorResponseAllowableActions > PendingSent Pending sent friend requests for currently signed in user. Declaration public List<ActorResponseAllowableActions> PendingSent { get; } Property Value Type Description System.Collections.Generic.List < ActorResponseAllowableActions > SearchResults Last set of search results. Declaration public List<ActorResponseAllowableActions> SearchResults { get; } Property Value Type Description System.Collections.Generic.List < ActorResponseAllowableActions > Methods AddFriend(Int32, Boolean) Send friend request to user with id provided. If reload is true, UI is also redrawn. Declaration public void AddFriend(int id, bool reload = true) Parameters Type Name Description System.Int32 id System.Boolean reload Display() Updates lists and displays UI object if provided. Declaration public void Display() GetFriendsList(Action<Boolean>) Get friends list for the currently signed in user. Declaration public void GetFriendsList(Action<bool> success) Parameters Type Name Description System.Action < System.Boolean > success ManageFriendRequest(Int32, Boolean, Boolean, Boolean) Resolve friend request to user with id provided. If reload is true, UI is also redrawn. Reverse should be true if cancelling sent request. Accept and reverse cannot both be true. Declaration public void ManageFriendRequest(int id, bool accept, bool reverse = false, bool reload = true) Parameters Type Name Description System.Int32 id System.Boolean accept System.Boolean reverse System.Boolean reload RemoveFriend(Int32, Boolean) Remove user with id provided from friends list. If reload is true, UI is also redrawn. Declaration public void RemoveFriend(int id, bool reload = true) Parameters Type Name Description System.Int32 id System.Boolean reload"
  },
  "unity-client/api/PlayGen.SUGAR.Unity.UserGroupUnityClient.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.UserGroupUnityClient.html",
    "title": "Class UserGroupUnityClient | SUGAR",
    "keywords": "Class UserGroupUnityClient Unity client for calls related to group lists. Inheritance System.Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour BaseUnityClient < BaseUserGroupInterface > UserGroupUnityClient Inherited Members BaseUnityClient<BaseUserGroupInterface>._interface BaseUnityClient<BaseUserGroupInterface>.HasInterface BaseUnityClient<BaseUserGroupInterface>.IsActive BaseUnityClient<BaseUserGroupInterface>.Hide() UnityEngine.MonoBehaviour.Invoke(System.String, System.Single) UnityEngine.MonoBehaviour.InvokeRepeating(System.String, System.Single, System.Single) UnityEngine.MonoBehaviour.CancelInvoke() UnityEngine.MonoBehaviour.CancelInvoke(System.String) UnityEngine.MonoBehaviour.IsInvoking(System.String) UnityEngine.MonoBehaviour.IsInvoking() UnityEngine.MonoBehaviour.StartCoroutine(System.Collections.IEnumerator) UnityEngine.MonoBehaviour.StartCoroutine_Auto(System.Collections.IEnumerator) UnityEngine.MonoBehaviour.StartCoroutine(System.String, System.Object) UnityEngine.MonoBehaviour.StartCoroutine(System.String) UnityEngine.MonoBehaviour.StopCoroutine(System.String) UnityEngine.MonoBehaviour.StopCoroutine(System.Collections.IEnumerator) UnityEngine.MonoBehaviour.StopCoroutine(UnityEngine.Coroutine) UnityEngine.MonoBehaviour.StopAllCoroutines() UnityEngine.MonoBehaviour.print(System.Object) UnityEngine.MonoBehaviour.useGUILayout UnityEngine.MonoBehaviour.runInEditMode UnityEngine.Behaviour.enabled UnityEngine.Behaviour.isActiveAndEnabled UnityEngine.Component.GetComponent(System.Type) UnityEngine.Component.GetComponent<T>() UnityEngine.Component.GetComponent(System.String) UnityEngine.Component.GetComponentInChildren(System.Type, System.Boolean) UnityEngine.Component.GetComponentInChildren(System.Type) UnityEngine.Component.GetComponentInChildren<T>() UnityEngine.Component.GetComponentInChildren<T>(System.Boolean) UnityEngine.Component.GetComponentsInChildren(System.Type) UnityEngine.Component.GetComponentsInChildren(System.Type, System.Boolean) UnityEngine.Component.GetComponentsInChildren<T>(System.Boolean) UnityEngine.Component.GetComponentsInChildren<T>(System.Boolean, System.Collections.Generic.List<T>) UnityEngine.Component.GetComponentsInChildren<T>() UnityEngine.Component.GetComponentsInChildren<T>(System.Collections.Generic.List<T>) UnityEngine.Component.GetComponentInParent(System.Type) UnityEngine.Component.GetComponentInParent<T>() UnityEngine.Component.GetComponentsInParent(System.Type) UnityEngine.Component.GetComponentsInParent(System.Type, System.Boolean) UnityEngine.Component.GetComponentsInParent<T>(System.Boolean) UnityEngine.Component.GetComponentsInParent<T>(System.Boolean, System.Collections.Generic.List<T>) UnityEngine.Component.GetComponentsInParent<T>() UnityEngine.Component.GetComponents(System.Type) UnityEngine.Component.GetComponents(System.Type, System.Collections.Generic.List<UnityEngine.Component>) UnityEngine.Component.GetComponents<T>(System.Collections.Generic.List<T>) UnityEngine.Component.GetComponents<T>() UnityEngine.Component.CompareTag(System.String) UnityEngine.Component.SendMessageUpwards(System.String, System.Object, UnityEngine.SendMessageOptions) UnityEngine.Component.SendMessageUpwards(System.String, System.Object) UnityEngine.Component.SendMessageUpwards(System.String) UnityEngine.Component.SendMessageUpwards(System.String, UnityEngine.SendMessageOptions) UnityEngine.Component.SendMessage(System.String, System.Object, UnityEngine.SendMessageOptions) UnityEngine.Component.SendMessage(System.String, System.Object) UnityEngine.Component.SendMessage(System.String) UnityEngine.Component.SendMessage(System.String, UnityEngine.SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object, UnityEngine.SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object) UnityEngine.Component.BroadcastMessage(System.String) UnityEngine.Component.BroadcastMessage(System.String, UnityEngine.SendMessageOptions) UnityEngine.Component.transform UnityEngine.Component.gameObject UnityEngine.Component.tag UnityEngine.Component.rigidbody UnityEngine.Component.rigidbody2D UnityEngine.Component.camera UnityEngine.Component.light UnityEngine.Component.animation UnityEngine.Component.constantForce UnityEngine.Component.renderer UnityEngine.Component.audio UnityEngine.Component.guiText UnityEngine.Component.networkView UnityEngine.Component.guiElement UnityEngine.Component.guiTexture UnityEngine.Component.collider UnityEngine.Component.collider2D UnityEngine.Component.hingeJoint UnityEngine.Component.particleEmitter UnityEngine.Component.particleSystem UnityEngine.Object.Destroy(UnityEngine.Object, System.Single) UnityEngine.Object.Destroy(UnityEngine.Object) UnityEngine.Object.DestroyImmediate(UnityEngine.Object, System.Boolean) UnityEngine.Object.DestroyImmediate(UnityEngine.Object) UnityEngine.Object.FindObjectsOfType(System.Type) UnityEngine.Object.DontDestroyOnLoad(UnityEngine.Object) UnityEngine.Object.DestroyObject(UnityEngine.Object, System.Single) UnityEngine.Object.DestroyObject(UnityEngine.Object) UnityEngine.Object.FindSceneObjectsOfType(System.Type) UnityEngine.Object.FindObjectsOfTypeIncludingAssets(System.Type) UnityEngine.Object.FindObjectsOfTypeAll(System.Type) UnityEngine.Object.ToString() UnityEngine.Object.GetInstanceID() UnityEngine.Object.GetHashCode() UnityEngine.Object.Equals(System.Object) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Vector3, UnityEngine.Quaternion) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Transform) UnityEngine.Object.Instantiate(UnityEngine.Object) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Transform) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Transform, System.Boolean) UnityEngine.Object.Instantiate<T>(T) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Vector3, UnityEngine.Quaternion) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Transform) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Transform) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Transform, System.Boolean) UnityEngine.Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType(System.Type) UnityEngine.Object.name UnityEngine.Object.hideFlags System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : PlayGen.SUGAR.Unity Assembly : PlayGen.SUGAR.Unity.dll Syntax [DisallowMultipleComponent] public class UserGroupUnityClient : BaseUnityClient<BaseUserGroupInterface> Properties Groups List of groups that the currently signed in user is a member of. Declaration public List<ActorResponseAllowableActions> Groups { get; } Property Value Type Description System.Collections.Generic.List < ActorResponseAllowableActions > PendingSent List of groups that the currently signed in user has applied to join. Declaration public List<ActorResponseAllowableActions> PendingSent { get; } Property Value Type Description System.Collections.Generic.List < ActorResponseAllowableActions > SearchResults List of groups that matched the last search string. Declaration public List<ActorResponseAllowableActions> SearchResults { get; } Property Value Type Description System.Collections.Generic.List < ActorResponseAllowableActions > Methods AddGroup(Int32, Boolean) Send group membership request to group with id provided. If reload is true, UI is also redrawn. Declaration public void AddGroup(int id, bool reload = true) Parameters Type Name Description System.Int32 id System.Boolean reload Display() Gathers updated versions of each list and displays UI object if provided. Declaration public void Display() GetGroupsList(Action<Boolean>) Get group list for the currently signed in user. Declaration public void GetGroupsList(Action<bool> success) Parameters Type Name Description System.Action < System.Boolean > success ManageGroupRequest(Int32, Boolean) Cancel sent membership request to group with id provided. If reload is true, UI is also redrawn. Declaration public void ManageGroupRequest(int id, bool reload = true) Parameters Type Name Description System.Int32 id System.Boolean reload RemoveGroup(Int32, Boolean) Leave group with id provided. If reload is true, UI is also redrawn. Declaration public void RemoveGroup(int id, bool reload = true) Parameters Type Name Description System.Int32 id System.Boolean reload"
  },
  "unity-client/api/PlayGen.SUGAR.Unity.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.html",
    "title": "Namespace PlayGen.SUGAR.Unity | SUGAR",
    "keywords": "Namespace PlayGen.SUGAR.Unity Classes AccountUnityClient Unity client for calls related to accounts ActorResponseAllowableActions ActorResponse with additional information on if the current user can add and remove them. BaseAccountInterface Base abstract class for controlling the UI object related to accounts BaseEvaluationListInterface Base abstract class for controlling the UI object related to evaluation lists. BaseEvaluationPopupInterface Base abstract class for controlling the UI object related to evaluation notifications. BaseGroupMemberInterface Base abstract class for controlling the UI object related to group member lists. BaseInterface Base abstract class for controlling UI objects BaseLeaderboardInterface Base abstract class for controlling the UI object related to leaderboards BaseLeaderboardListInterface Base abstract class for controlling the UI object related to getting all leaderboards for a game BaseUnityClient<T> Base class for UnityClient classes BaseUserFriendInterface Base abstract class for controlling the UI object related to friends lists BaseUserGroupInterface Base abstract class for controlling the UI object related to user groups. CommandLineOptions CommandLineUtility Config CustomInterface EvaluationUnityClient Unity client for calls related to evaluations. GameDataUnityClient Unity client for calls related to gamedata. GroupMemberUnityClient Unity client for calls related to group member lists. LeaderboardListUnityClient Unity client for calls related to leaderboards for an application. LeaderboardUnityClient Unity client for calls related to leaderboard standings. ResourceUnityClient Unity client for calls related to resources. ResponseHandler SUGARManager Access point for SUGAR related classes. SUGARUnityManager Class for managing Unity elements of the asset UserFriendUnityClient Unity client for calls related to user friends. UserGroupUnityClient Unity client for calls related to group lists."
  },
  "unity-client/development/documentation.html": {
    "href": "unity-client/development/documentation.html",
    "title": "Documentation | SUGAR",
    "keywords": "Documentation SUGAR's documentation is generated using DocFX using tripple slash code comments and Swagger to generate the REST API. Building There are various build scripts in docs/tools to build, copy and serve the docs. Requirements DocFX \"docfx\" as a command needs to be availabe via the command console for the scripts to work. PDF documentation requires wkhtmltopdf . PDF The PDF was generated by following this guide ."
  },
  "unity-client/development/index.html": {
    "href": "unity-client/development/index.html",
    "title": "Development | SUGAR",
    "keywords": "Development This section covers various aspects of the SUGAR Unity Client development."
  },
  "unity-client/api/index.html": {
    "href": "unity-client/api/index.html",
    "title": "| SUGAR",
    "keywords": "C# API Documentation"
  },
  "unity-client/pdf/index.html": {
    "href": "unity-client/pdf/index.html",
    "title": "SUGAR-Unity Client | SUGAR",
    "keywords": "SUGAR-Unity Client Welcome to the documentation for the Unity Client of the SUGAR Engine. Online Documentation You can fine the online version of the SUGAR Unity Client here SUGAR Engine If you haven't already read the documentation for the SUGAR Engine, it is highly recommended that you do that first as that is where the core concepts are explained along with a demo and other useful information. SUGAR Engine Documentation"
  },
  "unity-client/tutorials/build-instructions.html": {
    "href": "unity-client/tutorials/build-instructions.html",
    "title": "Build Instructions | SUGAR",
    "keywords": "Build Instructions Open and build the PlayGen.SUGAR.Unity project. Open the Unity project. Click Menu/Tools/Build SUGAR Package. Copy the built package from Build/SUGAR.unitypackage. Import it into your project and let the magic begin."
  },
  "unity-client/tutorials/client-prefabs.html": {
    "href": "unity-client/tutorials/client-prefabs.html",
    "title": "Unity Client Prefabs | SUGAR",
    "keywords": "Unity Client Prefabs There are a number of prefabs included within the Unity package. Example usage can be viewed in the demo scene which can be found at: Assets/SUGAR/Example/Scene.unity After setting up a game using the quick start guide , all prefabs can be seen working by running the demo scene and entering the shortcuts to display each. Each of the prefabs can be activated using the SUGAR prefab provided (which must be added to the scene to use SUGAR). The SUGAR prefab has its own canvas which is rendered above the main Canvas which contains each of the panel prefabs. Each panel can be activated using their display functions, examples of which can be seen in: Assets/SUGAR/Example/Scripts/TestImplemtation.cs Panel Prefabs Panel Prefabs provided AccountPanel EvaluationPanel EvaluationPopup FriendsListPanel UserGroupsPanel GroupMembersPanel LeaderboardListPanel LeaderboardPanel There are 2 variations provided for each of the panels, one for landscape and one for portrait. To switch the orientation used, change the Interface references in the SUGAR prefab to the required orientation prefabs. Panel Overview AccountPanel Handles logging in to SUGAR with username and password entered, does not display if auto login is enabled and the login details are correct. EvaluationPanel Demo Shortcut: Hold T & Press K. Displays the achievements/skills for the current game and which ones have been completed. EvaluationPopup Demo Shortcut: Hold T & Press A. Displays a pop-up to notify users that an achievement or skill has been completed. FriendsListPanel Demo Shortcut: Hold T & Press F. Displays the users that the logged in account is friends with, allowing them to make new friendships, remove existing ones and review pending requests. UserGroupsPanel Demo Shortcut: Hold T & Press G. Displays the groups that the logged in account is a member of, allowing them to leave current groups, join new groups and see pending group requests. GroupMembersPanel Demo Shortcut: Hold T & Press G -> select a group. Displays the members of a specific group, allowing accounts with permissions to manage other accounts within that group. LeaderboardListPanel Demo Shortcut: Hold T & Press L. Displays a list of leaderboards for the current game, allowing users to select one and see the standings. LeaderboardPanel Demo Shortcut: Hold T & Press L -> select a leaderboard. Displays the current standings for the selected leaderboard, allows users to filter results by: Top (the best scores for the current leaderboard), Nearby (the scores near to the current users score), Friends (the current users' friends scores), Group Members (the scores for all members of your primary group), Alliances (the scores of all groups in an alliance with your primary group)."
  },
  "unity-client/tutorials/index.html": {
    "href": "unity-client/tutorials/index.html",
    "title": "Tutorials | SUGAR",
    "keywords": "Tutorials This section provides tutorials for the various tasks a developer may want to explore around using and customizing the SUGAR Unity Client."
  },
  "unity-client/api/PlayGen.SUGAR.Unity.BaseAccountInterface.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.BaseAccountInterface.html",
    "title": "Class BaseAccountInterface | SUGAR",
    "keywords": "Class BaseAccountInterface Base abstract class for controlling the UI object related to accounts Inheritance System.Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour BaseAccountInterface Inherited Members UnityEngine.MonoBehaviour.Invoke(System.String, System.Single) UnityEngine.MonoBehaviour.InvokeRepeating(System.String, System.Single, System.Single) UnityEngine.MonoBehaviour.CancelInvoke() UnityEngine.MonoBehaviour.CancelInvoke(System.String) UnityEngine.MonoBehaviour.IsInvoking(System.String) UnityEngine.MonoBehaviour.IsInvoking() UnityEngine.MonoBehaviour.StartCoroutine(System.Collections.IEnumerator) UnityEngine.MonoBehaviour.StartCoroutine_Auto(System.Collections.IEnumerator) UnityEngine.MonoBehaviour.StartCoroutine(System.String, System.Object) UnityEngine.MonoBehaviour.StartCoroutine(System.String) UnityEngine.MonoBehaviour.StopCoroutine(System.String) UnityEngine.MonoBehaviour.StopCoroutine(System.Collections.IEnumerator) UnityEngine.MonoBehaviour.StopCoroutine(UnityEngine.Coroutine) UnityEngine.MonoBehaviour.StopAllCoroutines() UnityEngine.MonoBehaviour.print(System.Object) UnityEngine.MonoBehaviour.useGUILayout UnityEngine.MonoBehaviour.runInEditMode UnityEngine.Behaviour.enabled UnityEngine.Behaviour.isActiveAndEnabled UnityEngine.Component.GetComponent(System.Type) UnityEngine.Component.GetComponent<T>() UnityEngine.Component.GetComponent(System.String) UnityEngine.Component.GetComponentInChildren(System.Type, System.Boolean) UnityEngine.Component.GetComponentInChildren(System.Type) UnityEngine.Component.GetComponentInChildren<T>() UnityEngine.Component.GetComponentInChildren<T>(System.Boolean) UnityEngine.Component.GetComponentsInChildren(System.Type) UnityEngine.Component.GetComponentsInChildren(System.Type, System.Boolean) UnityEngine.Component.GetComponentsInChildren<T>(System.Boolean) UnityEngine.Component.GetComponentsInChildren<T>(System.Boolean, System.Collections.Generic.List<T>) UnityEngine.Component.GetComponentsInChildren<T>() UnityEngine.Component.GetComponentsInChildren<T>(System.Collections.Generic.List<T>) UnityEngine.Component.GetComponentInParent(System.Type) UnityEngine.Component.GetComponentInParent<T>() UnityEngine.Component.GetComponentsInParent(System.Type) UnityEngine.Component.GetComponentsInParent(System.Type, System.Boolean) UnityEngine.Component.GetComponentsInParent<T>(System.Boolean) UnityEngine.Component.GetComponentsInParent<T>(System.Boolean, System.Collections.Generic.List<T>) UnityEngine.Component.GetComponentsInParent<T>() UnityEngine.Component.GetComponents(System.Type) UnityEngine.Component.GetComponents(System.Type, System.Collections.Generic.List<UnityEngine.Component>) UnityEngine.Component.GetComponents<T>(System.Collections.Generic.List<T>) UnityEngine.Component.GetComponents<T>() UnityEngine.Component.CompareTag(System.String) UnityEngine.Component.SendMessageUpwards(System.String, System.Object, UnityEngine.SendMessageOptions) UnityEngine.Component.SendMessageUpwards(System.String, System.Object) UnityEngine.Component.SendMessageUpwards(System.String) UnityEngine.Component.SendMessageUpwards(System.String, UnityEngine.SendMessageOptions) UnityEngine.Component.SendMessage(System.String, System.Object, UnityEngine.SendMessageOptions) UnityEngine.Component.SendMessage(System.String, System.Object) UnityEngine.Component.SendMessage(System.String) UnityEngine.Component.SendMessage(System.String, UnityEngine.SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object, UnityEngine.SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object) UnityEngine.Component.BroadcastMessage(System.String) UnityEngine.Component.BroadcastMessage(System.String, UnityEngine.SendMessageOptions) UnityEngine.Component.transform UnityEngine.Component.gameObject UnityEngine.Component.tag UnityEngine.Component.rigidbody UnityEngine.Component.rigidbody2D UnityEngine.Component.camera UnityEngine.Component.light UnityEngine.Component.animation UnityEngine.Component.constantForce UnityEngine.Component.renderer UnityEngine.Component.audio UnityEngine.Component.guiText UnityEngine.Component.networkView UnityEngine.Component.guiElement UnityEngine.Component.guiTexture UnityEngine.Component.collider UnityEngine.Component.collider2D UnityEngine.Component.hingeJoint UnityEngine.Component.particleEmitter UnityEngine.Component.particleSystem UnityEngine.Object.Destroy(UnityEngine.Object, System.Single) UnityEngine.Object.Destroy(UnityEngine.Object) UnityEngine.Object.DestroyImmediate(UnityEngine.Object, System.Boolean) UnityEngine.Object.DestroyImmediate(UnityEngine.Object) UnityEngine.Object.FindObjectsOfType(System.Type) UnityEngine.Object.DontDestroyOnLoad(UnityEngine.Object) UnityEngine.Object.DestroyObject(UnityEngine.Object, System.Single) UnityEngine.Object.DestroyObject(UnityEngine.Object) UnityEngine.Object.FindSceneObjectsOfType(System.Type) UnityEngine.Object.FindObjectsOfTypeIncludingAssets(System.Type) UnityEngine.Object.FindObjectsOfTypeAll(System.Type) UnityEngine.Object.ToString() UnityEngine.Object.GetInstanceID() UnityEngine.Object.GetHashCode() UnityEngine.Object.Equals(System.Object) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Vector3, UnityEngine.Quaternion) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Transform) UnityEngine.Object.Instantiate(UnityEngine.Object) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Transform) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Transform, System.Boolean) UnityEngine.Object.Instantiate<T>(T) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Vector3, UnityEngine.Quaternion) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Transform) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Transform) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Transform, System.Boolean) UnityEngine.Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType(System.Type) UnityEngine.Object.name UnityEngine.Object.hideFlags System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : PlayGen.SUGAR.Unity Assembly : PlayGen.SUGAR.Unity.dll Syntax public abstract class BaseAccountInterface : MonoBehaviour Fields _closeButton Button used to disable this object. Can be left null. Declaration [Tooltip(\"Button used to disable this object. Can be left null.\")] [SerializeField] protected Button _closeButton Field Value Type Description UnityEngine.UI.Button _errorText Text object which displays errors if/when they occur. Can be left null. Declaration [Tooltip(\"Text object which displays errors if/when they occur. Can be left null.\")] [SerializeField] protected Text _errorText Field Value Type Description UnityEngine.UI.Text _loginButton Button used to trigger attempting signing in. Can be left null. Declaration [Tooltip(\"Button used to trigger signing in. Can be left null.\")] [SerializeField] protected Button _loginButton Field Value Type Description UnityEngine.UI.Button _name Input field used for providing usernames. Required. Declaration [Tooltip(\"Input field used for providing usernames. Required.\")] [SerializeField] protected InputField _name Field Value Type Description UnityEngine.UI.InputField _password Input field used for providing passwords. Required. Declaration [Tooltip(\"Input field used for providing passwords. Required.\")] [SerializeField] protected InputField _password Field Value Type Description UnityEngine.UI.InputField _registerButton Button used to trigger attempting registration. Can be left null. Declaration [Tooltip(\"Button used to trigger registration. Can be left null.\")] [SerializeField] protected Button _registerButton Field Value Type Description UnityEngine.UI.Button Methods Awake() Base Awake method adds onClick listeners for the login, register and close buttons. Declaration protected virtual void Awake()"
  },
  "unity-client/api/PlayGen.SUGAR.Unity.BaseEvaluationListInterface.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.BaseEvaluationListInterface.html",
    "title": "Class BaseEvaluationListInterface | SUGAR",
    "keywords": "Class BaseEvaluationListInterface Base abstract class for controlling the UI object related to evaluation lists. Inheritance System.Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour BaseInterface BaseEvaluationListInterface Inherited Members BaseInterface._errorText BaseInterface._closeButton BaseInterface._signinButton BaseInterface.Awake() BaseInterface.PreDisplay() BaseInterface.Show(Boolean) BaseInterface.Draw() BaseInterface.OnSignIn() UnityEngine.MonoBehaviour.Invoke(System.String, System.Single) UnityEngine.MonoBehaviour.InvokeRepeating(System.String, System.Single, System.Single) UnityEngine.MonoBehaviour.CancelInvoke() UnityEngine.MonoBehaviour.CancelInvoke(System.String) UnityEngine.MonoBehaviour.IsInvoking(System.String) UnityEngine.MonoBehaviour.IsInvoking() UnityEngine.MonoBehaviour.StartCoroutine(System.Collections.IEnumerator) UnityEngine.MonoBehaviour.StartCoroutine_Auto(System.Collections.IEnumerator) UnityEngine.MonoBehaviour.StartCoroutine(System.String, System.Object) UnityEngine.MonoBehaviour.StartCoroutine(System.String) UnityEngine.MonoBehaviour.StopCoroutine(System.String) UnityEngine.MonoBehaviour.StopCoroutine(System.Collections.IEnumerator) UnityEngine.MonoBehaviour.StopCoroutine(UnityEngine.Coroutine) UnityEngine.MonoBehaviour.StopAllCoroutines() UnityEngine.MonoBehaviour.print(System.Object) UnityEngine.MonoBehaviour.useGUILayout UnityEngine.MonoBehaviour.runInEditMode UnityEngine.Behaviour.enabled UnityEngine.Behaviour.isActiveAndEnabled UnityEngine.Component.GetComponent(System.Type) UnityEngine.Component.GetComponent<T>() UnityEngine.Component.GetComponent(System.String) UnityEngine.Component.GetComponentInChildren(System.Type, System.Boolean) UnityEngine.Component.GetComponentInChildren(System.Type) UnityEngine.Component.GetComponentInChildren<T>() UnityEngine.Component.GetComponentInChildren<T>(System.Boolean) UnityEngine.Component.GetComponentsInChildren(System.Type) UnityEngine.Component.GetComponentsInChildren(System.Type, System.Boolean) UnityEngine.Component.GetComponentsInChildren<T>(System.Boolean) UnityEngine.Component.GetComponentsInChildren<T>(System.Boolean, System.Collections.Generic.List<T>) UnityEngine.Component.GetComponentsInChildren<T>() UnityEngine.Component.GetComponentsInChildren<T>(System.Collections.Generic.List<T>) UnityEngine.Component.GetComponentInParent(System.Type) UnityEngine.Component.GetComponentInParent<T>() UnityEngine.Component.GetComponentsInParent(System.Type) UnityEngine.Component.GetComponentsInParent(System.Type, System.Boolean) UnityEngine.Component.GetComponentsInParent<T>(System.Boolean) UnityEngine.Component.GetComponentsInParent<T>(System.Boolean, System.Collections.Generic.List<T>) UnityEngine.Component.GetComponentsInParent<T>() UnityEngine.Component.GetComponents(System.Type) UnityEngine.Component.GetComponents(System.Type, System.Collections.Generic.List<UnityEngine.Component>) UnityEngine.Component.GetComponents<T>(System.Collections.Generic.List<T>) UnityEngine.Component.GetComponents<T>() UnityEngine.Component.CompareTag(System.String) UnityEngine.Component.SendMessageUpwards(System.String, System.Object, UnityEngine.SendMessageOptions) UnityEngine.Component.SendMessageUpwards(System.String, System.Object) UnityEngine.Component.SendMessageUpwards(System.String) UnityEngine.Component.SendMessageUpwards(System.String, UnityEngine.SendMessageOptions) UnityEngine.Component.SendMessage(System.String, System.Object, UnityEngine.SendMessageOptions) UnityEngine.Component.SendMessage(System.String, System.Object) UnityEngine.Component.SendMessage(System.String) UnityEngine.Component.SendMessage(System.String, UnityEngine.SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object, UnityEngine.SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object) UnityEngine.Component.BroadcastMessage(System.String) UnityEngine.Component.BroadcastMessage(System.String, UnityEngine.SendMessageOptions) UnityEngine.Component.transform UnityEngine.Component.gameObject UnityEngine.Component.tag UnityEngine.Component.rigidbody UnityEngine.Component.rigidbody2D UnityEngine.Component.camera UnityEngine.Component.light UnityEngine.Component.animation UnityEngine.Component.constantForce UnityEngine.Component.renderer UnityEngine.Component.audio UnityEngine.Component.guiText UnityEngine.Component.networkView UnityEngine.Component.guiElement UnityEngine.Component.guiTexture UnityEngine.Component.collider UnityEngine.Component.collider2D UnityEngine.Component.hingeJoint UnityEngine.Component.particleEmitter UnityEngine.Component.particleSystem UnityEngine.Object.Destroy(UnityEngine.Object, System.Single) UnityEngine.Object.Destroy(UnityEngine.Object) UnityEngine.Object.DestroyImmediate(UnityEngine.Object, System.Boolean) UnityEngine.Object.DestroyImmediate(UnityEngine.Object) UnityEngine.Object.FindObjectsOfType(System.Type) UnityEngine.Object.DontDestroyOnLoad(UnityEngine.Object) UnityEngine.Object.DestroyObject(UnityEngine.Object, System.Single) UnityEngine.Object.DestroyObject(UnityEngine.Object) UnityEngine.Object.FindSceneObjectsOfType(System.Type) UnityEngine.Object.FindObjectsOfTypeIncludingAssets(System.Type) UnityEngine.Object.FindObjectsOfTypeAll(System.Type) UnityEngine.Object.ToString() UnityEngine.Object.GetInstanceID() UnityEngine.Object.GetHashCode() UnityEngine.Object.Equals(System.Object) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Vector3, UnityEngine.Quaternion) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Transform) UnityEngine.Object.Instantiate(UnityEngine.Object) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Transform) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Transform, System.Boolean) UnityEngine.Object.Instantiate<T>(T) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Vector3, UnityEngine.Quaternion) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Transform) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Transform) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Transform, System.Boolean) UnityEngine.Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType(System.Type) UnityEngine.Object.name UnityEngine.Object.hideFlags System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : PlayGen.SUGAR.Unity Assembly : PlayGen.SUGAR.Unity.dll Syntax public abstract class BaseEvaluationListInterface : BaseInterface Methods ErrorDraw(Boolean) Used to set error text in case of no user being signed in, loading issues or if no results are available. Declaration protected override void ErrorDraw(bool loadingSuccess) Parameters Type Name Description System.Boolean loadingSuccess Overrides BaseInterface.ErrorDraw(Boolean) HideInterfaces() Hides Account, GameLeaderboard, Leaderboard, UserFriend, GroupMember and UserGroup UI objects. Declaration protected override void HideInterfaces() Overrides BaseInterface.HideInterfaces() LoadErrorText() Get error string from Localization with key \"EVALUATION_LOAD_ERROR\" if there were issues loading the evaluation list. Declaration protected override string LoadErrorText() Returns Type Description System.String Overrides BaseInterface.LoadErrorText() NoResultsErrorText() Get error string from Localization with key \"NO_EVALUATION_ERROR\" if there were no evaluations to display. Declaration protected override string NoResultsErrorText() Returns Type Description System.String Overrides BaseInterface.NoResultsErrorText()"
  },
  "unity-client/api/PlayGen.SUGAR.Unity.BaseLeaderboardListInterface.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.BaseLeaderboardListInterface.html",
    "title": "Class BaseLeaderboardListInterface | SUGAR",
    "keywords": "Class BaseLeaderboardListInterface Base abstract class for controlling the UI object related to getting all leaderboards for a game Inheritance System.Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour BaseInterface BaseLeaderboardListInterface Inherited Members BaseInterface._errorText BaseInterface._closeButton BaseInterface._signinButton BaseInterface.PreDisplay() BaseInterface.Show(Boolean) BaseInterface.Draw() BaseInterface.OnSignIn() UnityEngine.MonoBehaviour.Invoke(System.String, System.Single) UnityEngine.MonoBehaviour.InvokeRepeating(System.String, System.Single, System.Single) UnityEngine.MonoBehaviour.CancelInvoke() UnityEngine.MonoBehaviour.CancelInvoke(System.String) UnityEngine.MonoBehaviour.IsInvoking(System.String) UnityEngine.MonoBehaviour.IsInvoking() UnityEngine.MonoBehaviour.StartCoroutine(System.Collections.IEnumerator) UnityEngine.MonoBehaviour.StartCoroutine_Auto(System.Collections.IEnumerator) UnityEngine.MonoBehaviour.StartCoroutine(System.String, System.Object) UnityEngine.MonoBehaviour.StartCoroutine(System.String) UnityEngine.MonoBehaviour.StopCoroutine(System.String) UnityEngine.MonoBehaviour.StopCoroutine(System.Collections.IEnumerator) UnityEngine.MonoBehaviour.StopCoroutine(UnityEngine.Coroutine) UnityEngine.MonoBehaviour.StopAllCoroutines() UnityEngine.MonoBehaviour.print(System.Object) UnityEngine.MonoBehaviour.useGUILayout UnityEngine.MonoBehaviour.runInEditMode UnityEngine.Behaviour.enabled UnityEngine.Behaviour.isActiveAndEnabled UnityEngine.Component.GetComponent(System.Type) UnityEngine.Component.GetComponent<T>() UnityEngine.Component.GetComponent(System.String) UnityEngine.Component.GetComponentInChildren(System.Type, System.Boolean) UnityEngine.Component.GetComponentInChildren(System.Type) UnityEngine.Component.GetComponentInChildren<T>() UnityEngine.Component.GetComponentInChildren<T>(System.Boolean) UnityEngine.Component.GetComponentsInChildren(System.Type) UnityEngine.Component.GetComponentsInChildren(System.Type, System.Boolean) UnityEngine.Component.GetComponentsInChildren<T>(System.Boolean) UnityEngine.Component.GetComponentsInChildren<T>(System.Boolean, System.Collections.Generic.List<T>) UnityEngine.Component.GetComponentsInChildren<T>() UnityEngine.Component.GetComponentsInChildren<T>(System.Collections.Generic.List<T>) UnityEngine.Component.GetComponentInParent(System.Type) UnityEngine.Component.GetComponentInParent<T>() UnityEngine.Component.GetComponentsInParent(System.Type) UnityEngine.Component.GetComponentsInParent(System.Type, System.Boolean) UnityEngine.Component.GetComponentsInParent<T>(System.Boolean) UnityEngine.Component.GetComponentsInParent<T>(System.Boolean, System.Collections.Generic.List<T>) UnityEngine.Component.GetComponentsInParent<T>() UnityEngine.Component.GetComponents(System.Type) UnityEngine.Component.GetComponents(System.Type, System.Collections.Generic.List<UnityEngine.Component>) UnityEngine.Component.GetComponents<T>(System.Collections.Generic.List<T>) UnityEngine.Component.GetComponents<T>() UnityEngine.Component.CompareTag(System.String) UnityEngine.Component.SendMessageUpwards(System.String, System.Object, UnityEngine.SendMessageOptions) UnityEngine.Component.SendMessageUpwards(System.String, System.Object) UnityEngine.Component.SendMessageUpwards(System.String) UnityEngine.Component.SendMessageUpwards(System.String, UnityEngine.SendMessageOptions) UnityEngine.Component.SendMessage(System.String, System.Object, UnityEngine.SendMessageOptions) UnityEngine.Component.SendMessage(System.String, System.Object) UnityEngine.Component.SendMessage(System.String) UnityEngine.Component.SendMessage(System.String, UnityEngine.SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object, UnityEngine.SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object) UnityEngine.Component.BroadcastMessage(System.String) UnityEngine.Component.BroadcastMessage(System.String, UnityEngine.SendMessageOptions) UnityEngine.Component.transform UnityEngine.Component.gameObject UnityEngine.Component.tag UnityEngine.Component.rigidbody UnityEngine.Component.rigidbody2D UnityEngine.Component.camera UnityEngine.Component.light UnityEngine.Component.animation UnityEngine.Component.constantForce UnityEngine.Component.renderer UnityEngine.Component.audio UnityEngine.Component.guiText UnityEngine.Component.networkView UnityEngine.Component.guiElement UnityEngine.Component.guiTexture UnityEngine.Component.collider UnityEngine.Component.collider2D UnityEngine.Component.hingeJoint UnityEngine.Component.particleEmitter UnityEngine.Component.particleSystem UnityEngine.Object.Destroy(UnityEngine.Object, System.Single) UnityEngine.Object.Destroy(UnityEngine.Object) UnityEngine.Object.DestroyImmediate(UnityEngine.Object, System.Boolean) UnityEngine.Object.DestroyImmediate(UnityEngine.Object) UnityEngine.Object.FindObjectsOfType(System.Type) UnityEngine.Object.DontDestroyOnLoad(UnityEngine.Object) UnityEngine.Object.DestroyObject(UnityEngine.Object, System.Single) UnityEngine.Object.DestroyObject(UnityEngine.Object) UnityEngine.Object.FindSceneObjectsOfType(System.Type) UnityEngine.Object.FindObjectsOfTypeIncludingAssets(System.Type) UnityEngine.Object.FindObjectsOfTypeAll(System.Type) UnityEngine.Object.ToString() UnityEngine.Object.GetInstanceID() UnityEngine.Object.GetHashCode() UnityEngine.Object.Equals(System.Object) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Vector3, UnityEngine.Quaternion) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Transform) UnityEngine.Object.Instantiate(UnityEngine.Object) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Transform) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Transform, System.Boolean) UnityEngine.Object.Instantiate<T>(T) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Vector3, UnityEngine.Quaternion) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Transform) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Transform) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Transform, System.Boolean) UnityEngine.Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType(System.Type) UnityEngine.Object.name UnityEngine.Object.hideFlags System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : PlayGen.SUGAR.Unity Assembly : PlayGen.SUGAR.Unity.dll Syntax public abstract class BaseLeaderboardListInterface : BaseInterface Fields _combinedButton Button used to change the current actor type filter to 'Combined'. Can be left null. Declaration [Tooltip(\"Button used to change the current actor type filter to 'Combined'. Can be left null.\")] [SerializeField] protected Button _combinedButton Field Value Type Description UnityEngine.UI.Button _groupButton Button used to change the current actor type filter to 'Group'. Can be left null. Declaration [Tooltip(\"Button used to change the current actor type filter to 'Group'. Can be left null.\")] [SerializeField] protected Button _groupButton Field Value Type Description UnityEngine.UI.Button _leaderboardType Text used for displaying current leaderboard type. Can be left null. Declaration [Tooltip(\"Text used for displaying current leaderboard type. Can be left null.\")] [SerializeField] protected Text _leaderboardType Field Value Type Description UnityEngine.UI.Text _userButton Button used to change the current actor type filter to 'User'. Can be left null. Declaration [Tooltip(\"Button used to change the current actor type filter to 'User'. Can be left null.\")] [SerializeField] protected Button _userButton Field Value Type Description UnityEngine.UI.Button Methods Awake() Base Awake method adds onClick listeners for the close, signin, user, group and combined filter buttons. Declaration protected override void Awake() Overrides BaseInterface.Awake() ErrorDraw(Boolean) Used to set error text in case of no user being signed in, loading issues or if no leaderboards are available. Filter button interactable set to false if no user is signed in or loading issues occur. Declaration protected override void ErrorDraw(bool loadingSuccess) Parameters Type Name Description System.Boolean loadingSuccess Overrides BaseInterface.ErrorDraw(Boolean) HideInterfaces() Hides Account, Evaluation, UserFriend, GroupMember and UserGroup UI objects. Makes filter buttons interactable. Declaration protected override void HideInterfaces() Overrides BaseInterface.HideInterfaces() LoadErrorText() Get error string from Localization with key \"LEADERBOARD_LIST_LOAD_ERROR\" if there were issues loading the leaderboard list. Declaration protected override string LoadErrorText() Returns Type Description System.String Overrides BaseInterface.LoadErrorText() NoResultsErrorText() Get error string from Localization with key \"NO_LEADERBOARD_LIST_ERROR\" if there were no leaderboards to display. Declaration protected override string NoResultsErrorText() Returns Type Description System.String Overrides BaseInterface.NoResultsErrorText()"
  },
  "unity-client/api/PlayGen.SUGAR.Unity.BaseUnityClient-1.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.BaseUnityClient-1.html",
    "title": "Class BaseUnityClient<T> | SUGAR",
    "keywords": "Class BaseUnityClient<T> Base class for UnityClient classes Inheritance System.Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour BaseUnityClient<T> EvaluationUnityClient GroupMemberUnityClient LeaderboardListUnityClient LeaderboardUnityClient UserFriendUnityClient UserGroupUnityClient Inherited Members UnityEngine.MonoBehaviour.Invoke(System.String, System.Single) UnityEngine.MonoBehaviour.InvokeRepeating(System.String, System.Single, System.Single) UnityEngine.MonoBehaviour.CancelInvoke() UnityEngine.MonoBehaviour.CancelInvoke(System.String) UnityEngine.MonoBehaviour.IsInvoking(System.String) UnityEngine.MonoBehaviour.IsInvoking() UnityEngine.MonoBehaviour.StartCoroutine(System.Collections.IEnumerator) UnityEngine.MonoBehaviour.StartCoroutine_Auto(System.Collections.IEnumerator) UnityEngine.MonoBehaviour.StartCoroutine(System.String, System.Object) UnityEngine.MonoBehaviour.StartCoroutine(System.String) UnityEngine.MonoBehaviour.StopCoroutine(System.String) UnityEngine.MonoBehaviour.StopCoroutine(System.Collections.IEnumerator) UnityEngine.MonoBehaviour.StopCoroutine(UnityEngine.Coroutine) UnityEngine.MonoBehaviour.StopAllCoroutines() UnityEngine.MonoBehaviour.print(System.Object) UnityEngine.MonoBehaviour.useGUILayout UnityEngine.MonoBehaviour.runInEditMode UnityEngine.Behaviour.enabled UnityEngine.Behaviour.isActiveAndEnabled UnityEngine.Component.GetComponent(System.Type) UnityEngine.Component.GetComponent<T>() UnityEngine.Component.GetComponent(System.String) UnityEngine.Component.GetComponentInChildren(System.Type, System.Boolean) UnityEngine.Component.GetComponentInChildren(System.Type) UnityEngine.Component.GetComponentInChildren<T>() UnityEngine.Component.GetComponentInChildren<T>(System.Boolean) UnityEngine.Component.GetComponentsInChildren(System.Type) UnityEngine.Component.GetComponentsInChildren(System.Type, System.Boolean) UnityEngine.Component.GetComponentsInChildren<T>(System.Boolean) UnityEngine.Component.GetComponentsInChildren<T>(System.Boolean, System.Collections.Generic.List<T>) UnityEngine.Component.GetComponentsInChildren<T>() UnityEngine.Component.GetComponentsInChildren<T>(System.Collections.Generic.List<T>) UnityEngine.Component.GetComponentInParent(System.Type) UnityEngine.Component.GetComponentInParent<T>() UnityEngine.Component.GetComponentsInParent(System.Type) UnityEngine.Component.GetComponentsInParent(System.Type, System.Boolean) UnityEngine.Component.GetComponentsInParent<T>(System.Boolean) UnityEngine.Component.GetComponentsInParent<T>(System.Boolean, System.Collections.Generic.List<T>) UnityEngine.Component.GetComponentsInParent<T>() UnityEngine.Component.GetComponents(System.Type) UnityEngine.Component.GetComponents(System.Type, System.Collections.Generic.List<UnityEngine.Component>) UnityEngine.Component.GetComponents<T>(System.Collections.Generic.List<T>) UnityEngine.Component.GetComponents<T>() UnityEngine.Component.CompareTag(System.String) UnityEngine.Component.SendMessageUpwards(System.String, System.Object, UnityEngine.SendMessageOptions) UnityEngine.Component.SendMessageUpwards(System.String, System.Object) UnityEngine.Component.SendMessageUpwards(System.String) UnityEngine.Component.SendMessageUpwards(System.String, UnityEngine.SendMessageOptions) UnityEngine.Component.SendMessage(System.String, System.Object, UnityEngine.SendMessageOptions) UnityEngine.Component.SendMessage(System.String, System.Object) UnityEngine.Component.SendMessage(System.String) UnityEngine.Component.SendMessage(System.String, UnityEngine.SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object, UnityEngine.SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object) UnityEngine.Component.BroadcastMessage(System.String) UnityEngine.Component.BroadcastMessage(System.String, UnityEngine.SendMessageOptions) UnityEngine.Component.transform UnityEngine.Component.gameObject UnityEngine.Component.tag UnityEngine.Component.rigidbody UnityEngine.Component.rigidbody2D UnityEngine.Component.camera UnityEngine.Component.light UnityEngine.Component.animation UnityEngine.Component.constantForce UnityEngine.Component.renderer UnityEngine.Component.audio UnityEngine.Component.guiText UnityEngine.Component.networkView UnityEngine.Component.guiElement UnityEngine.Component.guiTexture UnityEngine.Component.collider UnityEngine.Component.collider2D UnityEngine.Component.hingeJoint UnityEngine.Component.particleEmitter UnityEngine.Component.particleSystem UnityEngine.Object.Destroy(UnityEngine.Object, System.Single) UnityEngine.Object.Destroy(UnityEngine.Object) UnityEngine.Object.DestroyImmediate(UnityEngine.Object, System.Boolean) UnityEngine.Object.DestroyImmediate(UnityEngine.Object) UnityEngine.Object.FindObjectsOfType(System.Type) UnityEngine.Object.DontDestroyOnLoad(UnityEngine.Object) UnityEngine.Object.DestroyObject(UnityEngine.Object, System.Single) UnityEngine.Object.DestroyObject(UnityEngine.Object) UnityEngine.Object.FindSceneObjectsOfType(System.Type) UnityEngine.Object.FindObjectsOfTypeIncludingAssets(System.Type) UnityEngine.Object.FindObjectsOfTypeAll(System.Type) UnityEngine.Object.ToString() UnityEngine.Object.GetInstanceID() UnityEngine.Object.GetHashCode() UnityEngine.Object.Equals(System.Object) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Vector3, UnityEngine.Quaternion) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Transform) UnityEngine.Object.Instantiate(UnityEngine.Object) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Transform) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Transform, System.Boolean) UnityEngine.Object.Instantiate<T>(T) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Vector3, UnityEngine.Quaternion) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Transform) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Transform) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Transform, System.Boolean) UnityEngine.Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType(System.Type) UnityEngine.Object.name UnityEngine.Object.hideFlags System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : PlayGen.SUGAR.Unity Assembly : PlayGen.SUGAR.Unity.dll Syntax public class BaseUnityClient<T> : MonoBehaviour where T : BaseInterface Type Parameters Name Description T Fields _interface UI object for this unity client. Can be left null if no UI is required. Declaration [Tooltip(\"UI object for this unity client. Can be left null if no UI is required.\")] [SerializeField] protected T _interface Field Value Type Description T Properties HasInterface Has a UI object been provided for this Unity Client? Declaration public bool HasInterface { get; } Property Value Type Description System.Boolean IsActive Is there a UI object and if so is it currently active? Declaration public bool IsActive { get; } Property Value Type Description System.Boolean Methods Hide() Hide the UI object if it is currently active. Declaration public void Hide()"
  },
  "unity-client/api/PlayGen.SUGAR.Unity.CustomInterface.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.CustomInterface.html",
    "title": "Class CustomInterface | SUGAR",
    "keywords": "Class CustomInterface Inheritance System.Object CustomInterface Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : PlayGen.SUGAR.Unity Assembly : PlayGen.SUGAR.Unity.dll Syntax [Serializable] public class CustomInterface Fields GameObject Declaration public GameObject GameObject Field Value Type Description UnityEngine.GameObject Name Declaration public string Name Field Value Type Description System.String"
  },
  "unity-client/api/PlayGen.SUGAR.Unity.BaseUserGroupInterface.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.BaseUserGroupInterface.html",
    "title": "Class BaseUserGroupInterface | SUGAR",
    "keywords": "Class BaseUserGroupInterface Base abstract class for controlling the UI object related to user groups. Inheritance System.Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour BaseInterface BaseUserGroupInterface Inherited Members BaseInterface._errorText BaseInterface._closeButton BaseInterface._signinButton BaseInterface.Awake() BaseInterface.PreDisplay() BaseInterface.Show(Boolean) BaseInterface.Draw() BaseInterface.ErrorDraw(Boolean) BaseInterface.OnSignIn() UnityEngine.MonoBehaviour.Invoke(System.String, System.Single) UnityEngine.MonoBehaviour.InvokeRepeating(System.String, System.Single, System.Single) UnityEngine.MonoBehaviour.CancelInvoke() UnityEngine.MonoBehaviour.CancelInvoke(System.String) UnityEngine.MonoBehaviour.IsInvoking(System.String) UnityEngine.MonoBehaviour.IsInvoking() UnityEngine.MonoBehaviour.StartCoroutine(System.Collections.IEnumerator) UnityEngine.MonoBehaviour.StartCoroutine_Auto(System.Collections.IEnumerator) UnityEngine.MonoBehaviour.StartCoroutine(System.String, System.Object) UnityEngine.MonoBehaviour.StartCoroutine(System.String) UnityEngine.MonoBehaviour.StopCoroutine(System.String) UnityEngine.MonoBehaviour.StopCoroutine(System.Collections.IEnumerator) UnityEngine.MonoBehaviour.StopCoroutine(UnityEngine.Coroutine) UnityEngine.MonoBehaviour.StopAllCoroutines() UnityEngine.MonoBehaviour.print(System.Object) UnityEngine.MonoBehaviour.useGUILayout UnityEngine.MonoBehaviour.runInEditMode UnityEngine.Behaviour.enabled UnityEngine.Behaviour.isActiveAndEnabled UnityEngine.Component.GetComponent(System.Type) UnityEngine.Component.GetComponent<T>() UnityEngine.Component.GetComponent(System.String) UnityEngine.Component.GetComponentInChildren(System.Type, System.Boolean) UnityEngine.Component.GetComponentInChildren(System.Type) UnityEngine.Component.GetComponentInChildren<T>() UnityEngine.Component.GetComponentInChildren<T>(System.Boolean) UnityEngine.Component.GetComponentsInChildren(System.Type) UnityEngine.Component.GetComponentsInChildren(System.Type, System.Boolean) UnityEngine.Component.GetComponentsInChildren<T>(System.Boolean) UnityEngine.Component.GetComponentsInChildren<T>(System.Boolean, System.Collections.Generic.List<T>) UnityEngine.Component.GetComponentsInChildren<T>() UnityEngine.Component.GetComponentsInChildren<T>(System.Collections.Generic.List<T>) UnityEngine.Component.GetComponentInParent(System.Type) UnityEngine.Component.GetComponentInParent<T>() UnityEngine.Component.GetComponentsInParent(System.Type) UnityEngine.Component.GetComponentsInParent(System.Type, System.Boolean) UnityEngine.Component.GetComponentsInParent<T>(System.Boolean) UnityEngine.Component.GetComponentsInParent<T>(System.Boolean, System.Collections.Generic.List<T>) UnityEngine.Component.GetComponentsInParent<T>() UnityEngine.Component.GetComponents(System.Type) UnityEngine.Component.GetComponents(System.Type, System.Collections.Generic.List<UnityEngine.Component>) UnityEngine.Component.GetComponents<T>(System.Collections.Generic.List<T>) UnityEngine.Component.GetComponents<T>() UnityEngine.Component.CompareTag(System.String) UnityEngine.Component.SendMessageUpwards(System.String, System.Object, UnityEngine.SendMessageOptions) UnityEngine.Component.SendMessageUpwards(System.String, System.Object) UnityEngine.Component.SendMessageUpwards(System.String) UnityEngine.Component.SendMessageUpwards(System.String, UnityEngine.SendMessageOptions) UnityEngine.Component.SendMessage(System.String, System.Object, UnityEngine.SendMessageOptions) UnityEngine.Component.SendMessage(System.String, System.Object) UnityEngine.Component.SendMessage(System.String) UnityEngine.Component.SendMessage(System.String, UnityEngine.SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object, UnityEngine.SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object) UnityEngine.Component.BroadcastMessage(System.String) UnityEngine.Component.BroadcastMessage(System.String, UnityEngine.SendMessageOptions) UnityEngine.Component.transform UnityEngine.Component.gameObject UnityEngine.Component.tag UnityEngine.Component.rigidbody UnityEngine.Component.rigidbody2D UnityEngine.Component.camera UnityEngine.Component.light UnityEngine.Component.animation UnityEngine.Component.constantForce UnityEngine.Component.renderer UnityEngine.Component.audio UnityEngine.Component.guiText UnityEngine.Component.networkView UnityEngine.Component.guiElement UnityEngine.Component.guiTexture UnityEngine.Component.collider UnityEngine.Component.collider2D UnityEngine.Component.hingeJoint UnityEngine.Component.particleEmitter UnityEngine.Component.particleSystem UnityEngine.Object.Destroy(UnityEngine.Object, System.Single) UnityEngine.Object.Destroy(UnityEngine.Object) UnityEngine.Object.DestroyImmediate(UnityEngine.Object, System.Boolean) UnityEngine.Object.DestroyImmediate(UnityEngine.Object) UnityEngine.Object.FindObjectsOfType(System.Type) UnityEngine.Object.DontDestroyOnLoad(UnityEngine.Object) UnityEngine.Object.DestroyObject(UnityEngine.Object, System.Single) UnityEngine.Object.DestroyObject(UnityEngine.Object) UnityEngine.Object.FindSceneObjectsOfType(System.Type) UnityEngine.Object.FindObjectsOfTypeIncludingAssets(System.Type) UnityEngine.Object.FindObjectsOfTypeAll(System.Type) UnityEngine.Object.ToString() UnityEngine.Object.GetInstanceID() UnityEngine.Object.GetHashCode() UnityEngine.Object.Equals(System.Object) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Vector3, UnityEngine.Quaternion) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Transform) UnityEngine.Object.Instantiate(UnityEngine.Object) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Transform) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Transform, System.Boolean) UnityEngine.Object.Instantiate<T>(T) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Vector3, UnityEngine.Quaternion) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Transform) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Transform) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Transform, System.Boolean) UnityEngine.Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType(System.Type) UnityEngine.Object.name UnityEngine.Object.hideFlags System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : PlayGen.SUGAR.Unity Assembly : PlayGen.SUGAR.Unity.dll Syntax public abstract class BaseUserGroupInterface : BaseInterface Methods GetGroups() Get and display the list of groups the currently signed in user is in. Declaration protected void GetGroups() GetPendingSent() Get and display the list of groups the currently signed in user has applied to join. Declaration protected void GetPendingSent() GetSearchResults(String) Get and display the list of groups that match the search string provided. Declaration protected void GetSearchResults(string search) Parameters Type Name Description System.String search HideInterfaces() Hides Account, Evaluation, Leaderboard, GameLeaderboard and UserFriend UI objects. Declaration protected override void HideInterfaces() Overrides BaseInterface.HideInterfaces() LoadErrorText() Get error string from Localization with key \"GROUPS_LOAD_ERROR\" if there were issues loading the group list. Declaration protected override string LoadErrorText() Returns Type Description System.String Overrides BaseInterface.LoadErrorText() NoResultsErrorText() Get error string from Localization with key \"NO_RESULTS_ERROR\" if there were no groups to display. Declaration protected override string NoResultsErrorText() Returns Type Description System.String Overrides BaseInterface.NoResultsErrorText()"
  },
  "unity-client/api/PlayGen.SUGAR.Unity.Editor.EditGameSeed.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.Editor.EditGameSeed.html",
    "title": "Class EditGameSeed | SUGAR",
    "keywords": "Class EditGameSeed Inheritance System.Object EditGameSeed Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : PlayGen.SUGAR.Unity.Editor Assembly : PlayGen.SUGAR.Unity.Editor.dll Syntax public static class EditGameSeed Methods ShowEditGameSeed() Declaration [MenuItem(\"Tools/SUGAR/Edit Game Seed\")] public static void ShowEditGameSeed()"
  },
  "unity-client/api/PlayGen.SUGAR.Unity.Editor.EditGameSeedWindow.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.Editor.EditGameSeedWindow.html",
    "title": "Class EditGameSeedWindow | SUGAR",
    "keywords": "Class EditGameSeedWindow Inheritance System.Object UnityEngine.Object UnityEngine.ScriptableObject UnityEditor.EditorWindow EditGameSeedWindow Inherited Members UnityEditor.EditorWindow.GetWindow(System.Type, System.Boolean, System.String) UnityEditor.EditorWindow.GetWindow(System.Type, System.Boolean) UnityEditor.EditorWindow.GetWindow(System.Type) UnityEditor.EditorWindow.GetWindow(System.Type, System.Boolean, System.String, System.Boolean) UnityEditor.EditorWindow.GetWindowWithRect(System.Type, UnityEngine.Rect, System.Boolean) UnityEditor.EditorWindow.GetWindowWithRect(System.Type, UnityEngine.Rect) UnityEditor.EditorWindow.GetWindowWithRect(System.Type, UnityEngine.Rect, System.Boolean, System.String) UnityEditor.EditorWindow.BeginWindows() UnityEditor.EditorWindow.EndWindows() UnityEditor.EditorWindow.ShowNotification(UnityEngine.GUIContent) UnityEditor.EditorWindow.RemoveNotification() UnityEditor.EditorWindow.ShowTab() UnityEditor.EditorWindow.Focus() UnityEditor.EditorWindow.ShowUtility() UnityEditor.EditorWindow.ShowPopup() UnityEditor.EditorWindow.ShowAsDropDown(UnityEngine.Rect, UnityEngine.Vector2) UnityEditor.EditorWindow.Show() UnityEditor.EditorWindow.Show(System.Boolean) UnityEditor.EditorWindow.ShowAuxWindow() UnityEditor.EditorWindow.GetWindow<T>() UnityEditor.EditorWindow.GetWindow<T>(System.Boolean) UnityEditor.EditorWindow.GetWindow<T>(System.Boolean, System.String) UnityEditor.EditorWindow.GetWindow<T>(System.String) UnityEditor.EditorWindow.GetWindow<T>(System.String, System.Boolean) UnityEditor.EditorWindow.GetWindow<T>(System.Boolean, System.String, System.Boolean) UnityEditor.EditorWindow.GetWindow<T>(System.Type[]) UnityEditor.EditorWindow.GetWindow<T>(System.String, System.Type[]) UnityEditor.EditorWindow.GetWindow<T>(System.String, System.Boolean, System.Type[]) UnityEditor.EditorWindow.FocusWindowIfItsOpen(System.Type) UnityEditor.EditorWindow.FocusWindowIfItsOpen<T>() UnityEditor.EditorWindow.GetWindowWithRect<T>(UnityEngine.Rect) UnityEditor.EditorWindow.GetWindowWithRect<T>(UnityEngine.Rect, System.Boolean) UnityEditor.EditorWindow.GetWindowWithRect<T>(UnityEngine.Rect, System.Boolean, System.String) UnityEditor.EditorWindow.GetWindowWithRect<T>(UnityEngine.Rect, System.Boolean, System.String, System.Boolean) UnityEditor.EditorWindow.Close() UnityEditor.EditorWindow.Repaint() UnityEditor.EditorWindow.SendEvent(UnityEngine.Event) UnityEditor.EditorWindow.wantsMouseMove UnityEditor.EditorWindow.wantsMouseEnterLeaveWindow UnityEditor.EditorWindow.autoRepaintOnSceneChange UnityEditor.EditorWindow.maximized UnityEditor.EditorWindow.focusedWindow UnityEditor.EditorWindow.mouseOverWindow UnityEditor.EditorWindow.minSize UnityEditor.EditorWindow.maxSize UnityEditor.EditorWindow.title UnityEditor.EditorWindow.titleContent UnityEditor.EditorWindow.depthBufferBits UnityEditor.EditorWindow.antiAlias UnityEditor.EditorWindow.position UnityEngine.ScriptableObject.SetDirty() UnityEngine.ScriptableObject.CreateInstance(System.String) UnityEngine.ScriptableObject.CreateInstance(System.Type) UnityEngine.ScriptableObject.CreateInstance<T>() UnityEngine.Object.Destroy(UnityEngine.Object, System.Single) UnityEngine.Object.Destroy(UnityEngine.Object) UnityEngine.Object.DestroyImmediate(UnityEngine.Object, System.Boolean) UnityEngine.Object.DestroyImmediate(UnityEngine.Object) UnityEngine.Object.FindObjectsOfType(System.Type) UnityEngine.Object.DontDestroyOnLoad(UnityEngine.Object) UnityEngine.Object.DestroyObject(UnityEngine.Object, System.Single) UnityEngine.Object.DestroyObject(UnityEngine.Object) UnityEngine.Object.FindSceneObjectsOfType(System.Type) UnityEngine.Object.FindObjectsOfTypeIncludingAssets(System.Type) UnityEngine.Object.FindObjectsOfTypeAll(System.Type) UnityEngine.Object.ToString() UnityEngine.Object.GetInstanceID() UnityEngine.Object.GetHashCode() UnityEngine.Object.Equals(System.Object) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Vector3, UnityEngine.Quaternion) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Transform) UnityEngine.Object.Instantiate(UnityEngine.Object) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Transform) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Transform, System.Boolean) UnityEngine.Object.Instantiate<T>(T) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Vector3, UnityEngine.Quaternion) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Transform) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Transform) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Transform, System.Boolean) UnityEngine.Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType(System.Type) UnityEngine.Object.name UnityEngine.Object.hideFlags System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : PlayGen.SUGAR.Unity.Editor Assembly : PlayGen.SUGAR.Unity.Editor.dll Syntax public class EditGameSeedWindow : EditorWindow Methods SetGameSeed(TextAsset) Declaration public void SetGameSeed(TextAsset gameSeedText) Parameters Type Name Description UnityEngine.TextAsset gameSeedText"
  },
  "unity-client/api/PlayGen.SUGAR.Unity.GroupMemberUnityClient.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.GroupMemberUnityClient.html",
    "title": "Class GroupMemberUnityClient | SUGAR",
    "keywords": "Class GroupMemberUnityClient Unity client for calls related to group member lists. Inheritance System.Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour BaseUnityClient < BaseGroupMemberInterface > GroupMemberUnityClient Inherited Members BaseUnityClient<BaseGroupMemberInterface>._interface BaseUnityClient<BaseGroupMemberInterface>.HasInterface BaseUnityClient<BaseGroupMemberInterface>.IsActive BaseUnityClient<BaseGroupMemberInterface>.Hide() UnityEngine.MonoBehaviour.Invoke(System.String, System.Single) UnityEngine.MonoBehaviour.InvokeRepeating(System.String, System.Single, System.Single) UnityEngine.MonoBehaviour.CancelInvoke() UnityEngine.MonoBehaviour.CancelInvoke(System.String) UnityEngine.MonoBehaviour.IsInvoking(System.String) UnityEngine.MonoBehaviour.IsInvoking() UnityEngine.MonoBehaviour.StartCoroutine(System.Collections.IEnumerator) UnityEngine.MonoBehaviour.StartCoroutine_Auto(System.Collections.IEnumerator) UnityEngine.MonoBehaviour.StartCoroutine(System.String, System.Object) UnityEngine.MonoBehaviour.StartCoroutine(System.String) UnityEngine.MonoBehaviour.StopCoroutine(System.String) UnityEngine.MonoBehaviour.StopCoroutine(System.Collections.IEnumerator) UnityEngine.MonoBehaviour.StopCoroutine(UnityEngine.Coroutine) UnityEngine.MonoBehaviour.StopAllCoroutines() UnityEngine.MonoBehaviour.print(System.Object) UnityEngine.MonoBehaviour.useGUILayout UnityEngine.MonoBehaviour.runInEditMode UnityEngine.Behaviour.enabled UnityEngine.Behaviour.isActiveAndEnabled UnityEngine.Component.GetComponent(System.Type) UnityEngine.Component.GetComponent<T>() UnityEngine.Component.GetComponent(System.String) UnityEngine.Component.GetComponentInChildren(System.Type, System.Boolean) UnityEngine.Component.GetComponentInChildren(System.Type) UnityEngine.Component.GetComponentInChildren<T>() UnityEngine.Component.GetComponentInChildren<T>(System.Boolean) UnityEngine.Component.GetComponentsInChildren(System.Type) UnityEngine.Component.GetComponentsInChildren(System.Type, System.Boolean) UnityEngine.Component.GetComponentsInChildren<T>(System.Boolean) UnityEngine.Component.GetComponentsInChildren<T>(System.Boolean, System.Collections.Generic.List<T>) UnityEngine.Component.GetComponentsInChildren<T>() UnityEngine.Component.GetComponentsInChildren<T>(System.Collections.Generic.List<T>) UnityEngine.Component.GetComponentInParent(System.Type) UnityEngine.Component.GetComponentInParent<T>() UnityEngine.Component.GetComponentsInParent(System.Type) UnityEngine.Component.GetComponentsInParent(System.Type, System.Boolean) UnityEngine.Component.GetComponentsInParent<T>(System.Boolean) UnityEngine.Component.GetComponentsInParent<T>(System.Boolean, System.Collections.Generic.List<T>) UnityEngine.Component.GetComponentsInParent<T>() UnityEngine.Component.GetComponents(System.Type) UnityEngine.Component.GetComponents(System.Type, System.Collections.Generic.List<UnityEngine.Component>) UnityEngine.Component.GetComponents<T>(System.Collections.Generic.List<T>) UnityEngine.Component.GetComponents<T>() UnityEngine.Component.CompareTag(System.String) UnityEngine.Component.SendMessageUpwards(System.String, System.Object, UnityEngine.SendMessageOptions) UnityEngine.Component.SendMessageUpwards(System.String, System.Object) UnityEngine.Component.SendMessageUpwards(System.String) UnityEngine.Component.SendMessageUpwards(System.String, UnityEngine.SendMessageOptions) UnityEngine.Component.SendMessage(System.String, System.Object, UnityEngine.SendMessageOptions) UnityEngine.Component.SendMessage(System.String, System.Object) UnityEngine.Component.SendMessage(System.String) UnityEngine.Component.SendMessage(System.String, UnityEngine.SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object, UnityEngine.SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object) UnityEngine.Component.BroadcastMessage(System.String) UnityEngine.Component.BroadcastMessage(System.String, UnityEngine.SendMessageOptions) UnityEngine.Component.transform UnityEngine.Component.gameObject UnityEngine.Component.tag UnityEngine.Component.rigidbody UnityEngine.Component.rigidbody2D UnityEngine.Component.camera UnityEngine.Component.light UnityEngine.Component.animation UnityEngine.Component.constantForce UnityEngine.Component.renderer UnityEngine.Component.audio UnityEngine.Component.guiText UnityEngine.Component.networkView UnityEngine.Component.guiElement UnityEngine.Component.guiTexture UnityEngine.Component.collider UnityEngine.Component.collider2D UnityEngine.Component.hingeJoint UnityEngine.Component.particleEmitter UnityEngine.Component.particleSystem UnityEngine.Object.Destroy(UnityEngine.Object, System.Single) UnityEngine.Object.Destroy(UnityEngine.Object) UnityEngine.Object.DestroyImmediate(UnityEngine.Object, System.Boolean) UnityEngine.Object.DestroyImmediate(UnityEngine.Object) UnityEngine.Object.FindObjectsOfType(System.Type) UnityEngine.Object.DontDestroyOnLoad(UnityEngine.Object) UnityEngine.Object.DestroyObject(UnityEngine.Object, System.Single) UnityEngine.Object.DestroyObject(UnityEngine.Object) UnityEngine.Object.FindSceneObjectsOfType(System.Type) UnityEngine.Object.FindObjectsOfTypeIncludingAssets(System.Type) UnityEngine.Object.FindObjectsOfTypeAll(System.Type) UnityEngine.Object.ToString() UnityEngine.Object.GetInstanceID() UnityEngine.Object.GetHashCode() UnityEngine.Object.Equals(System.Object) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Vector3, UnityEngine.Quaternion) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Transform) UnityEngine.Object.Instantiate(UnityEngine.Object) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Transform) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Transform, System.Boolean) UnityEngine.Object.Instantiate<T>(T) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Vector3, UnityEngine.Quaternion) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Transform) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Transform) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Transform, System.Boolean) UnityEngine.Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType(System.Type) UnityEngine.Object.name UnityEngine.Object.hideFlags System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : PlayGen.SUGAR.Unity Assembly : PlayGen.SUGAR.Unity.dll Syntax [DisallowMultipleComponent] public class GroupMemberUnityClient : BaseUnityClient<BaseGroupMemberInterface> Properties CurrentGroup Currently selected/displayed group. Declaration public ActorResponse CurrentGroup { get; } Property Value Type Description PlayGen.SUGAR.Contracts.ActorResponse Members Member list for the current group. Declaration public List<ActorResponseAllowableActions> Members { get; } Property Value Type Description System.Collections.Generic.List < ActorResponseAllowableActions > Methods AddFriend(Int32, Boolean) Send friend request to user with id provided. If reload is true, UI is also redrawn. Declaration public void AddFriend(int id, bool reload = true) Parameters Type Name Description System.Int32 id System.Boolean reload Display(ActorResponse) Sets current group and gathers member list for that group. Displays UI object if provided. Declaration public void Display(ActorResponse group) Parameters Type Name Description PlayGen.SUGAR.Contracts.ActorResponse group"
  },
  "unity-client/api/PlayGen.SUGAR.Unity.LeaderboardListUnityClient.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.LeaderboardListUnityClient.html",
    "title": "Class LeaderboardListUnityClient | SUGAR",
    "keywords": "Class LeaderboardListUnityClient Unity client for calls related to leaderboards for an application. Inheritance System.Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour BaseUnityClient < BaseLeaderboardListInterface > LeaderboardListUnityClient Inherited Members BaseUnityClient<BaseLeaderboardListInterface>._interface BaseUnityClient<BaseLeaderboardListInterface>.HasInterface BaseUnityClient<BaseLeaderboardListInterface>.IsActive BaseUnityClient<BaseLeaderboardListInterface>.Hide() UnityEngine.MonoBehaviour.Invoke(System.String, System.Single) UnityEngine.MonoBehaviour.InvokeRepeating(System.String, System.Single, System.Single) UnityEngine.MonoBehaviour.CancelInvoke() UnityEngine.MonoBehaviour.CancelInvoke(System.String) UnityEngine.MonoBehaviour.IsInvoking(System.String) UnityEngine.MonoBehaviour.IsInvoking() UnityEngine.MonoBehaviour.StartCoroutine(System.Collections.IEnumerator) UnityEngine.MonoBehaviour.StartCoroutine_Auto(System.Collections.IEnumerator) UnityEngine.MonoBehaviour.StartCoroutine(System.String, System.Object) UnityEngine.MonoBehaviour.StartCoroutine(System.String) UnityEngine.MonoBehaviour.StopCoroutine(System.String) UnityEngine.MonoBehaviour.StopCoroutine(System.Collections.IEnumerator) UnityEngine.MonoBehaviour.StopCoroutine(UnityEngine.Coroutine) UnityEngine.MonoBehaviour.StopAllCoroutines() UnityEngine.MonoBehaviour.print(System.Object) UnityEngine.MonoBehaviour.useGUILayout UnityEngine.MonoBehaviour.runInEditMode UnityEngine.Behaviour.enabled UnityEngine.Behaviour.isActiveAndEnabled UnityEngine.Component.GetComponent(System.Type) UnityEngine.Component.GetComponent<T>() UnityEngine.Component.GetComponent(System.String) UnityEngine.Component.GetComponentInChildren(System.Type, System.Boolean) UnityEngine.Component.GetComponentInChildren(System.Type) UnityEngine.Component.GetComponentInChildren<T>() UnityEngine.Component.GetComponentInChildren<T>(System.Boolean) UnityEngine.Component.GetComponentsInChildren(System.Type) UnityEngine.Component.GetComponentsInChildren(System.Type, System.Boolean) UnityEngine.Component.GetComponentsInChildren<T>(System.Boolean) UnityEngine.Component.GetComponentsInChildren<T>(System.Boolean, System.Collections.Generic.List<T>) UnityEngine.Component.GetComponentsInChildren<T>() UnityEngine.Component.GetComponentsInChildren<T>(System.Collections.Generic.List<T>) UnityEngine.Component.GetComponentInParent(System.Type) UnityEngine.Component.GetComponentInParent<T>() UnityEngine.Component.GetComponentsInParent(System.Type) UnityEngine.Component.GetComponentsInParent(System.Type, System.Boolean) UnityEngine.Component.GetComponentsInParent<T>(System.Boolean) UnityEngine.Component.GetComponentsInParent<T>(System.Boolean, System.Collections.Generic.List<T>) UnityEngine.Component.GetComponentsInParent<T>() UnityEngine.Component.GetComponents(System.Type) UnityEngine.Component.GetComponents(System.Type, System.Collections.Generic.List<UnityEngine.Component>) UnityEngine.Component.GetComponents<T>(System.Collections.Generic.List<T>) UnityEngine.Component.GetComponents<T>() UnityEngine.Component.CompareTag(System.String) UnityEngine.Component.SendMessageUpwards(System.String, System.Object, UnityEngine.SendMessageOptions) UnityEngine.Component.SendMessageUpwards(System.String, System.Object) UnityEngine.Component.SendMessageUpwards(System.String) UnityEngine.Component.SendMessageUpwards(System.String, UnityEngine.SendMessageOptions) UnityEngine.Component.SendMessage(System.String, System.Object, UnityEngine.SendMessageOptions) UnityEngine.Component.SendMessage(System.String, System.Object) UnityEngine.Component.SendMessage(System.String) UnityEngine.Component.SendMessage(System.String, UnityEngine.SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object, UnityEngine.SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object) UnityEngine.Component.BroadcastMessage(System.String) UnityEngine.Component.BroadcastMessage(System.String, UnityEngine.SendMessageOptions) UnityEngine.Component.transform UnityEngine.Component.gameObject UnityEngine.Component.tag UnityEngine.Component.rigidbody UnityEngine.Component.rigidbody2D UnityEngine.Component.camera UnityEngine.Component.light UnityEngine.Component.animation UnityEngine.Component.constantForce UnityEngine.Component.renderer UnityEngine.Component.audio UnityEngine.Component.guiText UnityEngine.Component.networkView UnityEngine.Component.guiElement UnityEngine.Component.guiTexture UnityEngine.Component.collider UnityEngine.Component.collider2D UnityEngine.Component.hingeJoint UnityEngine.Component.particleEmitter UnityEngine.Component.particleSystem UnityEngine.Object.Destroy(UnityEngine.Object, System.Single) UnityEngine.Object.Destroy(UnityEngine.Object) UnityEngine.Object.DestroyImmediate(UnityEngine.Object, System.Boolean) UnityEngine.Object.DestroyImmediate(UnityEngine.Object) UnityEngine.Object.FindObjectsOfType(System.Type) UnityEngine.Object.DontDestroyOnLoad(UnityEngine.Object) UnityEngine.Object.DestroyObject(UnityEngine.Object, System.Single) UnityEngine.Object.DestroyObject(UnityEngine.Object) UnityEngine.Object.FindSceneObjectsOfType(System.Type) UnityEngine.Object.FindObjectsOfTypeIncludingAssets(System.Type) UnityEngine.Object.FindObjectsOfTypeAll(System.Type) UnityEngine.Object.ToString() UnityEngine.Object.GetInstanceID() UnityEngine.Object.GetHashCode() UnityEngine.Object.Equals(System.Object) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Vector3, UnityEngine.Quaternion) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Transform) UnityEngine.Object.Instantiate(UnityEngine.Object) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Transform) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Transform, System.Boolean) UnityEngine.Object.Instantiate<T>(T) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Vector3, UnityEngine.Quaternion) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Transform) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Transform) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Transform, System.Boolean) UnityEngine.Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType(System.Type) UnityEngine.Object.name UnityEngine.Object.hideFlags System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : PlayGen.SUGAR.Unity Assembly : PlayGen.SUGAR.Unity.dll Syntax [DisallowMultipleComponent] public class LeaderboardListUnityClient : BaseUnityClient<BaseLeaderboardListInterface> Properties CurrentActorType Currently used ActorType filter. Declaration public ActorType CurrentActorType { get; } Property Value Type Description PlayGen.SUGAR.Common.ActorType Leaderboards List of leaderboards for this application for each ActorType filter. Declaration public Dictionary<ActorType, List<LeaderboardResponse>> Leaderboards { get; } Property Value Type Description System.Collections.Generic.Dictionary < PlayGen.SUGAR.Common.ActorType , System.Collections.Generic.List < PlayGen.SUGAR.Contracts.LeaderboardResponse >> Methods DisplayGameList(ActorType) Gathers leaderboards for this application and displays list for current ActorType if UI object if provided. Declaration public void DisplayGameList(ActorType filter = ActorType.User) Parameters Type Name Description PlayGen.SUGAR.Common.ActorType filter DisplayGlobalList(ActorType) Gathers leaderboards for this application and displays list for current ActorType if UI object if provided. Declaration public void DisplayGlobalList(ActorType filter = ActorType.User) Parameters Type Name Description PlayGen.SUGAR.Common.ActorType filter SetFilter(ActorType) Set the ActorType filter to use. Declaration public void SetFilter(ActorType filter) Parameters Type Name Description PlayGen.SUGAR.Common.ActorType filter"
  },
  "unity-client/api/PlayGen.SUGAR.Unity.ResponseHandler.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.ResponseHandler.html",
    "title": "Class ResponseHandler | SUGAR",
    "keywords": "Class ResponseHandler Inheritance System.Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour ResponseHandler Inherited Members UnityEngine.MonoBehaviour.Invoke(System.String, System.Single) UnityEngine.MonoBehaviour.InvokeRepeating(System.String, System.Single, System.Single) UnityEngine.MonoBehaviour.CancelInvoke() UnityEngine.MonoBehaviour.CancelInvoke(System.String) UnityEngine.MonoBehaviour.IsInvoking(System.String) UnityEngine.MonoBehaviour.IsInvoking() UnityEngine.MonoBehaviour.StartCoroutine(System.Collections.IEnumerator) UnityEngine.MonoBehaviour.StartCoroutine_Auto(System.Collections.IEnumerator) UnityEngine.MonoBehaviour.StartCoroutine(System.String, System.Object) UnityEngine.MonoBehaviour.StartCoroutine(System.String) UnityEngine.MonoBehaviour.StopCoroutine(System.String) UnityEngine.MonoBehaviour.StopCoroutine(System.Collections.IEnumerator) UnityEngine.MonoBehaviour.StopCoroutine(UnityEngine.Coroutine) UnityEngine.MonoBehaviour.StopAllCoroutines() UnityEngine.MonoBehaviour.print(System.Object) UnityEngine.MonoBehaviour.useGUILayout UnityEngine.MonoBehaviour.runInEditMode UnityEngine.Behaviour.enabled UnityEngine.Behaviour.isActiveAndEnabled UnityEngine.Component.GetComponent(System.Type) UnityEngine.Component.GetComponent<T>() UnityEngine.Component.GetComponent(System.String) UnityEngine.Component.GetComponentInChildren(System.Type, System.Boolean) UnityEngine.Component.GetComponentInChildren(System.Type) UnityEngine.Component.GetComponentInChildren<T>() UnityEngine.Component.GetComponentInChildren<T>(System.Boolean) UnityEngine.Component.GetComponentsInChildren(System.Type) UnityEngine.Component.GetComponentsInChildren(System.Type, System.Boolean) UnityEngine.Component.GetComponentsInChildren<T>(System.Boolean) UnityEngine.Component.GetComponentsInChildren<T>(System.Boolean, System.Collections.Generic.List<T>) UnityEngine.Component.GetComponentsInChildren<T>() UnityEngine.Component.GetComponentsInChildren<T>(System.Collections.Generic.List<T>) UnityEngine.Component.GetComponentInParent(System.Type) UnityEngine.Component.GetComponentInParent<T>() UnityEngine.Component.GetComponentsInParent(System.Type) UnityEngine.Component.GetComponentsInParent(System.Type, System.Boolean) UnityEngine.Component.GetComponentsInParent<T>(System.Boolean) UnityEngine.Component.GetComponentsInParent<T>(System.Boolean, System.Collections.Generic.List<T>) UnityEngine.Component.GetComponentsInParent<T>() UnityEngine.Component.GetComponents(System.Type) UnityEngine.Component.GetComponents(System.Type, System.Collections.Generic.List<UnityEngine.Component>) UnityEngine.Component.GetComponents<T>(System.Collections.Generic.List<T>) UnityEngine.Component.GetComponents<T>() UnityEngine.Component.CompareTag(System.String) UnityEngine.Component.SendMessageUpwards(System.String, System.Object, UnityEngine.SendMessageOptions) UnityEngine.Component.SendMessageUpwards(System.String, System.Object) UnityEngine.Component.SendMessageUpwards(System.String) UnityEngine.Component.SendMessageUpwards(System.String, UnityEngine.SendMessageOptions) UnityEngine.Component.SendMessage(System.String, System.Object, UnityEngine.SendMessageOptions) UnityEngine.Component.SendMessage(System.String, System.Object) UnityEngine.Component.SendMessage(System.String) UnityEngine.Component.SendMessage(System.String, UnityEngine.SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object, UnityEngine.SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object) UnityEngine.Component.BroadcastMessage(System.String) UnityEngine.Component.BroadcastMessage(System.String, UnityEngine.SendMessageOptions) UnityEngine.Component.transform UnityEngine.Component.gameObject UnityEngine.Component.tag UnityEngine.Component.rigidbody UnityEngine.Component.rigidbody2D UnityEngine.Component.camera UnityEngine.Component.light UnityEngine.Component.animation UnityEngine.Component.constantForce UnityEngine.Component.renderer UnityEngine.Component.audio UnityEngine.Component.guiText UnityEngine.Component.networkView UnityEngine.Component.guiElement UnityEngine.Component.guiTexture UnityEngine.Component.collider UnityEngine.Component.collider2D UnityEngine.Component.hingeJoint UnityEngine.Component.particleEmitter UnityEngine.Component.particleSystem UnityEngine.Object.Destroy(UnityEngine.Object, System.Single) UnityEngine.Object.Destroy(UnityEngine.Object) UnityEngine.Object.DestroyImmediate(UnityEngine.Object, System.Boolean) UnityEngine.Object.DestroyImmediate(UnityEngine.Object) UnityEngine.Object.FindObjectsOfType(System.Type) UnityEngine.Object.DontDestroyOnLoad(UnityEngine.Object) UnityEngine.Object.DestroyObject(UnityEngine.Object, System.Single) UnityEngine.Object.DestroyObject(UnityEngine.Object) UnityEngine.Object.FindSceneObjectsOfType(System.Type) UnityEngine.Object.FindObjectsOfTypeIncludingAssets(System.Type) UnityEngine.Object.FindObjectsOfTypeAll(System.Type) UnityEngine.Object.ToString() UnityEngine.Object.GetInstanceID() UnityEngine.Object.GetHashCode() UnityEngine.Object.Equals(System.Object) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Vector3, UnityEngine.Quaternion) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Transform) UnityEngine.Object.Instantiate(UnityEngine.Object) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Transform) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Transform, System.Boolean) UnityEngine.Object.Instantiate<T>(T) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Vector3, UnityEngine.Quaternion) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Transform) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Transform) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Transform, System.Boolean) UnityEngine.Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType(System.Type) UnityEngine.Object.name UnityEngine.Object.hideFlags System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : PlayGen.SUGAR.Unity Assembly : PlayGen.SUGAR.Unity.dll Syntax public class ResponseHandler : MonoBehaviour"
  },
  "unity-client/api/PlayGen.SUGAR.Unity.SUGARManager.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.SUGARManager.html",
    "title": "Class SUGARManager | SUGAR",
    "keywords": "Class SUGARManager Access point for SUGAR related classes. Inheritance System.Object SUGARManager Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : PlayGen.SUGAR.Unity Assembly : PlayGen.SUGAR.Unity.dll Syntax public static class SUGARManager Properties Account Unity client for calls related to accounts Declaration public static AccountUnityClient Account { get; } Property Value Type Description AccountUnityClient ClassId Group name gathered from auto sign in. Declaration public static string ClassId { get; } Property Value Type Description System.String CurrentGroup Currently signed in user. Declaration public static ActorResponse CurrentGroup { get; } Property Value Type Description PlayGen.SUGAR.Contracts.ActorResponse CurrentUser Currently signed in user. Declaration public static ActorResponse CurrentUser { get; } Property Value Type Description PlayGen.SUGAR.Contracts.ActorResponse Evaluation Unity client for calls related to evaluations Declaration public static EvaluationUnityClient Evaluation { get; } Property Value Type Description EvaluationUnityClient GameData Unity client for calls related to gamedata Declaration public static GameDataUnityClient GameData { get; } Property Value Type Description GameDataUnityClient GameId GameId for this application. Declaration public static int GameId { get; } Property Value Type Description System.Int32 GameLeaderboard Unity client for calls related to leaderboard lists Declaration public static LeaderboardListUnityClient GameLeaderboard { get; } Property Value Type Description LeaderboardListUnityClient GroupMember Unity client for calls related to group members Declaration public static GroupMemberUnityClient GroupMember { get; } Property Value Type Description GroupMemberUnityClient Leaderboard Unity client for calls related to leaderboard standings Declaration public static LeaderboardUnityClient Leaderboard { get; } Property Value Type Description LeaderboardUnityClient Resource Unity client for calls related to resources Declaration public static ResourceUnityClient Resource { get; } Property Value Type Description ResourceUnityClient Unity Class for managing Unity elements of the asset Declaration public static SUGARUnityManager Unity { get; } Property Value Type Description SUGARUnityManager UserFriend Unity client for calls related to friend lists Declaration public static UserFriendUnityClient UserFriend { get; } Property Value Type Description UserFriendUnityClient UserGroup Unity client for calls related to user groups Declaration public static UserGroupUnityClient UserGroup { get; } Property Value Type Description UserGroupUnityClient"
  },
  "unity-client/api/PlayGen.SUGAR.Unity.ActorResponseAllowableActions.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.ActorResponseAllowableActions.html",
    "title": "Class ActorResponseAllowableActions | SUGAR",
    "keywords": "Class ActorResponseAllowableActions ActorResponse with additional information on if the current user can add and remove them. Inheritance System.Object ActorResponseAllowableActions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : PlayGen.SUGAR.Unity Assembly : PlayGen.SUGAR.Unity.dll Syntax public class ActorResponseAllowableActions Constructors ActorResponseAllowableActions(ActorResponse, Boolean, Boolean) Declaration public ActorResponseAllowableActions(ActorResponse actor, bool add, bool remove) Parameters Type Name Description PlayGen.SUGAR.Contracts.ActorResponse actor System.Boolean add System.Boolean remove Properties Actor ActorResponse contains the actor ID and Name. Declaration public ActorResponse Actor { get; set; } Property Value Type Description PlayGen.SUGAR.Contracts.ActorResponse CanAdd Can the currently signed in user add or accept a request from this actor? Declaration public bool CanAdd { get; set; } Property Value Type Description System.Boolean CanRemove Can the currently signed in user remove or reject a request from this actor? Declaration public bool CanRemove { get; set; } Property Value Type Description System.Boolean"
  },
  "unity-client/api/PlayGen.SUGAR.Unity.BaseInterface.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.BaseInterface.html",
    "title": "Class BaseInterface | SUGAR",
    "keywords": "Class BaseInterface Base abstract class for controlling UI objects Inheritance System.Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour BaseInterface BaseEvaluationListInterface BaseGroupMemberInterface BaseLeaderboardInterface BaseLeaderboardListInterface BaseUserFriendInterface BaseUserGroupInterface Inherited Members UnityEngine.MonoBehaviour.Invoke(System.String, System.Single) UnityEngine.MonoBehaviour.InvokeRepeating(System.String, System.Single, System.Single) UnityEngine.MonoBehaviour.CancelInvoke() UnityEngine.MonoBehaviour.CancelInvoke(System.String) UnityEngine.MonoBehaviour.IsInvoking(System.String) UnityEngine.MonoBehaviour.IsInvoking() UnityEngine.MonoBehaviour.StartCoroutine(System.Collections.IEnumerator) UnityEngine.MonoBehaviour.StartCoroutine_Auto(System.Collections.IEnumerator) UnityEngine.MonoBehaviour.StartCoroutine(System.String, System.Object) UnityEngine.MonoBehaviour.StartCoroutine(System.String) UnityEngine.MonoBehaviour.StopCoroutine(System.String) UnityEngine.MonoBehaviour.StopCoroutine(System.Collections.IEnumerator) UnityEngine.MonoBehaviour.StopCoroutine(UnityEngine.Coroutine) UnityEngine.MonoBehaviour.StopAllCoroutines() UnityEngine.MonoBehaviour.print(System.Object) UnityEngine.MonoBehaviour.useGUILayout UnityEngine.MonoBehaviour.runInEditMode UnityEngine.Behaviour.enabled UnityEngine.Behaviour.isActiveAndEnabled UnityEngine.Component.GetComponent(System.Type) UnityEngine.Component.GetComponent<T>() UnityEngine.Component.GetComponent(System.String) UnityEngine.Component.GetComponentInChildren(System.Type, System.Boolean) UnityEngine.Component.GetComponentInChildren(System.Type) UnityEngine.Component.GetComponentInChildren<T>() UnityEngine.Component.GetComponentInChildren<T>(System.Boolean) UnityEngine.Component.GetComponentsInChildren(System.Type) UnityEngine.Component.GetComponentsInChildren(System.Type, System.Boolean) UnityEngine.Component.GetComponentsInChildren<T>(System.Boolean) UnityEngine.Component.GetComponentsInChildren<T>(System.Boolean, System.Collections.Generic.List<T>) UnityEngine.Component.GetComponentsInChildren<T>() UnityEngine.Component.GetComponentsInChildren<T>(System.Collections.Generic.List<T>) UnityEngine.Component.GetComponentInParent(System.Type) UnityEngine.Component.GetComponentInParent<T>() UnityEngine.Component.GetComponentsInParent(System.Type) UnityEngine.Component.GetComponentsInParent(System.Type, System.Boolean) UnityEngine.Component.GetComponentsInParent<T>(System.Boolean) UnityEngine.Component.GetComponentsInParent<T>(System.Boolean, System.Collections.Generic.List<T>) UnityEngine.Component.GetComponentsInParent<T>() UnityEngine.Component.GetComponents(System.Type) UnityEngine.Component.GetComponents(System.Type, System.Collections.Generic.List<UnityEngine.Component>) UnityEngine.Component.GetComponents<T>(System.Collections.Generic.List<T>) UnityEngine.Component.GetComponents<T>() UnityEngine.Component.CompareTag(System.String) UnityEngine.Component.SendMessageUpwards(System.String, System.Object, UnityEngine.SendMessageOptions) UnityEngine.Component.SendMessageUpwards(System.String, System.Object) UnityEngine.Component.SendMessageUpwards(System.String) UnityEngine.Component.SendMessageUpwards(System.String, UnityEngine.SendMessageOptions) UnityEngine.Component.SendMessage(System.String, System.Object, UnityEngine.SendMessageOptions) UnityEngine.Component.SendMessage(System.String, System.Object) UnityEngine.Component.SendMessage(System.String) UnityEngine.Component.SendMessage(System.String, UnityEngine.SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object, UnityEngine.SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object) UnityEngine.Component.BroadcastMessage(System.String) UnityEngine.Component.BroadcastMessage(System.String, UnityEngine.SendMessageOptions) UnityEngine.Component.transform UnityEngine.Component.gameObject UnityEngine.Component.tag UnityEngine.Component.rigidbody UnityEngine.Component.rigidbody2D UnityEngine.Component.camera UnityEngine.Component.light UnityEngine.Component.animation UnityEngine.Component.constantForce UnityEngine.Component.renderer UnityEngine.Component.audio UnityEngine.Component.guiText UnityEngine.Component.networkView UnityEngine.Component.guiElement UnityEngine.Component.guiTexture UnityEngine.Component.collider UnityEngine.Component.collider2D UnityEngine.Component.hingeJoint UnityEngine.Component.particleEmitter UnityEngine.Component.particleSystem UnityEngine.Object.Destroy(UnityEngine.Object, System.Single) UnityEngine.Object.Destroy(UnityEngine.Object) UnityEngine.Object.DestroyImmediate(UnityEngine.Object, System.Boolean) UnityEngine.Object.DestroyImmediate(UnityEngine.Object) UnityEngine.Object.FindObjectsOfType(System.Type) UnityEngine.Object.DontDestroyOnLoad(UnityEngine.Object) UnityEngine.Object.DestroyObject(UnityEngine.Object, System.Single) UnityEngine.Object.DestroyObject(UnityEngine.Object) UnityEngine.Object.FindSceneObjectsOfType(System.Type) UnityEngine.Object.FindObjectsOfTypeIncludingAssets(System.Type) UnityEngine.Object.FindObjectsOfTypeAll(System.Type) UnityEngine.Object.ToString() UnityEngine.Object.GetInstanceID() UnityEngine.Object.GetHashCode() UnityEngine.Object.Equals(System.Object) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Vector3, UnityEngine.Quaternion) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Transform) UnityEngine.Object.Instantiate(UnityEngine.Object) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Transform) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Transform, System.Boolean) UnityEngine.Object.Instantiate<T>(T) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Vector3, UnityEngine.Quaternion) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Transform) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Transform) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Transform, System.Boolean) UnityEngine.Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType(System.Type) UnityEngine.Object.name UnityEngine.Object.hideFlags System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : PlayGen.SUGAR.Unity Assembly : PlayGen.SUGAR.Unity.dll Syntax public abstract class BaseInterface : MonoBehaviour Fields _closeButton Button used to disable this object. Can be left null. Declaration [Tooltip(\"Button used to disable this object. Can be left null.\")] [SerializeField] protected Button _closeButton Field Value Type Description UnityEngine.UI.Button _errorText Text object which displays errors if/when they occur. Can be left null. Declaration [Tooltip(\"Text object which displays errors if/when they occur. Can be left null.\")] [SerializeField] protected Text _errorText Field Value Type Description UnityEngine.UI.Text _signinButton Button used to display account UI object (if available) if no user is signed in. Can be left null. Declaration [Tooltip(\"Button used to disable this object. Can be left null.\")] [SerializeField] protected Button _signinButton Field Value Type Description UnityEngine.UI.Button Methods Awake() Base Awake method adds onClick listeners for the close and signin buttons. Declaration protected virtual void Awake() Draw() Should be used to set, create and place UI on this object. Declaration protected abstract void Draw() ErrorDraw(Boolean) Should be used to set error text and disable UI objects due to errors, if required. By default sets error text in case of no user being signed in or loading issues. Declaration protected virtual void ErrorDraw(bool loadingSuccess) Parameters Type Name Description System.Boolean loadingSuccess HideInterfaces() Should be used to enable/disable UI on this object and hide other UI objects. Declaration protected abstract void HideInterfaces() LoadErrorText() Get error string if there were issues loading what was required. Declaration protected abstract string LoadErrorText() Returns Type Description System.String NoResultsErrorText() Get error string if there were no results to display. Declaration protected abstract string NoResultsErrorText() Returns Type Description System.String OnSignIn() Triggered by successful sign-in via this UI object. Declaration protected abstract void OnSignIn() PreDisplay() Functionality triggered before displaying the UI object. Declaration protected abstract void PreDisplay() Show(Boolean) Used to display/redraw the UI on this object. Triggers methods in this order: HideInterfaces - abstract method used to enable/disable UI on this object and hide other UI objects. PreDraw - private method. Activates object using SUGARManager.Unity.EnableObject, resets error text and hides signin button. Draw - abstract method where creation and placement of the UI should be performed. ErrorDraw - where error text is determined and set, if required. Declaration protected void Show(bool loadingSuccess) Parameters Type Name Description System.Boolean loadingSuccess"
  },
  "unity-client/api/PlayGen.SUGAR.Unity.BaseLeaderboardInterface.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.BaseLeaderboardInterface.html",
    "title": "Class BaseLeaderboardInterface | SUGAR",
    "keywords": "Class BaseLeaderboardInterface Base abstract class for controlling the UI object related to leaderboards Inheritance System.Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour BaseInterface BaseLeaderboardInterface Inherited Members BaseInterface._errorText BaseInterface._closeButton BaseInterface._signinButton BaseInterface.PreDisplay() BaseInterface.Show(Boolean) BaseInterface.Draw() BaseInterface.OnSignIn() UnityEngine.MonoBehaviour.Invoke(System.String, System.Single) UnityEngine.MonoBehaviour.InvokeRepeating(System.String, System.Single, System.Single) UnityEngine.MonoBehaviour.CancelInvoke() UnityEngine.MonoBehaviour.CancelInvoke(System.String) UnityEngine.MonoBehaviour.IsInvoking(System.String) UnityEngine.MonoBehaviour.IsInvoking() UnityEngine.MonoBehaviour.StartCoroutine(System.Collections.IEnumerator) UnityEngine.MonoBehaviour.StartCoroutine_Auto(System.Collections.IEnumerator) UnityEngine.MonoBehaviour.StartCoroutine(System.String, System.Object) UnityEngine.MonoBehaviour.StartCoroutine(System.String) UnityEngine.MonoBehaviour.StopCoroutine(System.String) UnityEngine.MonoBehaviour.StopCoroutine(System.Collections.IEnumerator) UnityEngine.MonoBehaviour.StopCoroutine(UnityEngine.Coroutine) UnityEngine.MonoBehaviour.StopAllCoroutines() UnityEngine.MonoBehaviour.print(System.Object) UnityEngine.MonoBehaviour.useGUILayout UnityEngine.MonoBehaviour.runInEditMode UnityEngine.Behaviour.enabled UnityEngine.Behaviour.isActiveAndEnabled UnityEngine.Component.GetComponent(System.Type) UnityEngine.Component.GetComponent<T>() UnityEngine.Component.GetComponent(System.String) UnityEngine.Component.GetComponentInChildren(System.Type, System.Boolean) UnityEngine.Component.GetComponentInChildren(System.Type) UnityEngine.Component.GetComponentInChildren<T>() UnityEngine.Component.GetComponentInChildren<T>(System.Boolean) UnityEngine.Component.GetComponentsInChildren(System.Type) UnityEngine.Component.GetComponentsInChildren(System.Type, System.Boolean) UnityEngine.Component.GetComponentsInChildren<T>(System.Boolean) UnityEngine.Component.GetComponentsInChildren<T>(System.Boolean, System.Collections.Generic.List<T>) UnityEngine.Component.GetComponentsInChildren<T>() UnityEngine.Component.GetComponentsInChildren<T>(System.Collections.Generic.List<T>) UnityEngine.Component.GetComponentInParent(System.Type) UnityEngine.Component.GetComponentInParent<T>() UnityEngine.Component.GetComponentsInParent(System.Type) UnityEngine.Component.GetComponentsInParent(System.Type, System.Boolean) UnityEngine.Component.GetComponentsInParent<T>(System.Boolean) UnityEngine.Component.GetComponentsInParent<T>(System.Boolean, System.Collections.Generic.List<T>) UnityEngine.Component.GetComponentsInParent<T>() UnityEngine.Component.GetComponents(System.Type) UnityEngine.Component.GetComponents(System.Type, System.Collections.Generic.List<UnityEngine.Component>) UnityEngine.Component.GetComponents<T>(System.Collections.Generic.List<T>) UnityEngine.Component.GetComponents<T>() UnityEngine.Component.CompareTag(System.String) UnityEngine.Component.SendMessageUpwards(System.String, System.Object, UnityEngine.SendMessageOptions) UnityEngine.Component.SendMessageUpwards(System.String, System.Object) UnityEngine.Component.SendMessageUpwards(System.String) UnityEngine.Component.SendMessageUpwards(System.String, UnityEngine.SendMessageOptions) UnityEngine.Component.SendMessage(System.String, System.Object, UnityEngine.SendMessageOptions) UnityEngine.Component.SendMessage(System.String, System.Object) UnityEngine.Component.SendMessage(System.String) UnityEngine.Component.SendMessage(System.String, UnityEngine.SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object, UnityEngine.SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object) UnityEngine.Component.BroadcastMessage(System.String) UnityEngine.Component.BroadcastMessage(System.String, UnityEngine.SendMessageOptions) UnityEngine.Component.transform UnityEngine.Component.gameObject UnityEngine.Component.tag UnityEngine.Component.rigidbody UnityEngine.Component.rigidbody2D UnityEngine.Component.camera UnityEngine.Component.light UnityEngine.Component.animation UnityEngine.Component.constantForce UnityEngine.Component.renderer UnityEngine.Component.audio UnityEngine.Component.guiText UnityEngine.Component.networkView UnityEngine.Component.guiElement UnityEngine.Component.guiTexture UnityEngine.Component.collider UnityEngine.Component.collider2D UnityEngine.Component.hingeJoint UnityEngine.Component.particleEmitter UnityEngine.Component.particleSystem UnityEngine.Object.Destroy(UnityEngine.Object, System.Single) UnityEngine.Object.Destroy(UnityEngine.Object) UnityEngine.Object.DestroyImmediate(UnityEngine.Object, System.Boolean) UnityEngine.Object.DestroyImmediate(UnityEngine.Object) UnityEngine.Object.FindObjectsOfType(System.Type) UnityEngine.Object.DontDestroyOnLoad(UnityEngine.Object) UnityEngine.Object.DestroyObject(UnityEngine.Object, System.Single) UnityEngine.Object.DestroyObject(UnityEngine.Object) UnityEngine.Object.FindSceneObjectsOfType(System.Type) UnityEngine.Object.FindObjectsOfTypeIncludingAssets(System.Type) UnityEngine.Object.FindObjectsOfTypeAll(System.Type) UnityEngine.Object.ToString() UnityEngine.Object.GetInstanceID() UnityEngine.Object.GetHashCode() UnityEngine.Object.Equals(System.Object) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Vector3, UnityEngine.Quaternion) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Transform) UnityEngine.Object.Instantiate(UnityEngine.Object) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Transform) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Transform, System.Boolean) UnityEngine.Object.Instantiate<T>(T) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Vector3, UnityEngine.Quaternion) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Transform) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Transform) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Transform, System.Boolean) UnityEngine.Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType(System.Type) UnityEngine.Object.name UnityEngine.Object.hideFlags System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : PlayGen.SUGAR.Unity Assembly : PlayGen.SUGAR.Unity.dll Syntax public abstract class BaseLeaderboardInterface : BaseInterface Fields _alliancesButton Button used to change the current leaderboard filter to 'Alliances'. Can be left null. Declaration [Tooltip(\"Button used to change the current leaderboard filter to 'Alliances'. Can be left null.\")] [SerializeField] protected Button _alliancesButton Field Value Type Description UnityEngine.UI.Button _friendsButton Button used to change the current leaderboard filter to 'Friends'. Can be left null. Declaration [Tooltip(\"Button used to change the current leaderboard filter to 'Friends'. Can be left null.\")] [SerializeField] protected Button _friendsButton Field Value Type Description UnityEngine.UI.Button _leaderboardName Text used for displaying leaderboard name. Can be left null. Declaration [Tooltip(\"Text used for displaying leaderboard name. Can be left null.\")] [SerializeField] protected Text _leaderboardName Field Value Type Description UnityEngine.UI.Text _leaderboardType Text used for displaying current leaderboard filter. Can be left null. Declaration [Tooltip(\"Text used for displaying current leaderboard filter. Can be left null.\")] [SerializeField] protected Text _leaderboardType Field Value Type Description UnityEngine.UI.Text _membersButton Button used to change the current leaderboard filter to 'Group Members'. Can be left null. Declaration [Tooltip(\"Button used to change the current leaderboard filter to 'Group Members'. Can be left null.\")] [SerializeField] protected Button _membersButton Field Value Type Description UnityEngine.UI.Button _nearButton Button used to change the current leaderboard filter to 'Near'. Can be left null. Declaration [Tooltip(\"Button used to change the current leaderboard filter to 'Near'. Can be left null.\")] [SerializeField] protected Button _nearButton Field Value Type Description UnityEngine.UI.Button _topButton Button used to change the current leaderboard filter to 'Top'. Can be left null. Declaration [Tooltip(\"Button used to change the current leaderboard filter to 'Top'. Can be left null.\")] [SerializeField] protected Button _topButton Field Value Type Description UnityEngine.UI.Button Methods Awake() Base Awake method adds onClick listeners for the close, signin, top, near and friends filter buttons. Declaration protected override void Awake() Overrides BaseInterface.Awake() ErrorDraw(Boolean) Used to set error text in case of no user being signed in, loading issues or if no results are available. Filter button interactable set to false if no user is signed in or loading issues occur. Declaration protected override void ErrorDraw(bool loadingSuccess) Parameters Type Name Description System.Boolean loadingSuccess Overrides BaseInterface.ErrorDraw(Boolean) HideInterfaces() Hides Account, Evaluation, UserFriend, GroupMember and UserGroup UI objects. Makes filter buttons interactable. Declaration protected override void HideInterfaces() Overrides BaseInterface.HideInterfaces() LoadErrorText() Get error string from Localization with key \"LEADERBOARD_LOAD_ERROR\" if there were issues loading the leaderboard standings list. Declaration protected override string LoadErrorText() Returns Type Description System.String Overrides BaseInterface.LoadErrorText() NoResultsErrorText() Get error string from Localization with key \"NO_LEADERBOARD_ERROR\" if there were no leaderboard standings to display. Declaration protected override string NoResultsErrorText() Returns Type Description System.String Overrides BaseInterface.NoResultsErrorText()"
  },
  "unity-client/api/PlayGen.SUGAR.Unity.CommandLineOptions.html": {
    "href": "unity-client/api/PlayGen.SUGAR.Unity.CommandLineOptions.html",
    "title": "Class CommandLineOptions | SUGAR",
    "keywords": "Class CommandLineOptions Inheritance System.Object CommandLineOptions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : PlayGen.SUGAR.Unity Assembly : PlayGen.SUGAR.Unity.dll Syntax public class CommandLineOptions Properties AuthenticationSource Declaration [Option('s', \"source\", Required = true, HelpText = \"Specify an authentication source.\")] public string AuthenticationSource { get; set; } Property Value Type Description System.String AutoLogin Declaration [Option('a', \"autologin\", DefaultValue = false, Required = true, HelpText = \"Sets flag to log in the user automatically.\")] public bool AutoLogin { get; set; } Property Value Type Description System.Boolean ClassId Declaration [Option('g', \"class\", Required = false, HelpText = \"Specify the id of the class.\")] public string ClassId { get; set; } Property Value Type Description System.String Custom Declaration [OptionArray('c', \"custom\", Required = false, HelpText = \"Customs args list, dictionary pattern, separated by space. Eg: -c key=value key=value etc.\")] public string[] Custom { get; set; } Property Value Type Description System.String [] Password Declaration [Option('p', \"pass\", Required = false, HelpText = \"Specify the password for the user.\")] public string Password { get; set; } Property Value Type Description System.String UserId Declaration [Option('u', \"uid\", Required = true, HelpText = \"Specify the id of the user.\")] public string UserId { get; set; } Property Value Type Description System.String"
  }
}